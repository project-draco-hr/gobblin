{
  final String db="db";
  final String table="stg";
  final int colNums=1000;
  final int batchSize=100;
  final int entryCount=1007;
  final int colSize=3;
  final int maxParamSize=10000;
  State state=new State();
  state.setProp(ConfigurationKeys.WRITER_JDBC_INSERT_BATCH_SIZE,Integer.toString(batchSize));
  state.setProp(ConfigurationKeys.WRITER_JDBC_MAX_PARAM_SIZE,maxParamSize);
  MySqlBufferedInserter inserter=new MySqlBufferedInserter(state);
  Connection conn=mock(Connection.class);
  PreparedStatement pstmt=mock(PreparedStatement.class);
  when(conn.prepareStatement(anyString())).thenReturn(pstmt);
  List<JdbcEntryData> jdbcEntries=createJdbcEntries(colNums,colSize,entryCount);
  for (  JdbcEntryData entry : jdbcEntries) {
    inserter.insert(conn,db,table,entry);
  }
  inserter.flush(conn);
  int expectedBatchSize=maxParamSize / colNums;
  int expectedExecuteCount=entryCount / expectedBatchSize + 1;
  verify(conn,times(2)).prepareStatement(anyString());
  verify(pstmt,times(expectedExecuteCount)).clearParameters();
  verify(pstmt,times(expectedExecuteCount)).execute();
  verify(pstmt,times(colNums * entryCount)).setObject(anyInt(),anyObject());
}
