{
  Collection<URI> imported=store.getOwnImports(dataset,Version);
  Assert.assertEquals(imported.size(),1);
  Iterator<URI> it=imported.iterator();
  Assert.assertEquals(it.next().toString(),"tags/t1/t2/t3");
  imported=store.getImportsRecursively(dataset,Version);
  Assert.assertEquals(imported.size(),2);
  it=imported.iterator();
  Assert.assertEquals(it.next().toString(),"tags/t1/t2/t3");
  Assert.assertEquals(it.next().toString(),"tags/l1/l2");
  Collection<URI> importedBy=store.getImportedBy(new URI("tags/l1/l2"),Version);
  Set<URI> expected=new HashSet<URI>();
  expected.add(new URI("tags/v1"));
  expected.add(new URI("tags/t1/t2/t3"));
  Assert.assertEquals(importedBy.size(),2);
  it=importedBy.iterator();
  Assert.assertTrue(expected.contains(it.next()));
  Assert.assertTrue(expected.contains(it.next()));
  importedBy=store.getImportedByRecursively(new URI("tags/l1/l2"),Version);
  expected.add(new URI("tags/v1/v2/v3"));
  expected.add(new URI("tags/v1/v2"));
  expected.add(new URI("datasets/a1/a2/a3"));
  Assert.assertEquals(importedBy.size(),5);
  it=importedBy.iterator();
  for (int i=0; i < importedBy.size(); i++) {
    Assert.assertTrue(expected.contains(it.next()));
  }
}
