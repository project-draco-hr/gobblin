{
  GobblinMetrics gobblinMetrics=GobblinMetrics.get("parent.context");
  State state=new State();
  state.setProp(ConfigurationKeys.METRICS_ENABLED_KEY,Boolean.toString(true));
  state.setProp(Instrumented.METRIC_CONTEXT_NAME_KEY,gobblinMetrics.getName());
  Instrumented instrumented=new Instrumented(state,InstrumentedExtractor.class);
  Assert.assertNotNull(instrumented.getMetricContext());
  Assert.assertTrue(instrumented.getMetricContext().getParent().isPresent());
  Assert.assertEquals(instrumented.getMetricContext().getParent().get(),gobblinMetrics.getMetricContext());
  Map<String,?> tags=instrumented.getMetricContext().getTagMap();
  Map<String,String> expectedTags=new HashMap<>();
  expectedTags.put("construct",Constructs.EXTRACTOR.toString());
  expectedTags.put("class",InstrumentedExtractor.class.getCanonicalName());
  expectedTags.put(MetricContext.METRIC_CONTEXT_ID_TAG_NAME,tags.get(MetricContext.METRIC_CONTEXT_ID_TAG_NAME).toString());
  expectedTags.put(MetricContext.METRIC_CONTEXT_NAME_TAG_NAME,tags.get(MetricContext.METRIC_CONTEXT_NAME_TAG_NAME).toString());
  Assert.assertEquals(tags.size(),expectedTags.size());
  for (  Map.Entry<String,?> tag : tags.entrySet()) {
    Assert.assertTrue(expectedTags.containsKey(tag.getKey()));
    Assert.assertEquals(expectedTags.get(tag.getKey()),tag.getValue().toString());
  }
}
