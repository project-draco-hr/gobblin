{
  this.baseWriterId=builder.getWriterId();
  this.closer=Closer.create();
  this.partitionWriters=CacheBuilder.newBuilder().build(new CacheLoader<GenericRecord,DataWriter<D>>(){
    @Override public DataWriter<D> load(    final GenericRecord key) throws Exception {
      return PartitionedDataWriter.this.closer.register(new InstrumentedPartitionedDataWriterDecorator<>(createPartitionWriter(key),state,key));
    }
  }
);
  if (state.contains(ConfigurationKeys.WRITER_PARTITIONER_CLASS)) {
    Preconditions.checkArgument(builder instanceof PartitionAwareDataWriterBuilder,String.format("%s was specified but the writer %s does not support partitioning.",ConfigurationKeys.WRITER_PARTITIONER_CLASS,builder.getClass().getCanonicalName()));
    try {
      this.shouldPartition=true;
      this.builder=Optional.of(PartitionAwareDataWriterBuilder.class.cast(builder));
      this.partitioner=Optional.of(WriterPartitioner.class.cast(ConstructorUtils.invokeConstructor(Class.forName(state.getProp(ConfigurationKeys.WRITER_PARTITIONER_CLASS)),state,builder.getBranches(),builder.getBranch())));
      Preconditions.checkArgument(this.builder.get().validatePartitionSchema(this.partitioner.get().partitionSchema()),String.format("Writer %s does not support schema from partitioner %s",builder.getClass().getCanonicalName(),this.partitioner.getClass().getCanonicalName()));
    }
 catch (    ReflectiveOperationException roe) {
      throw new IOException(roe);
    }
  }
 else {
    this.shouldPartition=false;
    InstrumentedDataWriterDecorator<D> writer=this.closer.register(new InstrumentedDataWriterDecorator<>(builder.build(),state));
    this.partitionWriters.put(NON_PARTITIONED_WRITER_KEY,writer);
    this.partitioner=Optional.absent();
    this.builder=Optional.absent();
  }
}
