{
  LOG.info("Start publishing data");
  LOG.info("WorkUnitStates: " + states);
  int branches=state.getPropAsInt(ConfigurationKeys.FORK_BRANCHES_KEY,1);
  Set<String> truncatedDestinationTables=Sets.newHashSet();
  JdbcWriterCommands commands=JdbcWriterCommandsFactory.newInstance(state);
  Connection conn=createConnection();
  boolean isFailed=false;
  try {
    conn.setAutoCommit(false);
    for (int i=0; i < branches; i++) {
      String destinationTable=state.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.JDBC_PUBLISHER_FINAL_TABLE_NAME,branches,i));
      Objects.requireNonNull(destinationTable);
      if (state.getPropAsBoolean(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.JDBC_PUBLISHER_REPLACE_FINAL_TABLE,branches,i),false) && !truncatedDestinationTables.contains(destinationTable)) {
        LOG.info("Deleting table " + destinationTable);
        commands.deleteAll(conn,destinationTable);
        truncatedDestinationTables.add(destinationTable);
      }
      Map<String,List<WorkUnitState>> stagingTables=getStagingTables(states,branches,i);
      for (      Map.Entry<String,List<WorkUnitState>> entry : stagingTables.entrySet()) {
        String stagingTable=entry.getKey();
        LOG.info("Copying data from staging table + " + stagingTable + " into destination table "+ destinationTable);
        commands.copyTable(conn,stagingTable,destinationTable);
        for (        WorkUnitState workUnitState : entry.getValue()) {
          workUnitState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
        }
      }
    }
    commands.flush(conn);
  }
 catch (  Exception e) {
    isFailed=true;
    try {
      LOG.error("Failed publishing. Rolling back.");
      conn.rollback();
    }
 catch (    SQLException se) {
      LOG.error("Failed rolling back.",se);
    }
    throw new RuntimeException("Failed publishing",e);
  }
 finally {
    try {
      if (!isFailed) {
        LOG.info("Commit publish data");
        conn.commit();
      }
    }
 catch (    SQLException se) {
      throw new RuntimeException("Failed to commit",se);
    }
    try {
      conn.close();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}
