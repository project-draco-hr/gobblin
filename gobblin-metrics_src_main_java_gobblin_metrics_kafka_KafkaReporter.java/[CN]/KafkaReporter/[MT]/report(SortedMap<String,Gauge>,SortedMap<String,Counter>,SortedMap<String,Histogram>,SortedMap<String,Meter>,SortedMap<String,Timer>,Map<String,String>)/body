{
  if (!this.reportMetrics || !this.producerOpt.isPresent()) {
    return;
  }
  List<Metric> metrics=new ArrayList<Metric>();
  for (  Entry<String,Gauge> gauge : gauges.entrySet()) {
    metrics.addAll(serializeGauge(gauge.getKey(),gauge.getValue()));
  }
  for (  Entry<String,Counter> counter : counters.entrySet()) {
    metrics.addAll(serializeCounter(counter.getKey(),counter.getValue()));
  }
  for (  Entry<String,Histogram> histogram : histograms.entrySet()) {
    metrics.addAll(serializeSnapshot(histogram.getKey(),histogram.getValue().getSnapshot()));
    metrics.addAll(serializeSingleValue(histogram.getKey(),histogram.getValue().getCount(),"count"));
  }
  for (  Entry<String,Meter> meter : meters.entrySet()) {
    metrics.addAll(serializeMetered(meter.getKey(),meter.getValue()));
  }
  for (  Entry<String,Timer> timer : timers.entrySet()) {
    metrics.addAll(serializeSnapshot(timer.getKey(),timer.getValue().getSnapshot()));
    metrics.addAll(serializeMetered(timer.getKey(),timer.getValue()));
    metrics.addAll(serializeSingleValue(timer.getKey(),timer.getValue().getCount(),"count"));
  }
  Map<String,String> allTags=Maps.newHashMap();
  allTags.putAll(tags);
  allTags.putAll(this.tags);
  MetricReport report=new MetricReport(allTags,new DateTime().getMillis(),metrics);
  byte[] serializedReport=serializeReport(report);
  if (serializedReport != null) {
    List<KeyedMessage<String,byte[]>> messages=new ArrayList<KeyedMessage<String,byte[]>>();
    messages.add(new KeyedMessage<String,byte[]>(this.topic,serializeReport(report)));
    this.producerOpt.get().send(messages);
  }
}
