{
  FileSystem localFS=FileSystem.getLocal(new Configuration());
  Path testRoot=localFS.makeQualified(new Path("testConfiguration"));
  Path configRoot=localFS.makeQualified(new Path(testRoot,"dir2"));
  Path configStoreRoot=new Path(configRoot,SimpleHDFSConfigStore.CONFIG_STORE_NAME);
  Assert.assertTrue(localFS.mkdirs(configStoreRoot));
  try {
    Config confConf1=ConfigFactory.empty().withValue(SimpleHDFSConfigStoreFactory.DEFAULT_STORE_URI_KEY,ConfigValueFactory.fromAnyRef(configRoot.toString()));
    SimpleHDFSConfigStoreFactory confFactory=new SimpleHDFSConfigStoreFactory(confConf1);
    Assert.assertTrue(confFactory.hasDefaultStoreURI());
    Assert.assertEquals(confFactory.getDefaultStoreURI(),configRoot.toUri());
    Assert.assertEquals(confFactory.getPhysicalScheme(),"file");
    Assert.assertEquals(confFactory.getDefaultRootDir().toString(),"file:" + System.getProperty("user.home"));
    SimpleHDFSConfigStore store1=confFactory.createConfigStore(new URI("simple-file:/d"));
    Assert.assertEquals(store1.getStoreURI().getScheme(),confFactory.getScheme());
    Assert.assertEquals(store1.getStoreURI().getAuthority(),confFactory.getDefaultStoreURI().getAuthority());
    Assert.assertEquals(store1.getStoreURI().getPath(),confFactory.getDefaultStoreURI().getPath());
    Config confConf2=ConfigFactory.empty().withValue(SimpleHDFSConfigStoreFactory.DEFAULT_STORE_URI_KEY,ConfigValueFactory.fromAnyRef(testRoot.toString()));
    try {
      new SimpleHDFSConfigStoreFactory(confConf2);
      Assert.fail("Exception expected");
    }
 catch (    IllegalArgumentException e) {
      Assert.assertTrue(e.getMessage().contains("Path does not appear to be a config store root"));
    }
    Config confConf3=ConfigFactory.empty().withValue(SimpleHDFSConfigStoreFactory.DEFAULT_STORE_URI_KEY,ConfigValueFactory.fromAnyRef(""));
    try {
      new SimpleHDFSConfigStoreFactory(confConf3);
      Assert.fail("Exception expected");
    }
 catch (    IllegalArgumentException e) {
      Assert.assertTrue(e.getMessage().contains("Default store URI should be non-empty"));
    }
  }
  finally {
    localFS.delete(testRoot,true);
  }
}
