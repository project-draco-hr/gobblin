{
  Assert.assertEquals(SqlQueryUtils.addPredicate("SELECT foo FROM bar","foo != 'blah'"),"SELECT foo FROM bar where (foo != 'blah')");
  Assert.assertEquals(SqlQueryUtils.addPredicate("SELECT foo,whereTo FROM bar WHERE whereTo==foo","foo != 'blah'"),"SELECT foo,whereTo FROM bar WHERE whereTo==foo and (foo != 'blah')");
  Assert.assertEquals(SqlQueryUtils.addPredicate("SELECT foo,andThis FROM bar WHERE andThis>foo","foo != 'blah'"),"SELECT foo,andThis FROM bar WHERE andThis>foo and (foo != 'blah')");
  Assert.assertEquals(SqlQueryUtils.addPredicate("SELECT foo FROM bar",null),"SELECT foo FROM bar");
  Assert.assertEquals(SqlQueryUtils.addPredicate("SELECT foo FROM bar",""),"SELECT foo FROM bar");
  try {
    SqlQueryUtils.addPredicate("SELECT foo,foo1 WHERE foo1==foo","foo != 'blah'");
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.toString().contains("'from'"));
  }
  try {
    SqlQueryUtils.addPredicate("SELECT foo,foo1 FROM blah WHERE foo1==foo ORDER by foo","foo != 'blah'");
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.toString().contains("'order by'"));
  }
  try {
    SqlQueryUtils.addPredicate("SELECT foo,foo1 FROM blah WHERE foo1==foo GROUP BY foo","foo != 'blah'");
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.toString().contains("'group by'"));
  }
  try {
    SqlQueryUtils.addPredicate("SELECT foo,foo1 FROM blah WHERE foo1==foo HAVING foo1 is null","foo != 'blah'");
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.toString().contains("'having'"));
  }
  try {
    SqlQueryUtils.addPredicate("SELECT foo,foo1 FROM blah WHERE foo1==foo LIMIT 10","foo != 'blah'");
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.toString().contains("'limit'"));
  }
}
