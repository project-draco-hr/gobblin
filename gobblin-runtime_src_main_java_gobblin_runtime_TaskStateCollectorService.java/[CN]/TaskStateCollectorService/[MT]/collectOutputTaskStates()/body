{
  if (!this.fs.exists(this.outputTaskStateDir)) {
    LOGGER.warn(String.format("Output task state path %s does not exist",this.outputTaskStateDir));
    return;
  }
  FileStatus[] fileStatuses=this.fs.listStatus(this.outputTaskStateDir,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().endsWith(AbstractJobLauncher.TASK_STATE_STORE_TABLE_SUFFIX) && !path.getName().startsWith(FsStateStore.TMP_FILE_PREFIX);
    }
  }
);
  if (fileStatuses == null || fileStatuses.length == 0) {
    LOGGER.warn("No output task state files found in " + this.outputTaskStateDir);
    return;
  }
  Queue<TaskState> taskStateQueue=Queues.newConcurrentLinkedQueue();
  try (ParallelRunner stateSerDeRunner=new ParallelRunner(stateSerDeRunnerThreads,this.fs)){
    for (    FileStatus status : fileStatuses) {
      LOGGER.info("Found output task state file " + status.getPath());
      stateSerDeRunner.deserializeFromSequenceFile(Text.class,TaskState.class,status.getPath(),taskStateQueue,true);
    }
  }
 catch (  IOException ioe) {
    LOGGER.warn("Could not read all task state files.");
  }
  LOGGER.info(String.format("Collected task state of %d completed tasks",taskStateQueue.size()));
  for (  TaskState taskState : taskStateQueue) {
    this.jobState.addTaskState(taskState);
  }
  this.eventBus.post(new NewTaskCompletionEvent(ImmutableList.copyOf(taskStateQueue)));
}
