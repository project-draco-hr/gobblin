{
  Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR),"Missing property " + ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR);
  this.config=ConfigUtils.propertiesToConfig(properties);
  this.targetGroup=properties.containsKey(DESTINATION_GROUP_KEY) ? Optional.of(properties.getProperty(DESTINATION_GROUP_KEY)) : Optional.<String>absent();
  this.preserve=PreserveAttributes.fromMnemonicString(properties.getProperty(PRESERVE_ATTRIBUTES_KEY));
  Path publishDirTmp=new Path(properties.getProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR));
  if (!publishDirTmp.isAbsolute()) {
    publishDirTmp=new Path(targetFs.getWorkingDirectory(),publishDirTmp);
  }
  this.publishDir=publishDirTmp;
  this.copyContext=new CopyContext();
  this.targetFs=targetFs;
  if (properties.containsKey(PRIORITIZER_ALIAS_KEY)) {
    try {
      this.prioritizer=Optional.of(GobblinConstructorUtils.<FileSetComparator>invokeLongestConstructor(new ClassAliasResolver(FileSetComparator.class).resolveClass(properties.getProperty(PRIORITIZER_ALIAS_KEY)),properties));
    }
 catch (    ReflectiveOperationException roe) {
      throw new RuntimeException("Could not build prioritizer.",roe);
    }
  }
 else {
    this.prioritizer=Optional.absent();
  }
  this.maxToCopy=CopyResourcePool.fromConfig(ConfigUtils.getConfigOrEmpty(this.config,MAX_COPY_PREFIX));
}
