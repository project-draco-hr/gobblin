{
  LinkedListConfigKeyPath path=LinkedListConfigKeyPath.createFromPathString("/ABC/DEF/GHI");
  Assert.assertEquals(path.getOwnPathName(),"GHI");
  Assert.assertEquals(path.getAbsolutePathString(),"/ABC/DEF/GHI");
  Assert.assertEquals(path.getParent().getOwnPathName(),"DEF");
  Assert.assertEquals(path.getParent().getAbsolutePathString(),"/ABC/DEF");
  Assert.assertEquals(path.getParent().getParent().getOwnPathName(),"ABC");
  Assert.assertEquals(path.getParent().getParent().getAbsolutePathString(),"/ABC");
  Assert.assertTrue(path.getParent().getParent().getParent().isRootPath());
  LinkedListConfigKeyPath path2=LinkedListConfigKeyPath.createFromPathString("/ABC//DEF/GHI/");
  Assert.assertEquals(path2,path);
  Assert.assertTrue(LinkedListConfigKeyPath.createFromPathString("/").isRootPath());
  try {
    LinkedListConfigKeyPath.createFromPathString("a/b/c");
    Assert.fail("exception expected");
  }
 catch (  IllegalArgumentException e) {
  }
  path2=LinkedListConfigKeyPath.createFromURIString("/ABC/DEF/GHI");
  Assert.assertEquals(path2,path);
  path2=LinkedListConfigKeyPath.createFromURIString("scheme:/ABC/DEF/GHI");
  Assert.assertEquals(path2,path);
  path2=LinkedListConfigKeyPath.createFromURIString("scheme://some.server/ABC/DEF/GHI");
  Assert.assertEquals(path2,path);
  Assert.assertTrue(LinkedListConfigKeyPath.createFromURIString("scheme://some.server/").isRootPath());
}
