{
  return new AbstractIterator<HiveDataset>(){
    private Iterator<DbAndTable> tables=getTables().iterator();
    @Override protected HiveDataset computeNext(){
      while (this.tables.hasNext()) {
        DbAndTable dbAndTable=this.tables.next();
        try (AutoReturnableObject<IMetaStoreClient> client=HiveDatasetFinder.this.clientPool.getClient()){
          Table table=client.get().getTable(dbAndTable.getDb(),dbAndTable.getTable());
          Config datasetConfig=getDatasetConfig(table);
          if (ConfigUtils.getBoolean(datasetConfig,HIVE_DATASET_IS_BLACKLISTED_KEY,DEFAULT_HIVE_DATASET_IS_BLACKLISTED_KEY)) {
            continue;
          }
          EventSubmitter.submit(HiveDatasetFinder.this.eventSubmitter,DATASET_FOUND,SlaEventKeys.DATASET_URN_KEY,dbAndTable.toString());
          return createHiveDataset(table,datasetConfig);
        }
 catch (        Throwable t) {
          log.error(String.format("Failed to create HiveDataset for table %s.%s",dbAndTable.getDb(),dbAndTable.getTable()),t);
          EventSubmitter.submit(HiveDatasetFinder.this.eventSubmitter,DATASET_ERROR,SlaEventKeys.DATASET_URN_KEY,dbAndTable.toString(),FAILURE_CONTEXT,t.toString());
        }
      }
      return endOfData();
    }
  }
;
}
