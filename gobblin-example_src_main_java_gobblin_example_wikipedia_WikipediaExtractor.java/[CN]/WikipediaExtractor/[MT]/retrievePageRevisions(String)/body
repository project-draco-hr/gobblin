{
  Queue<JsonElement> retrievedRevisions=new LinkedList<>();
  Closer closer=Closer.create();
  HttpURLConnection conn=null;
  StringBuilder sb=new StringBuilder();
  String urlStr=this.rootUrl + "&titles=" + pageTitle+ "&rvlimit="+ this.revisionsCnt;
  try {
    conn=getHttpConnection(urlStr);
    conn.connect();
    BufferedReader br=closer.register(new BufferedReader(new InputStreamReader(conn.getInputStream(),ConfigurationKeys.DEFAULT_CHARSET_ENCODING)));
    String line;
    while ((line=br.readLine()) != null) {
      sb.append(line + "\n");
    }
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    try {
      closer.close();
    }
 catch (    IOException e) {
      LOG.error("IOException in Closer.close() while retrieving revisions for title '" + pageTitle + "' from URL '"+ urlStr+ "'");
    }
    if (conn != null) {
      conn.disconnect();
    }
  }
  if (Strings.isNullOrEmpty(sb.toString())) {
    LOG.warn("Received empty response for query: " + urlStr);
    return retrievedRevisions;
  }
  JsonElement jsonElement=GSON.fromJson(sb.toString(),JsonElement.class);
  if (jsonElement == null || !jsonElement.isJsonObject()) {
    return retrievedRevisions;
  }
  JsonObject jsonObj=jsonElement.getAsJsonObject();
  if (jsonObj == null || !jsonObj.has(JSON_MEMBER_QUERY)) {
    return retrievedRevisions;
  }
  JsonObject queryObj=jsonObj.getAsJsonObject(JSON_MEMBER_QUERY);
  if (!queryObj.has(JSON_MEMBER_PAGES)) {
    return retrievedRevisions;
  }
  JsonObject pagesObj=queryObj.getAsJsonObject(JSON_MEMBER_PAGES);
  if (pagesObj.entrySet().isEmpty()) {
    return retrievedRevisions;
  }
  JsonObject pageIdObj=pagesObj.getAsJsonObject(pagesObj.entrySet().iterator().next().getKey());
  if (!pageIdObj.has(JSON_MEMBER_REVISIONS)) {
    return retrievedRevisions;
  }
  JsonArray jsonArr=pageIdObj.getAsJsonArray(JSON_MEMBER_REVISIONS);
  for (  JsonElement revElement : jsonArr) {
    JsonObject revObj=revElement.getAsJsonObject();
    if (pageIdObj.has(JSON_MEMBER_PAGEID)) {
      revObj.add(JSON_MEMBER_PAGEID,pageIdObj.get(JSON_MEMBER_PAGEID));
    }
    if (pageIdObj.has(JSON_MEMBER_TITLE)) {
      revObj.add(JSON_MEMBER_TITLE,pageIdObj.get(JSON_MEMBER_TITLE));
    }
    retrievedRevisions.add(revObj);
  }
  LOG.info(retrievedRevisions.size() + " record(s) retrieved for title " + pageTitle);
  return retrievedRevisions;
}
