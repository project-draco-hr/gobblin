{
  Logger log=LoggerFactory.getLogger("testSendShutdownRequest");
  Closer closer=Closer.create();
  try {
    CuratorFramework curatorFramework=TestHelper.createZkClient(this.testingZKServer,closer);
    final GetInstanceMessageNumFunc getMessageNumFunc=new GetInstanceMessageNumFunc(GobblinApplicationMasterTest.class.getSimpleName(),curatorFramework);
    AssertWithBackoff assertWithBackoff=AssertWithBackoff.create().logger(log).timeoutMs(30000);
    this.gobblinApplicationMaster.sendShutdownRequest();
    Assert.assertEquals(curatorFramework.checkExists().forPath(String.format("/%s/INSTANCES/%s/MESSAGES",GobblinApplicationMasterTest.class.getSimpleName(),TestHelper.TEST_HELIX_INSTANCE_NAME)).getVersion(),0);
    assertWithBackoff.assertEquals(getMessageNumFunc,1,"1 message queued");
    assertWithBackoff.assertEquals(getMessageNumFunc,0,"all messages processed");
  }
  finally {
    closer.close();
  }
}
