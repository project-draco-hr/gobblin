{
  Preconditions.checkNotNull(this.destination);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(this.writerId));
  Preconditions.checkNotNull(this.dataConverter);
  Preconditions.checkNotNull(this.schemaConverter);
  Preconditions.checkNotNull(this.sourceSchema);
  Preconditions.checkArgument(this.format == WriterOutputFormat.AVRO);
  Schema schema;
  try {
    schema=this.schemaConverter.convert(this.sourceSchema);
  }
 catch (  SchemaConversionException e) {
    throw new IOException("Failed to convert the source schema: " + this.sourceSchema);
  }
switch (this.destination.getType()) {
case HDFS:
    Properties properties=this.destination.getProperties();
  String uri=properties.getProperty(ConfigurationKeys.WRITER_FILE_SYSTEM_URI);
String stagingDir=properties.getProperty(ConfigurationKeys.WRITER_STAGING_DIR,ConfigurationKeys.DEFAULT_STAGING_DIR) + Path.SEPARATOR + this.jobName;
String outputDir=properties.getProperty(ConfigurationKeys.WRITER_OUTPUT_DIR,ConfigurationKeys.DEFAULT_OUTPUT_DIR) + Path.SEPARATOR + this.jobName;
String fileName=properties.getProperty(ConfigurationKeys.WRITER_FILE_NAME) + "." + this.writerId;
int bufferSize=Integer.parseInt(properties.getProperty(ConfigurationKeys.WRITER_BUFFER_SIZE,ConfigurationKeys.DEFAULT_BUFFER_SIZE));
return new AvroHdfsDataWriter<DI>(URI.create(uri),stagingDir,outputDir,fileName,bufferSize,this.dataConverter,schema);
case KAFKA:
return new KafkaDataWriter<DI>();
default :
throw new RuntimeException("Unknown destination type: " + this.destination.getType());
}
}
