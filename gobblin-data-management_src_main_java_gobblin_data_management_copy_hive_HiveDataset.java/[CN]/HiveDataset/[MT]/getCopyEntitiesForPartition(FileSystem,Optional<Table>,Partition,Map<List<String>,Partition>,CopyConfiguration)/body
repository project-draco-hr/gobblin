{
  List<CopyEntity> copyEntities=Lists.newArrayList();
  InputFormat<?,?> inputFormat=getInputFormat(partition.getTPartition().getSd());
  Optional<Partition> targetPartition=Optional.fromNullable(targetPartitions.get(partition.getValues()));
  if (targetPartition.isPresent()) {
    targetPartitions.remove(partition.getValues());
    try {
      checkPartitionCompatibility(partition,targetPartition.get());
    }
 catch (    IOException ioe) {
      log.warn("Source and target partitions are not compatible. Will override target partition.");
      targetPartition=Optional.absent();
    }
  }
  Collection<Path> sourcePaths=getPaths(inputFormat,partition.getLocation());
  Collection<Path> targetExistingPaths=targetPartition.isPresent() ? getPaths(inputFormat,targetPartition.get().getLocation()) : Sets.<Path>newHashSet();
  DiffPathSet diffPathSet=diffSourceAndTargetPaths(sourcePaths,targetExistingPaths,Optional.of(partition),targetFs);
  for (  CopyableFile.Builder builder : getCopyableFilesFromPaths(diffPathSet.filesToCopy,configuration,Optional.of(partition))) {
    copyEntities.add(builder.fileSet(gson.toJson(partition.getValues())).build());
  }
  if (!targetPartition.isPresent()) {
    HiveSpec partitionHiveSpec=new SimpleHiveSpec.Builder(this.table.getDataLocation()).withTable(this.table.getTTable()).withPartition(Optional.of(partition.getTPartition())).build();
  }
  return copyEntities;
}
