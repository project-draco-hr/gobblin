{
  InputStream fileIn=gpgFile;
  InputStream keyIn=new BufferedInputStream(new FileInputStream(privateKeyFile));
  fileIn=PGPUtil.getDecoderStream(fileIn);
  InputStream unc=null;
  try {
    PGPObjectFactory pgpF=new PGPObjectFactory(fileIn);
    PGPEncryptedDataList enc;
    Object o=pgpF.nextObject();
    if (o instanceof PGPEncryptedDataList) {
      enc=(PGPEncryptedDataList)o;
    }
 else {
      enc=(PGPEncryptedDataList)pgpF.nextObject();
    }
    @SuppressWarnings("unchecked") Iterator<PGPPublicKeyEncryptedData> it=(Iterator<PGPPublicKeyEncryptedData>)enc.getEncryptedDataObjects();
    PGPPrivateKey sKey=null;
    PGPPublicKeyEncryptedData pbe=null;
    PGPSecretKeyRingCollection pgpSec=new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyIn));
    while (sKey == null && it.hasNext()) {
      pbe=(PGPPublicKeyEncryptedData)it.next();
      PGPSecretKey pgpSecKey=pgpSec.getSecretKey(pbe.getKeyID());
      sKey=pgpSecKey.extractPrivateKey(new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider()).build(null));
    }
    if (sKey == null) {
      throw new IllegalArgumentException("Secret key for message not found");
    }
    InputStream clear=pbe.getDataStream(new BcPublicKeyDataDecryptorFactory(sKey));
    PGPObjectFactory plainFact=new PGPObjectFactory(clear);
    Object message=plainFact.nextObject();
    if (message instanceof PGPCompressedData) {
      PGPCompressedData cData=(PGPCompressedData)message;
      PGPObjectFactory pgpFact=new PGPObjectFactory(cData.getDataStream());
      message=pgpFact.nextObject();
    }
    if (message instanceof PGPLiteralData) {
      PGPLiteralData ld=(PGPLiteralData)message;
      unc=ld.getInputStream();
    }
 else     if (message instanceof PGPOnePassSignatureList) {
      throw new PGPException("Encrypted message contains a signed message - not literal data");
    }
 else {
      throw new PGPException("Message is not a simple encrypted file - type unknown");
    }
  }
 catch (  PGPException e) {
    log.error("PGPException: " + e.getMessage(),e);
    if (e.getUnderlyingException() != null) {
      log.error("UnderLyingException: " + e.getUnderlyingException().getMessage(),e.getUnderlyingException());
    }
  }
  return unc;
}
