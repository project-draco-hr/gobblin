{
  WorkUnitState previousWus=new WorkUnitState();
  previousWus.setProp(ConfigurationKeys.DATASET_URN_KEY,"test_dataset_urn");
  previousWus.setProp(PartitionLevelWatermarker.IS_WATERMARK_WORKUNIT_KEY,true);
  previousWus.setActualHighWatermark(new MultiKeyValueLongWatermark(ImmutableMap.of("2015",100l,"2016",101l)));
  WorkUnitState previousWus2=new WorkUnitState();
  previousWus2.setProp(ConfigurationKeys.DATASET_URN_KEY,"test_dataset_urn2");
  previousWus2.setProp(PartitionLevelWatermarker.IS_WATERMARK_WORKUNIT_KEY,true);
  previousWus2.setActualHighWatermark(new MultiKeyValueLongWatermark(ImmutableMap.of("01",1l,"02",2l)));
  SourceState state=new SourceState(new State(),Lists.newArrayList(previousWus,previousWus2));
  PartitionLevelWatermarker watermarker=new PartitionLevelWatermarker(state);
  Assert.assertEquals(watermarker.getPreviousWatermarks().size(),2);
  Assert.assertEquals(watermarker.getPreviousWatermarks().get("test_dataset_urn"),ImmutableMap.of("2015",100l,"2016",101l));
  Assert.assertEquals(watermarker.getPreviousWatermarks().get("test_dataset_urn2"),ImmutableMap.of("01",1l,"02",2l));
  Assert.assertEquals(watermarker.getPreviousWatermarks(),watermarker.getExpectedHighWatermarks());
}
