{
  Set<Path> paths=Sets.newHashSet(new Path("dir1/file2"),new Path("dir1/file1"),new Path("dir2/file1"));
  String baseDir=getClass().getClassLoader().getResource("copyableDatasetTest/source").getFile();
  String destinationDir=getClass().getClassLoader().getResource("copyableDatasetTest/destination").getFile();
  Properties properties=new Properties();
  properties.setProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR,"/publisher");
  RecursiveCopyableDataset dataset=new RecursiveCopyableDataset(FileSystem.getLocal(new Configuration()),new Path(baseDir),properties,new Path(baseDir));
  CopyConfiguration copyConfiguration=CopyConfiguration.builder(FileSystem.getLocal(new Configuration()),properties).publishDir(new Path(destinationDir)).preserve(PreserveAttributes.fromMnemonicString("ugp")).build();
  Collection<? extends CopyEntity> files=dataset.getCopyableFiles(FileSystem.getLocal(new Configuration()),copyConfiguration);
  Assert.assertEquals(files.size(),3);
  for (  CopyEntity copyEntity : files) {
    Assert.assertTrue(copyEntity instanceof CopyableFile);
    CopyableFile file=(CopyableFile)copyEntity;
    Path originRelativePath=PathUtils.relativizePath(PathUtils.getPathWithoutSchemeAndAuthority(file.getOrigin().getPath()),PathUtils.getPathWithoutSchemeAndAuthority(new Path(baseDir)));
    Path targetRelativePath=PathUtils.relativizePath(PathUtils.getPathWithoutSchemeAndAuthority(file.getDestination()),PathUtils.getPathWithoutSchemeAndAuthority(new Path(destinationDir)));
    Assert.assertTrue(paths.contains(originRelativePath));
    Assert.assertTrue(paths.contains(targetRelativePath));
    Assert.assertEquals(originRelativePath,targetRelativePath);
    Assert.assertEquals(file.getAncestorsOwnerAndPermission().size(),file.getOrigin().getPath().depth());
  }
}
