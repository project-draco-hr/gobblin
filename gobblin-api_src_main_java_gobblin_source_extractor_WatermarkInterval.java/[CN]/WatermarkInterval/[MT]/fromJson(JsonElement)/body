{
  Preconditions.checkArgument(json.isJsonArray(),"The given " + json.getClass().getName() + " must a "+ JsonArray.class.getName());
  JsonArray jsonArray=json.getAsJsonArray();
  Preconditions.checkArgument(jsonArray.size() == WATERMARK_TO_JSON_ARRAY_SIZE,"The given " + JsonArray.class.getName() + " must be of size "+ WATERMARK_TO_JSON_ARRAY_SIZE);
  Iterator<JsonElement> jsonElements=jsonArray.iterator();
  JsonElement lowWatermarkJsonElement=jsonElements.next();
  JsonElement expectedHighWatermarkJsonElement=jsonElements.next();
  Preconditions.checkArgument(lowWatermarkJsonElement.isJsonObject() && expectedHighWatermarkJsonElement.isJsonObject(),"All elements of in the given " + JsonArray.class.getName() + " must of type "+ JsonObject.class.getName());
  try {
    this.lowWatermark=jsonObjectToWatermark(lowWatermarkJsonElement.getAsJsonObject());
  }
 catch (  InstantiationException e) {
    throw new RuntimeException("Could not create the low watermark",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException("Could not create the low watermark",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException("Could not create the low watermark",e);
  }
  try {
    this.expectedHighWatermark=jsonObjectToWatermark(expectedHighWatermarkJsonElement.getAsJsonObject());
  }
 catch (  InstantiationException e) {
    throw new RuntimeException("Could not create the expected high watermark",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException("Could not create the expected high watermark",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException("Could not create the expected high watermark",e);
  }
}
