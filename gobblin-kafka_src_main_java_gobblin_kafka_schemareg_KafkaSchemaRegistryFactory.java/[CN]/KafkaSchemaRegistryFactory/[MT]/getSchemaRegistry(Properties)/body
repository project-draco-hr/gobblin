{
  Preconditions.checkArgument(props.containsKey(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_CLASS),"Missing required property " + KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_CLASS);
  boolean tryCache=Boolean.parseBoolean(props.getProperty(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_CACHE,DEFAULT_TRY_CACHING));
  Class<?> clazz;
  try {
    clazz=(Class<?>)Class.forName(props.getProperty(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_CLASS));
    KafkaSchemaRegistry schemaRegistry=(KafkaSchemaRegistry)ConstructorUtils.invokeConstructor(clazz,props);
    if (tryCache && !schemaRegistry.hasInternalCache()) {
      schemaRegistry=new CachingKafkaSchemaRegistry(schemaRegistry);
    }
    return schemaRegistry;
  }
 catch (  ClassNotFoundException|NoSuchMethodException|IllegalAccessException|InvocationTargetException|InstantiationException e) {
    log.error("Failed to instantiate " + KafkaSchemaRegistry.class,e);
    throw Throwables.propagate(e);
  }
}
