{
  Schema keySchema=null;
  if (useAllAttributesForCompaction()) {
    LOG.info("Using all attributes in the schema (except Map fields) for compaction");
    keySchema=getAllFieldsExceptMap(newestSchema);
  }
 else   if (keySchemaFileSpecified()) {
    Path keySchemaFile=getKeySchemaFile();
    LOG.info("Using attributes specified in schema file " + keySchemaFile + " for compaction");
    try {
      keySchema=AvroUtils.parseSchemaFromFile(keySchemaFile,this.fs);
    }
 catch (    IOException e) {
      LOG.error("Failed to parse avro schema from " + keySchemaFile + ", using all attributes in the schema (except Map fields) for compaction");
      keySchema=getAllFieldsExceptMap(newestSchema);
    }
    if (!isKeySchemaValid(keySchema,newestSchema)) {
      LOG.warn(String.format("Key schema %s is not compatible with record schema %s.",keySchema,newestSchema) + "Using all attributes in the schema (except Map fields) for compaction");
      keySchema=getAllFieldsExceptMap(newestSchema);
    }
  }
 else {
    LOG.info("Property " + ConfigurationKeys.COMPACTION_AVRO_KEY_SCHEMA_LOC + " not provided. Using all attributes in the schema (except Map fields) for compaction");
    keySchema=getAllFieldsExceptMap(newestSchema);
  }
  return keySchema;
}
