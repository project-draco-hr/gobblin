{
  FileSystem fs=FileSystem.get(URI.create(this.properties.getProperty(ConfigurationKeys.STATE_STORE_FS_URI_KEY)),new Configuration());
  Path taskStateStoreRootDir=new Path(this.properties.getProperty(ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY));
  FileStatus[] rootStatuses=fs.listStatus(taskStateStoreRootDir);
  if (rootStatuses == null || rootStatuses.length == 0) {
    return;
  }
  LOG.info("Restoring the mapping between jobs and IDs of their last runs");
  for (  FileStatus status : rootStatuses) {
    FileStatus[] statuses=fs.listStatus(status.getPath(),new PathFilter(){
      @Override public boolean accept(      Path path){
        return path.getName().endsWith(TASK_STATE_STORE_TABLE_SUFFIX);
      }
    }
);
    if (statuses == null || statuses.length == 0) {
      continue;
    }
    Arrays.sort(statuses,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus fileStatus1,      FileStatus fileStatus2){
        String fileName1=fileStatus1.getPath().getName();
        String taskId1=fileName1.substring(0,fileName1.indexOf('.'));
        String fileName2=fileStatus2.getPath().getName();
        String taskId2=fileName2.substring(0,fileName2.indexOf('.'));
        Long ts1=Long.parseLong(taskId1.substring(taskId1.lastIndexOf('_') + 1));
        Long ts2=Long.parseLong(taskId2.substring(taskId2.lastIndexOf('_') + 1));
        return -ts1.compareTo(ts2);
      }
    }
);
    String jobName=status.getPath().getName();
    String fileName=statuses[0].getPath().getName();
    String lastJobId=fileName.substring(0,fileName.indexOf('.'));
    LOG.info(String.format("Restored last job ID %s for job %s",lastJobId,jobName));
    this.lastJobIdMap.put(jobName,lastJobId);
  }
}
