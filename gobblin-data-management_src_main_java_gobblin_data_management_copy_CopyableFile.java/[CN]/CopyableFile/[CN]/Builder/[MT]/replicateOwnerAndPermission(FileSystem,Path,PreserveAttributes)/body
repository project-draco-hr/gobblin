{
  Path rootPathTmp=PathUtils.getPathWithoutSchemeAndAuthority(this.rootPath);
  List<OwnerAndPermission> ancestorOwnerAndPermissions=Lists.newArrayList();
  try {
    Path currentPath=PathUtils.getPathWithoutSchemeAndAuthority(path);
    while (currentPath != null && currentPath.getParent() != null) {
      currentPath=currentPath.getParent();
      final Path thisPath=currentPath;
      OwnerAndPermission ownerAndPermission=this.configuration.getCopyContext().getOwnerAndPermissionCache().get(originFs.makeQualified(currentPath),new Callable<OwnerAndPermission>(){
        @Override public OwnerAndPermission call() throws Exception {
          FileStatus fs=originFs.getFileStatus(thisPath);
          return new OwnerAndPermission(fs.getOwner(),fs.getGroup(),fs.getPermission());
        }
      }
);
      String group=null;
      if (this.preserve.preserve(Option.GROUP)) {
        group=ownerAndPermission.getGroup();
      }
 else       if (this.configuration.getTargetGroup().isPresent()) {
        group=this.configuration.getTargetGroup().get();
      }
      ancestorOwnerAndPermissions.add(new OwnerAndPermission(preserve.preserve(Option.OWNER) ? ownerAndPermission.getOwner() : null,group,preserve.preserve(Option.PERMISSION) ? ownerAndPermission.getFsPermission() : null));
    }
  }
 catch (  ExecutionException ee) {
    throw new IOException(ee.getCause());
  }
  return ancestorOwnerAndPermissions;
}
