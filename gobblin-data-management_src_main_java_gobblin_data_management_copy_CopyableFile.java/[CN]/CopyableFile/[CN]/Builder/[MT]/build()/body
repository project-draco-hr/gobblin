{
  if (!this.destination.isAbsolute()) {
    throw new IOException("Destination must be absolute: " + this.destination);
  }
  if (this.destinationOwnerAndPermission == null) {
    String owner=this.preserve.preserve(Option.OWNER) ? this.origin.getOwner() : null;
    String group=null;
    if (this.preserve.preserve(Option.GROUP)) {
      group=this.origin.getGroup();
    }
 else     if (this.configuration.getTargetGroup().isPresent()) {
      group=this.configuration.getTargetGroup().get();
    }
    FsPermission permission=this.preserve.preserve(Option.PERMISSION) ? this.origin.getPermission() : null;
    this.destinationOwnerAndPermission=new OwnerAndPermission(owner,group,permission);
  }
  if (this.ancestorsOwnerAndPermission == null) {
    this.ancestorsOwnerAndPermission=replicateAncestorsOwnerAndPermission(this.originFs,this.origin.getPath(),this.configuration.getTargetFs(),this.destination);
  }
  if (this.checksum == null) {
    FileChecksum checksumTmp=this.originFs.getFileChecksum(this.origin.getPath());
    this.checksum=checksumTmp == null ? new byte[0] : checksumTmp.getBytes();
  }
  if (this.fileSet == null) {
    this.fileSet="";
  }
  if (this.originTimestamp == 0) {
    this.originTimestamp=this.origin.getModificationTime();
  }
  if (this.upstreamTimestamp == 0) {
    this.upstreamTimestamp=this.origin.getModificationTime();
  }
  return new CopyableFile(this.origin,this.destination,this.destinationOwnerAndPermission,this.ancestorsOwnerAndPermission,this.checksum,this.preserve,this.fileSet,this.originTimestamp,this.upstreamTimestamp,this.additionalMetadata);
}
