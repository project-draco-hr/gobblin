{
  ExecutorService executorService=Executors.newFixedThreadPool(5);
  FileSystem fs=mock(FileSystem.class);
  Properties properties=new Properties();
  TestTrash.simulateDelay(properties,3);
  final TestTrash trash=new TestTrash(fs,properties,"user");
  final Path path1=new Path("/some/path");
  Future<Boolean> future1=executorService.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return trash.moveToTrash(path1);
    }
  }
);
  while (trash.getOperationsReceived() < 1) {
  }
  Assert.assertFalse(future1.isDone());
  Assert.assertEquals(trash.getDeleteOperations().size(),0);
  trash.tick();
  Assert.assertFalse(future1.isDone());
  Assert.assertEquals(trash.getDeleteOperations().size(),0);
  trash.tick();
  Assert.assertFalse(future1.isDone());
  Assert.assertEquals(trash.getDeleteOperations().size(),0);
  trash.tick();
  Assert.assertEquals(trash.getDeleteOperations().size(),1);
  Assert.assertTrue(future1.get());
  Assert.assertNull(trash.getDeleteOperations().get(0).getUser());
  Assert.assertTrue(trash.getDeleteOperations().get(0).getPath().equals(path1));
}
