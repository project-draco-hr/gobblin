{
  if (threads.isEmpty()) {
    threads=Sets.newHashSet(1);
  }
  if (forkAtDepth.isEmpty()) {
    forkAtDepth=Sets.newHashSet(0);
  }
  if (depth.isEmpty()) {
    depth=Sets.newHashSet(0);
  }
  if (counters.isEmpty()) {
    counters=Sets.newHashSet(0);
  }
  if (meters.isEmpty()) {
    meters=Sets.newHashSet(0);
  }
  if (histograms.isEmpty()) {
    histograms=Sets.newHashSet(0);
  }
  if (timers.isEmpty()) {
    timers=Sets.newHashSet(0);
  }
  if (queries == 0) {
    queries=50000000l;
  }
  if (Strings.isNullOrEmpty(name)) {
    name="Test";
  }
  Set<List<Integer>> parameters=Sets.cartesianProduct(threads,depth,forkAtDepth,counters,meters,histograms,timers);
  Comparator<List<Integer>> comparator=new Comparator<List<Integer>>(){
    @Override public int compare(    List<Integer> o1,    List<Integer> o2){
      Iterator<Integer> it1=o1.iterator();
      Iterator<Integer> it2=o2.iterator();
      while (it1.hasNext() && it2.hasNext()) {
        int compare=Integer.compare(it1.next(),it2.next());
        if (compare != 0) {
          return compare;
        }
      }
      if (it1.hasNext()) {
        return 1;
      }
 else       if (it2.hasNext()) {
        return -1;
      }
 else {
        return 0;
      }
    }
  }
;
  TreeMap<List<Integer>,Double> results=Maps.newTreeMap(comparator);
  for (  List<Integer> p : parameters) {
    Preconditions.checkArgument(p.size() == 7,"Parameter list should be of size 7.");
    results.put(p,singleTest().threads(p.get(0)).depth(p.get(1)).forkAtDepth(p.get(2)).counters(p.get(3)).meters(p.get(4)).histograms(p.get(5)).timers(p.get(6)).queries(queries).run());
  }
  System.out.println("===========================");
  System.out.println(name);
  System.out.println("===========================");
  System.out.println("Threads\tDepth\tForkAtDepth\tCounters\tMeters\tHistograms\tTimers\tQPS");
  for (  Map.Entry<List<Integer>,Double> result : results.entrySet()) {
    List<Integer> p=result.getKey();
    System.out.println(String.format("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%f",p.get(0),p.get(1),p.get(2),p.get(3),p.get(4),p.get(5),p.get(6),result.getValue()));
  }
}
