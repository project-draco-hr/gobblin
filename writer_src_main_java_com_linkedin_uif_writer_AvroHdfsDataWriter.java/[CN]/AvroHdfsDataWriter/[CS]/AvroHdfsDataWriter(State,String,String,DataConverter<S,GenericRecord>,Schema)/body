{
  String uri=properties.getProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI);
  String stagingDir=properties.getProp(ConfigurationKeys.WRITER_STAGING_DIR,ConfigurationKeys.DEFAULT_STAGING_DIR) + Path.SEPARATOR + relFilePath;
  String outputDir=properties.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR,ConfigurationKeys.DEFAULT_OUTPUT_DIR) + Path.SEPARATOR + relFilePath;
  String codecType=properties.getProp(ConfigurationKeys.WRITER_CODEC_TYPE,AvroHdfsDataWriter.CodecType.DEFLATE.name());
  int bufferSize=Integer.parseInt(properties.getProp(ConfigurationKeys.WRITER_BUFFER_SIZE,ConfigurationKeys.DEFAULT_BUFFER_SIZE));
  int deflateLevel=Integer.parseInt(properties.getProp(ConfigurationKeys.WRITER_DEFLATE_LEVEL,ConfigurationKeys.DEFAULT_DEFLATE_LEVEL));
  Configuration conf=new Configuration();
  for (  String key : properties.getPropertyNames()) {
    conf.set(key,properties.getProp(key));
  }
  this.fs=FileSystem.get(URI.create(uri),conf);
  this.stagingFile=new Path(stagingDir,fileName);
  if (this.fs.exists(this.stagingFile)) {
    LOG.warn(String.format("Task staging file %s already exists, deleting it",this.stagingFile));
    this.fs.delete(this.stagingFile,false);
  }
  this.outputFile=new Path(outputDir,fileName);
  if (!this.fs.exists(this.outputFile.getParent())) {
    this.fs.mkdirs(this.outputFile.getParent());
  }
  this.dataConverter=dataConverter;
  this.writer=createDatumWriter(schema,this.stagingFile,bufferSize,CodecType.valueOf(codecType),deflateLevel);
}
