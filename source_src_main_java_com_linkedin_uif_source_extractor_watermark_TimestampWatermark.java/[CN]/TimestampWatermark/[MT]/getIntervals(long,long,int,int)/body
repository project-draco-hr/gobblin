{
  HashMap<Long,Long> intervalMap=new HashMap<Long,Long>();
  if (partitionInterval < 1) {
    partitionInterval=1;
  }
  final Calendar calendar=Calendar.getInstance();
  final SimpleDateFormat format=new SimpleDateFormat("yyyyMMddHHmmss");
  Date nextTime;
  final long lowWatermark=this.toEpoch(Long.toString(lowWatermarkValue));
  final long highWatermark=this.toEpoch(Long.toString(highWatermarkValue));
  int interval=this.getInterval(highWatermark - lowWatermark,partitionInterval,maxIntervals);
  LOG.info("Recalculated partition interval:" + interval + " hours");
  if (interval == 0) {
    return intervalMap;
  }
  Date startTime=new Date(lowWatermark);
  Date endTime=new Date(highWatermark);
  long lwm;
  long hwm;
  while (startTime.getTime() <= endTime.getTime()) {
    lwm=Long.parseLong(INPUTFORMAT.format(startTime));
    calendar.setTime(startTime);
    calendar.add(Calendar.HOUR,interval);
    nextTime=calendar.getTime();
    hwm=Long.parseLong(INPUTFORMAT.format(nextTime.getTime() <= endTime.getTime() ? nextTime : endTime));
    intervalMap.put(lwm,hwm);
    calendar.add(Calendar.SECOND,deltaForNextWatermark);
    startTime=calendar.getTime();
  }
  return intervalMap;
}
