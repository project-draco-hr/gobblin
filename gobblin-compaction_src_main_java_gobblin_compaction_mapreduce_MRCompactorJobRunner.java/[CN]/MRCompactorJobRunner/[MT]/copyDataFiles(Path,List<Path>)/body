{
  ExecutorService executor=ScalingThreadPoolExecutor.newScalingThreadPool(0,this.copyLateDataThreadPoolSize,100,ExecutorsUtils.newThreadFactory(Optional.of(LOG),Optional.of(this.dataset.getName() + "-copy-data")));
  List<Future<?>> futures=Lists.newArrayList();
  for (  final Path filePath : inputFilePaths) {
    Future<Void> future=executor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        Path convertedFilePath=MRCompactorJobRunner.this.outputRecordCountProvider.convertPath(MRCompactorJobRunner.this.lateInputRecordCountProvider.restoreFilePath(filePath),MRCompactorJobRunner.this.inputRecordCountProvider);
        String targetFileName=convertedFilePath.getName();
        Path outPath=MRCompactorJobRunner.this.lateOutputRecordCountProvider.constructLateFilePath(targetFileName,MRCompactorJobRunner.this.fs,outputDirectory);
        HadoopUtils.copyPath(MRCompactorJobRunner.this.fs,filePath,MRCompactorJobRunner.this.fs,outPath,MRCompactorJobRunner.this.fs.getConf());
        LOG.debug(String.format("Copied %s to %s.",filePath,outPath));
        return null;
      }
    }
);
    futures.add(future);
  }
  try {
    for (    Future<?> future : futures) {
      future.get();
    }
  }
 catch (  ExecutionException|InterruptedException e) {
    throw new IOException("Failed to copy file.",e);
  }
 finally {
    ExecutorsUtils.shutdownExecutorService(executor,Optional.of(LOG));
  }
}
