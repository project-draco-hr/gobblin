{
  Configuration conf=new Configuration();
  try (FileSystem fileSystem=jobConfigPathDir.getFileSystem(conf)){
    Preconditions.checkArgument(configPathParent.toUri().normalize().getPath().startsWith(jobConfigPathDir.toUri().normalize().getPath()),String.format("%s is not an ancestor directory of %s",jobConfigPathDir,configPathParent));
    while (!configPathParent.equals(PathUtils.addFilePrefixForComparison(jobConfigPathDir.getParent(),"file:")) && !configPathParent.equals(jobConfigPathDir.getParent())) {
      FileStatus[] propertiesFilesStatus=fileSystem.listStatus(configPathParent,PROPERTIES_PATH_FILTER);
      ArrayList<String> propertiesFilesList=new ArrayList<>();
      if (propertiesFilesStatus != null && propertiesFilesStatus.length > 0) {
        for (        FileStatus propertiesFileStatus : propertiesFilesStatus) {
          propertiesFilesList.add(propertiesFileStatus.getPath().getName());
        }
      }
      String[] propertiesFiles=propertiesFilesList.toArray(new String[propertiesFilesList.size()]);
      if (propertiesFiles != null && propertiesFiles.length > 0) {
        if (propertiesFiles.length != 1) {
          throw new RuntimeException("Found more than one .properties file in directory: " + configPathParent);
        }
        System.err.println("_uri:" + (new Path((new Path("file://",configPathParent)),propertiesFiles[0])).toUri().toString());
        commonPropsList.add(ConfigurationConverter.getProperties(new PropertiesConfiguration((new Path((new Path("file://",configPathParent)),propertiesFiles[0])).toUri().toURL())));
      }
      configPathParent=configPathParent.getParent();
    }
  }
 }
