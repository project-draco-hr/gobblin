{
  super(jobProps,metadataTags);
  this.helixManager=helixManager;
  this.helixTaskDriver=new TaskDriver(this.helixManager);
  this.appWorkDir=appWorkDir;
  this.inputWorkUnitDir=new Path(appWorkDir,GobblinClusterConfigurationKeys.INPUT_WORK_UNIT_DIR_NAME);
  this.outputTaskStateDir=new Path(this.appWorkDir,GobblinClusterConfigurationKeys.OUTPUT_TASK_STATE_DIR_NAME + Path.SEPARATOR + this.jobContext.getJobId());
  this.helixQueueName=this.jobContext.getJobName();
  this.jobResourceName=TaskUtil.getNamespacedJobName(this.helixQueueName,this.jobContext.getJobId());
  this.jobContext.getJobState().setJobLauncherType(LauncherTypeEnum.CLUSTER);
  this.stateSerDeRunnerThreads=Integer.parseInt(jobProps.getProperty(ParallelRunner.PARALLEL_RUNNER_THREADS_KEY,Integer.toString(ParallelRunner.DEFAULT_PARALLEL_RUNNER_THREADS)));
  URI fsUri=URI.create(jobProps.getProperty(ConfigurationKeys.FS_URI_KEY,ConfigurationKeys.LOCAL_FS_URI));
  this.fs=FileSystem.get(fsUri,new Configuration());
  this.taskStateCollectorService=new TaskStateCollectorService(jobProps,this.jobContext.getJobState(),this.eventBus,this.fs,outputTaskStateDir);
}
