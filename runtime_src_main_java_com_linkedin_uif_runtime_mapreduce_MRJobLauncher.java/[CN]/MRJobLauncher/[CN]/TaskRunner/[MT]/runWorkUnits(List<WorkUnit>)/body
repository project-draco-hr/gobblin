{
  boolean hasTaskFailure=false;
  for (  WorkUnit workUnit : workUnits) {
    String jobId=workUnit.getProp(ConfigurationKeys.JOB_ID_KEY);
    String taskId=workUnit.getProp(ConfigurationKeys.TASK_ID_KEY);
    if (this.taskStateStore.exists(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX)) {
      this.taskStateStore.delete(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX);
    }
    WorkUnitState workUnitState=new WorkUnitState(workUnit);
    workUnitState.setId(taskId);
    workUnitState.setProp(ConfigurationKeys.JOB_ID_KEY,jobId);
    workUnitState.setProp(ConfigurationKeys.TASK_ID_KEY,taskId);
    Task task=new Task(new TaskContext(workUnitState),this.taskStateTracker);
    this.taskStateTracker.registerNewTask(task);
    LOG.info(String.format("Submitting and waiting for task %s to complete...",taskId));
    try {
      this.taskExecutor.submit(task).get();
    }
 catch (    Exception e) {
      LOG.error("Failed to submit and execute task " + task.getTaskId(),e);
    }
    LOG.info("Writing task state for task " + taskId);
    this.taskStateStore.put(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX,task.getTaskState());
    if (task.getTaskState().getWorkingState() == WorkUnitState.WorkingState.FAILED) {
      LOG.error(String.format("Task %s of job %s failed",task.getTaskId(),task.getJobId()));
      hasTaskFailure=true;
    }
  }
  if (hasTaskFailure) {
    throw new IOException("Not all tasks completed successfully");
  }
}
