{
  List<Dataset> datasets=Lists.newArrayList();
  if (!fs.exists(this.topicInputDir)) {
    LOG.warn("Input folder " + this.topicInputDir + " does not exist. Skipping topic "+ topic);
    return datasets;
  }
  String folderStructure=getFolderStructure();
  for (  FileStatus status : this.fs.globStatus(new Path(this.topicInputDir,folderStructure))) {
    Path jobInputPath=status.getPath();
    DateTime folderTime=null;
    try {
      folderTime=getFolderTime(jobInputPath);
    }
 catch (    RuntimeException e) {
      LOG.warn(jobInputPath + " is not a valid folder. Will be skipped.");
      continue;
    }
    if (folderWithinAllowedPeriod(jobInputPath,folderTime)) {
      Path jobInputLatePath=appendFolderTime(this.topicInputLateDir,folderTime);
      Path jobOutputPath=appendFolderTime(this.topicOutputDir,folderTime);
      Path jobOutputLatePath=appendFolderTime(this.topicOutputLateDir,folderTime);
      Path jobOutputTmpPath=appendFolderTime(this.topicTmpOutputDir,folderTime);
      Dataset dataset=new Dataset.Builder().withTopic(this.topic).withPriority(this.priority).withInputPath(this.recompactFromOutputPaths ? jobOutputPath : jobInputPath).withInputLatePath(this.recompactFromOutputPaths ? jobOutputLatePath : jobInputLatePath).withOutputPath(jobOutputPath).withOutputLatePath(jobOutputLatePath).withOutputTmpPath(jobOutputTmpPath).build();
      Optional<Dataset> datasetWithJobProps=createJobProps(dataset,folderTime.toString(this.timeFormatter));
      if (datasetWithJobProps.isPresent()) {
        datasets.add(datasetWithJobProps.get());
        if (this.recompactFromOutputPaths || !MRCompactor.datasetAlreadyCompacted(this.fs,dataset)) {
          CompactionSlaEventHelper.setUpstreamTimeStamp(state,folderTime.plusDays(1).getMillis());
        }
      }
    }
  }
  return datasets;
}
