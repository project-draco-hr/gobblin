{
  ParallelRunner parallelRunner=this.getParallelRunner(this.fileSystemByBranches.get(branchId));
  Path writerOutputDir=WriterUtils.getWriterOutputDir(workUnitState,this.numBranches,branchId);
  if (writerOutputPathsMoved.contains(writerOutputDir)) {
    return;
  }
  if (!this.fileSystemByBranches.get(branchId).exists(writerOutputDir)) {
    LOG.warn(String.format("Branch %d of WorkUnit %s produced no data",branchId,workUnitState.getId()));
    return;
  }
  Path publisherOutputDir=getPublisherOutputDir(workUnitState,branchId);
  if (this.fileSystemByBranches.get(branchId).exists(publisherOutputDir)) {
    boolean replaceFinalOutputDir=this.getState().getPropAsBoolean(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.DATA_PUBLISHER_REPLACE_FINAL_DIR,this.numBranches,branchId));
    if (!replaceFinalOutputDir) {
      addWriterOutputToExistingDir(writerOutputDir,publisherOutputDir,workUnitState,branchId,parallelRunner);
      writerOutputPathsMoved.add(writerOutputDir);
      return;
    }
    this.fileSystemByBranches.get(branchId).delete(publisherOutputDir,true);
  }
 else {
    Path parentDir=publisherOutputDir.getParent();
    this.fileSystemByBranches.get(branchId).mkdirs(parentDir);
  }
  LOG.info(String.format("Moving %s to %s",writerOutputDir,publisherOutputDir));
  parallelRunner.renamePath(writerOutputDir,publisherOutputDir,this.publisherFinalDirOwnerGroupsByBranches.get(branchId));
  writerOutputPathsMoved.add(writerOutputDir);
}
