{
  Set<Path> writerOutputPathMoved=Sets.newHashSet();
  for (  WorkUnitState workUnitState : states) {
    int numBranches=workUnitState.getPropAsInt(ConfigurationKeys.FORK_BRANCHES_KEY,1);
    for (int branchId=0; branchId < numBranches; branchId++) {
      Path writerOutput=WriterUtils.getWriterOutputDir(workUnitState,numBranches,branchId);
      Path publisherOutput=WriterUtils.getDataPublisherFinalDir(workUnitState,numBranches,branchId);
      if (writerOutputPathMoved.contains(writerOutput)) {
        continue;
      }
      if (!this.fss.get(branchId).exists(publisherOutput.getParent())) {
        this.fss.get(branchId).mkdirs(publisherOutput.getParent());
      }
      if (this.fss.get(branchId).exists(publisherOutput)) {
        boolean replaceFinalOutputDir=this.getState().getPropAsBoolean(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.DATA_PUBLISHER_REPLACE_FINAL_DIR,numBranches,branchId));
        if (!replaceFinalOutputDir) {
          boolean preserveFileName=workUnitState.getPropAsBoolean(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.SOURCE_FILEBASED_PRESERVE_FILE_NAME,numBranches,branchId),false);
          for (          FileStatus status : this.fss.get(branchId).listStatus(writerOutput)) {
            Path outputPath=preserveFileName ? new Path(publisherOutput,workUnitState.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.DATA_PUBLISHER_FINAL_NAME,numBranches,branchId))) : new Path(publisherOutput,status.getPath().getName());
            if (this.fss.get(branchId).rename(status.getPath(),outputPath)) {
              LOG.info(String.format("Moved %s to %s",status.getPath(),outputPath));
            }
 else {
              throw new IOException("Failed to move from " + status.getPath() + " to "+ outputPath);
            }
          }
          writerOutputPathMoved.add(writerOutput);
          continue;
        }
        this.fss.get(branchId).delete(publisherOutput,true);
      }
      if (this.fss.get(branchId).exists(writerOutput)) {
        if (this.fss.get(branchId).rename(writerOutput,publisherOutput)) {
          LOG.info(String.format("Moved %s to %s",writerOutput,publisherOutput));
          writerOutputPathMoved.add(writerOutput);
        }
 else {
          throw new IOException("Failed to move from " + writerOutput + " to "+ publisherOutput);
        }
      }
    }
    workUnitState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
  }
}
