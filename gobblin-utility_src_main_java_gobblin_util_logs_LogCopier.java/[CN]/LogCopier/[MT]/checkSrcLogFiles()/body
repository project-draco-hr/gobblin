{
  List<FileStatus> srcLogFiles=FileListUtils.listFilesRecursively(this.srcFs,this.srcLogDir,new PathFilter(){
    @Override public boolean accept(    Path path){
      return logFileExtensions.contains(Files.getFileExtension(path.getName()));
    }
  }
);
  if (srcLogFiles.isEmpty()) {
    LOGGER.warn("No log file found under directory " + this.srcLogDir);
    return;
  }
  Set<Path> newLogFiles=Sets.newHashSet();
  for (  FileStatus srcLogFile : srcLogFiles) {
    newLogFiles.add(srcLogFile.getPath());
  }
  Set<Path> deletedLogFiles=Sets.newHashSet(this.logCopyTaskMap.keySet());
  deletedLogFiles.removeAll(newLogFiles);
  newLogFiles.removeAll(this.logCopyTaskMap.keySet());
  for (  final Path srcLogFile : newLogFiles) {
    String destLogFileName=this.logFileNamePrefix.isPresent() ? this.logFileNamePrefix.get() + "." + srcLogFile.getName() : srcLogFile.getName();
    final Path destLogFile=new Path(this.destLogDir,destLogFileName);
    ScheduledFuture<?> copyFuture=this.logCopyExecutor.scheduleAtFixedRate(new LogCopyTask(srcLogFile,destLogFile),0,this.copyInterval,this.timeUnit);
    this.logCopyTaskMap.put(srcLogFile,copyFuture);
  }
  for (  Path deletedLogFile : deletedLogFiles) {
    this.logCopyTaskMap.remove(deletedLogFile).cancel(true);
  }
}
