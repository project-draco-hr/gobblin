{
  Map<Long,Long> expected=new HashMap<Long,Long>();
  Map<Long,Long> actual=new HashMap<Long,Long>();
  expected=getIntervals(0,100,1);
  actual=simpleWatermark.getIntervals(0,100,Integer.MIN_VALUE,1000);
  Assert.assertEquals(actual,expected);
  expected=getIntervals(0,100,1);
  actual=simpleWatermark.getIntervals(0,100,Integer.MIN_VALUE,1000);
  Assert.assertEquals(actual,expected);
  expected=getIntervals(0,100,110);
  actual=simpleWatermark.getIntervals(0,100,110,1000);
  Assert.assertEquals(actual,expected);
  int partitionInterval=100 / 7 + 1;
  expected=getIntervals(0,100,partitionInterval);
  actual=simpleWatermark.getIntervals(0,100,3,7);
  Assert.assertEquals(actual,expected);
  expected=getIntervals(0,100,100);
  actual=simpleWatermark.getIntervals(0,100,1,1);
  Assert.assertEquals(actual,expected);
  expected.clear();
  actual=simpleWatermark.getIntervals(0,100,1,0);
  Assert.assertEquals(actual,expected);
  expected.clear();
  actual=simpleWatermark.getIntervals(0,100,1,0);
  Assert.assertEquals(actual,expected);
  expected=getIntervals(100,100,10);
  actual=simpleWatermark.getIntervals(100,100,10,10);
  Assert.assertEquals(actual,expected);
  expected.clear();
  actual=simpleWatermark.getIntervals(110,100,10,10);
  Assert.assertEquals(actual,expected);
  expected=getIntervals(Long.MAX_VALUE - 100,Long.MAX_VALUE,10);
  actual=simpleWatermark.getIntervals(Long.MAX_VALUE - 100,Long.MAX_VALUE,10,100);
  Assert.assertEquals(actual,expected);
  expected=getIntervals(Long.MIN_VALUE,Long.MIN_VALUE + 100,10);
  actual=simpleWatermark.getIntervals(Long.MIN_VALUE,Long.MIN_VALUE + 100,10,100);
  Assert.assertEquals(actual,expected);
}
