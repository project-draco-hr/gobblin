{
  String contextName=CONTEXT_NAME + "_" + UUID.randomUUID().toString();
  Reporter mockedReporter=Mockito.mock(Reporter.class);
  this.recordsProcessedCount=Mockito.mock(Counters.Counter.class);
  Mockito.when(mockedReporter.getCounter(contextName,MetricRegistry.name(RECORDS_PROCESSED,Measurements.COUNT.getName()))).thenReturn(this.recordsProcessedCount);
  this.recordProcessRateCount=Mockito.mock(Counters.Counter.class);
  Mockito.when(mockedReporter.getCounter(contextName,MetricRegistry.name(RECORD_PROCESS_RATE,Measurements.COUNT.getName()))).thenReturn(this.recordProcessRateCount);
  this.recordSizeDistributionCount=Mockito.mock(Counters.Counter.class);
  Mockito.when(mockedReporter.getCounter(contextName,MetricRegistry.name(RECORD_SIZE_DISTRIBUTION,Measurements.COUNT.getName()))).thenReturn(this.recordSizeDistributionCount);
  this.totalDurationCount=Mockito.mock(Counters.Counter.class);
  Mockito.when(mockedReporter.getCounter(contextName,MetricRegistry.name(TOTAL_DURATION,Measurements.COUNT.getName()))).thenReturn(this.totalDurationCount);
  this.queueSize=Mockito.mock(Counters.Counter.class);
  Mockito.when(mockedReporter.getCounter(contextName,QUEUE_SIZE)).thenReturn(this.queueSize);
  this.hadoopCounterReporter=HadoopCounterReporter.builder(mockedReporter).convertRatesTo(TimeUnit.SECONDS).convertDurationsTo(TimeUnit.SECONDS).filter(MetricFilter.ALL).build(MetricContext.builder(contextName).buildStrict());
}
