{
  long startTime=System.currentTimeMillis();
  this.taskState.setStartTime(startTime);
  this.taskStateTracker.registerNewTask(this);
  this.taskState.setWorkingState(WorkUnitState.WorkingState.RUNNING);
  Closer closer=Closer.create();
  try {
    Extractor extractor=closer.register(new ExtractorDecorator(new SourceDecorator(this.taskContext.getSource(),this.jobId,LOG).getExtractor(this.taskState),this.taskId,LOG));
    Object sourceSchema=extractor.getSchema();
    List<Converter> converterList=this.taskContext.getConverters();
    boolean doConversion=!converterList.isEmpty();
    Converter converter=null;
    Object schemaForWriter=sourceSchema;
    if (doConversion) {
      converter=new MultiConverter(converterList);
      schemaForWriter=converter.convertSchema(sourceSchema,this.taskState);
    }
    RowLevelPolicyChecker rowChecker=closer.register(buildRowLevelPolicyChecker(this.taskState));
    RowLevelPolicyCheckResults rowResults=new RowLevelPolicyCheckResults();
    buildWriter(this.taskContext,schemaForWriter);
    closer.register(this.writer);
    long pullLimit=this.taskState.getPropAsLong(ConfigurationKeys.EXTRACT_PULL_LIMIT,0);
    long recordsPulled=0;
    Object record=null;
    while ((record=extractor.readRecord(record)) != null) {
      Object convertedRecord=record;
      if (doConversion) {
        convertedRecord=converter.convertRecord(sourceSchema,record,this.taskState);
      }
      if (convertedRecord != null && rowChecker.executePolicies(convertedRecord,rowResults)) {
        this.writer.write(convertedRecord);
      }
      recordsPulled++;
      if (pullLimit > 0 && recordsPulled >= pullLimit) {
        break;
      }
    }
    LOG.info("Row quality checker finished with results: " + rowResults.getResults());
    this.writer.close();
    boolean shouldCommit=checkDataQuality(recordsPulled,extractor.getExpectedRecordCount(),pullLimit,schemaForWriter);
    if (shouldCommit) {
      commitData();
    }
  }
 catch (  Throwable t) {
    LOG.error(String.format("Task %s failed",this.taskId),t);
    this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
    this.taskState.setProp(ConfigurationKeys.TASK_FAILURE_EXCEPTION_KEY,t.toString());
  }
 finally {
    try {
      closer.close();
    }
 catch (    IOException ioe) {
      LOG.error("Failed to close all open resources",ioe);
    }
    try {
      this.writer.cleanup();
    }
 catch (    IOException ioe) {
      LOG.error("The writer failed to cleanup for task " + taskId,ioe);
    }
    long endTime=System.currentTimeMillis();
    this.taskState.setEndTime(endTime);
    this.taskState.setTaskDuration(endTime - startTime);
    this.taskStateTracker.onTaskCompletion(this);
  }
}
