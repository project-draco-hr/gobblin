{
  Map<String,Set<PreserveAttributes.Option>> tests=Maps.newHashMap();
  tests.put("r",Sets.newHashSet(Option.REPLICATION));
  tests.put("b",Sets.newHashSet(Option.BLOCK_SIZE));
  tests.put("u",Sets.newHashSet(Option.OWNER));
  tests.put("g",Sets.newHashSet(Option.GROUP));
  tests.put("p",Sets.newHashSet(Option.PERMISSION));
  tests.put("ru",Sets.newHashSet(Option.REPLICATION,Option.OWNER));
  tests.put("rbugp",Sets.newHashSet(Option.REPLICATION,Option.OWNER,Option.BLOCK_SIZE,Option.GROUP,Option.PERMISSION));
  tests.put("rrr",Sets.newHashSet(Option.REPLICATION));
  tests.put("rrb",Sets.newHashSet(Option.REPLICATION,Option.BLOCK_SIZE));
  tests.put("",Sets.<Option>newHashSet());
  for (  Map.Entry<String,Set<PreserveAttributes.Option>> entry : tests.entrySet()) {
    PreserveAttributes preserve=PreserveAttributes.fromMnemonicString(entry.getKey());
    for (    Option option : Option.values()) {
      Assert.assertEquals(preserve.preserve(option),entry.getValue().contains(option));
    }
    Assert.assertEquals(preserve,PreserveAttributes.fromMnemonicString(preserve.toMnemonicString()));
  }
}
