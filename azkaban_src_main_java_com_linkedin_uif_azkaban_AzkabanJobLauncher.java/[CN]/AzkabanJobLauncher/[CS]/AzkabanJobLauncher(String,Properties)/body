{
  super(jobId,LOG);
  this.properties=properties;
  final Configuration conf=new Configuration();
  String fsUri=conf.get("fs.default.name");
  if (!Strings.isNullOrEmpty(fsUri)) {
    if (!this.properties.containsKey(ConfigurationKeys.FS_URI_KEY)) {
      this.properties.setProperty(ConfigurationKeys.FS_URI_KEY,fsUri);
    }
    if (!this.properties.containsKey(ConfigurationKeys.WRITER_FILE_SYSTEM_URI)) {
      this.properties.setProperty(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,fsUri);
    }
    if (!this.properties.containsKey(ConfigurationKeys.STATE_STORE_FS_URI_KEY)) {
      this.properties.setProperty(ConfigurationKeys.STATE_STORE_FS_URI_KEY,fsUri);
    }
  }
  this.jobLauncher=JobLauncherFactory.newJobLauncher(this.properties);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      String jobLockFile=properties.getProperty(ConfigurationKeys.JOB_NAME_KEY) + MRJobLock.LOCK_FILE_EXTENSION;
      try {
        FileSystem fs=FileSystem.get(conf);
        Path jobLockPath=new Path(properties.getProperty(ConfigurationKeys.MR_JOB_LOCK_DIR_KEY),jobLockFile);
        if (fs.exists(jobLockPath)) {
          fs.delete(jobLockPath,false);
        }
      }
 catch (      IOException ioe) {
        LOG.error("Failed to delete job lock file " + jobLockFile);
      }
    }
  }
);
}
