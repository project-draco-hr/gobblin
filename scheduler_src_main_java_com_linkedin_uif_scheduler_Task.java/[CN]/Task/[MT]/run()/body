{
  boolean aborted=false;
  Extractor extractor=this.taskContext.getSource().getExtractor(this.taskState);
  Converter converter=new MultiConverter(this.taskContext.getConverters());
  Object schemaForWriter=converter.convertSchema(extractor.getSchema(),this.taskState.getWorkunit());
  DataWriter writer;
  try {
    writer=buildWriter(this.taskContext,schemaForWriter);
  }
 catch (  IOException ioe) {
    LOG.error("Failed to build the writer",ioe);
    this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
    return;
  }
 finally {
    extractor.close();
  }
  this.taskState.setWorkingState(WorkUnitState.WorkingState.WORKING);
  try {
    Object record;
    while ((record=extractor.readRecord()) != null) {
      Object convertedRecord=converter.convertRecord(schemaForWriter,record,this.taskState.getWorkunit());
      writer.write(convertedRecord);
    }
    this.taskState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
    this.taskManager.onTaskSuccess(this);
  }
 catch (  IOException ioe) {
    LOG.error(String.format("Task %s failed",this.toString()),ioe);
    this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
    try {
      this.taskManager.onTaskFailure(this);
    }
 catch (    IOException ioe1) {
      aborted=true;
    }
  }
 finally {
    try {
      extractor.close();
    }
 catch (    Exception ioe) {
    }
    try {
      writer.close();
    }
 catch (    IOException ioe) {
    }
    if (aborted) {
      this.taskState.setWorkingState(WorkUnitState.WorkingState.ABORTED);
      try {
        this.taskManager.onTaskAbortion(this);
      }
 catch (      IOException ioe) {
      }
    }
    this.statusReportingTimer.cancel();
  }
}
