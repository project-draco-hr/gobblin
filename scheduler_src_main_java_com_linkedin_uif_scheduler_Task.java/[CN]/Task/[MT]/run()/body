{
  Extractor extractor=null;
  DataWriter writer=null;
  Counter taskRecordCounter=Metrics.getCounter(Metrics.metricName("task",this.taskId,"records"));
  Counter jobRecordCounter=Metrics.getCounter(Metrics.metricName("job",this.jobId,"records"));
  Counter taskByteCounter=Metrics.getCounter(Metrics.metricName("task",this.taskId,"bytes"));
  Counter jobByteCounter=Metrics.getCounter(Metrics.metricName("job",this.jobId,"bytes"));
  Meter taskRecordMeter=Metrics.getMeter(Metrics.metricName("task",this.taskId,"recordsPerSec"));
  Meter jobRecordMeter=Metrics.getMeter(Metrics.metricName("job",this.jobId,"recordsPerSec"));
  Meter taskByteMeter=Metrics.getMeter(Metrics.metricName("task",this.taskId,"bytesPerSec"));
  Meter jobByteMeter=Metrics.getMeter(Metrics.metricName("job",this.jobId,"bytesPerSec"));
  long startTime=System.currentTimeMillis();
  this.taskState.setStartTime(startTime);
  boolean shouldCommit=false;
  try {
    extractor=this.taskContext.getSource().getExtractor(this.taskState);
    boolean doConversion=!this.taskContext.getConverters().isEmpty();
    Object sourceSchema=extractor.getSchema();
    Converter converter=null;
    Object schemaForWriter=sourceSchema;
    if (doConversion) {
      converter=new MultiConverter(this.taskContext.getConverters());
      schemaForWriter=converter.convertSchema(sourceSchema,this.taskState);
    }
    writer=buildWriter(this.taskContext,schemaForWriter);
    this.taskState.setWorkingState(WorkUnitState.WorkingState.WORKING);
    this.taskStateTracker.registerNewTask(this);
    Object record;
    while ((record=extractor.readRecord()) != null) {
      if (doConversion) {
        record=converter.convertRecord(sourceSchema,record,this.taskState);
      }
      writer.write(record);
    }
    taskRecordCounter.inc(writer.recordsWritten());
    taskRecordMeter.mark(writer.recordsWritten());
    jobRecordCounter.inc(writer.recordsWritten());
    jobRecordMeter.mark(writer.recordsWritten());
    this.taskState.setProp(ConfigurationKeys.EXTRACTOR_ROWS_READ,extractor.getExpectedRecordCount());
    this.taskState.setProp(ConfigurationKeys.WRITER_ROWS_WRITTEN,writer.recordsWritten());
    this.taskState.setProp(ConfigurationKeys.EXTRACT_SCHEMA,schemaForWriter.toString());
    PolicyChecker policyChecker=buildPolicyChecker(this.taskState);
    PolicyCheckResults results=policyChecker.executePolicies();
    TaskPublisher publisher=buildTaskPublisher(this.taskState,results);
switch (publisher.canPublish()) {
case SUCCESS:
      LOG.info("Committing data of task " + this.taskId);
    shouldCommit=true;
  this.taskState.setWorkingState(WorkUnitState.WorkingState.SUCCESSFUL);
break;
case CLEANUP_FAIL:
LOG.error("Cleanup failed for task " + this.taskId);
this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
break;
case POLICY_TESTS_FAIL:
LOG.error("Not all quality checking passed for task " + this.taskId);
this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
break;
case COMPONENTS_NOT_FINISHED:
LOG.error("Not all components completed for task " + this.taskId);
this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
break;
default :
this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
break;
}
}
 catch (Exception e) {
LOG.error(String.format("Task %s failed",this.taskId),e);
this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
}
 finally {
if (extractor != null) {
try {
extractor.close();
}
 catch (Exception ioe) {
}
}
if (writer != null) {
try {
writer.close();
if (shouldCommit) {
writer.commit();
this.taskState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
long bytes=writer.bytesWritten();
taskByteCounter.inc(bytes);
jobByteCounter.inc(bytes);
taskByteMeter.mark(bytes);
jobByteMeter.mark(bytes);
}
}
 catch (IOException ioe) {
}
 finally {
try {
writer.cleanup();
}
 catch (IOException ioe) {
}
}
}
long endTime=System.currentTimeMillis();
this.taskState.setEndTime(endTime);
this.taskState.setTaskDuration(endTime - startTime);
this.taskStateTracker.onTaskCompletion(this);
}
}
