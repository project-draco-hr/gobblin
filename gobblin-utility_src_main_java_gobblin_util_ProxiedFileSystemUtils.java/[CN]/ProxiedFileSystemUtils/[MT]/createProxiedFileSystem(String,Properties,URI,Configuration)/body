{
  Preconditions.checkArgument(properties.containsKey(AUTH_TYPE_KEY));
switch (AuthType.valueOf(properties.getProperty(AUTH_TYPE_KEY))) {
case TOKEN:
    Preconditions.checkArgument(properties.containsKey(AUTH_TOKEN_PATH));
  Path tokenPath=new Path(properties.getProperty(AUTH_TOKEN_PATH));
Optional<Token<?>> proxyToken=getTokenFromSeqFile(userNameToProxyAs,tokenPath);
if (proxyToken.isPresent()) {
try {
  return createProxiedFileSystemUsingToken(userNameToProxyAs,proxyToken.get(),fsURI,conf);
}
 catch (InterruptedException e) {
  throw new IOException("Failed to proxy as user " + userNameToProxyAs,e);
}
}
throw new IOException("No delegation token found for proxy user " + userNameToProxyAs);
case KEYTAB:
Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS) && properties.containsKey(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION));
String superUserName=properties.getProperty(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS);
Path keytabPath=new Path(properties.getProperty(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION));
try {
return createProxiedFileSystemUsingKeytab(userNameToProxyAs,superUserName,keytabPath,fsURI,conf);
}
 catch (InterruptedException e) {
throw new IOException("Failed to proxy as user " + userNameToProxyAs,e);
}
default :
throw new IOException("User proxy auth type " + properties.getProperty(AUTH_TYPE_KEY) + " not recognized.");
}
}
