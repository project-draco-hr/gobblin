{
  Preconditions.checkArgument(properties.containsKey(AUTH_TYPE_KEY) && properties.containsKey(AUTH_PATH));
  Path authPath=new Path(properties.getProperty(AUTH_PATH));
switch (AuthType.valueOf(properties.getProperty(AUTH_TYPE_KEY))) {
case TOKEN:
    Optional<Token<?>> proxyToken=getTokenFromSeqFile(userNameToProxyAs,authPath);
  if (proxyToken.isPresent()) {
    try {
      return createProxiedFileSystemUsingToken(userNameToProxyAs,proxyToken.get(),fsURI,conf);
    }
 catch (    InterruptedException e) {
      throw new IOException("Failed to proxy as user " + userNameToProxyAs,e);
    }
  }
 else {
    throw new IOException("No delegation token found for proxy user " + userNameToProxyAs);
  }
case KEYTAB:
Preconditions.checkArgument(properties.containsKey(SUPERUSER_NAME));
String superUserName=properties.getProperty(SUPERUSER_NAME);
try {
return createProxiedFileSystemUsingKeytab(userNameToProxyAs,superUserName,authPath,fsURI,conf);
}
 catch (InterruptedException e) {
throw new IOException("Failed to proxy as user " + userNameToProxyAs,e);
}
catch (URISyntaxException e) {
throw new IOException("Failed to proxy as user " + userNameToProxyAs,e);
}
default :
throw new IOException("User proxy auth type " + properties.getProperty(AUTH_TYPE_KEY) + " not recognized.");
}
}
