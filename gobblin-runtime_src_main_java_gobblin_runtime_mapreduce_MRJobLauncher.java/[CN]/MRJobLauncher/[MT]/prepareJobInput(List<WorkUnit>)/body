{
  Closer closer=Closer.create();
  try {
    ParallelRunner parallelRunner=closer.register(new ParallelRunner(this.parallelRunnerThreads,this.fs));
    int multiTaskIdSequence=0;
    for (    WorkUnit workUnit : workUnits) {
      String workUnitFileName;
      if (workUnit instanceof MultiWorkUnit) {
        workUnitFileName=JobLauncherUtils.newMultiTaskId(this.jobContext.getJobId(),multiTaskIdSequence++) + MULTI_WORK_UNIT_FILE_EXTENSION;
      }
 else {
        workUnitFileName=workUnit.getProp(ConfigurationKeys.TASK_ID_KEY) + WORK_UNIT_FILE_EXTENSION;
      }
      Path workUnitFile=new Path(this.jobInputPath,workUnitFileName);
      LOG.debug("Writing work unit file " + workUnitFileName);
      parallelRunner.serializeToFile(workUnit,workUnitFile);
    }
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    closer.close();
  }
}
