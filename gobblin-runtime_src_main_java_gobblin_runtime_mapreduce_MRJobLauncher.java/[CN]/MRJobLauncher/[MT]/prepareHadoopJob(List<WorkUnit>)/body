{
  TimingEvent mrJobSetupTimer=this.eventSubmitter.getTimingEvent(TimingEvent.RunJobTimings.MR_JOB_SETUP);
  this.job.setJarByClass(MRJobLauncher.class);
  this.job.setMapperClass(TaskRunner.class);
  this.job.setNumReduceTasks(0);
  this.job.setInputFormatClass(GobblinWorkUnitsInputFormat.class);
  this.job.setOutputFormatClass(GobblinOutputFormat.class);
  this.job.setMapOutputKeyClass(NullWritable.class);
  this.job.setMapOutputValueClass(NullWritable.class);
  this.job.setSpeculativeExecution(false);
  prepareJobInput(workUnits);
  FileInputFormat.addInputPath(this.job,this.jobInputPath);
  FileOutputFormat.setOutputPath(this.job,this.jobOutputPath);
  serializeJobState(this.fs,this.mrJobDir,this.conf,this.jobContext.getJobState(),this.job);
  if (this.jobProps.containsKey(ConfigurationKeys.MR_JOB_MAX_MAPPERS_KEY)) {
    int maxMappers=Integer.parseInt(this.jobProps.getProperty(ConfigurationKeys.MR_JOB_MAX_MAPPERS_KEY));
    if (workUnits.size() > maxMappers) {
      int numTasksPerMapper=workUnits.size() % maxMappers == 0 ? workUnits.size() / maxMappers : workUnits.size() / maxMappers + 1;
      NLineInputFormat.setNumLinesPerSplit(this.job,numTasksPerMapper);
    }
  }
  mrJobSetupTimer.stop();
}
