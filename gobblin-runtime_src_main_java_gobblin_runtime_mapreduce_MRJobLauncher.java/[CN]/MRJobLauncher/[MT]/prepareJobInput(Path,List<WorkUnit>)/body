{
  Path jobInputFile=new Path(jobInputPath,this.jobContext.getJobId() + ".wulist");
  Closer closer=Closer.create();
  try {
    ParallelRunner parallelRunner=closer.register(new ParallelRunner(this.parallelRunnerThreads,this.fs));
    OutputStream os=closer.register(this.fs.create(jobInputFile));
    Writer osw=closer.register(new OutputStreamWriter(os,ConfigurationKeys.DEFAULT_CHARSET_ENCODING));
    Writer bw=closer.register(new BufferedWriter(osw));
    int multiTaskIdSequence=0;
    for (    WorkUnit workUnit : workUnits) {
      Path workUnitFileExt;
      if (workUnit instanceof MultiWorkUnit) {
        workUnitFileExt=new Path(JobLauncherUtils.newMultiTaskId(this.jobContext.getJobId(),multiTaskIdSequence++) + MULTI_WORK_UNIT_FILE_EXTENSION);
      }
 else {
        workUnitFileExt=new Path(workUnit.getProp(ConfigurationKeys.TASK_ID_KEY) + WORK_UNIT_FILE_EXTENSION);
      }
      Path workUnitFile=new Path(jobInputPath,workUnitFileExt);
      parallelRunner.serializeToFile(workUnit,workUnitFile);
      bw.write(workUnitFile.toUri().getPath() + "\n");
    }
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    closer.close();
  }
  return jobInputFile;
}
