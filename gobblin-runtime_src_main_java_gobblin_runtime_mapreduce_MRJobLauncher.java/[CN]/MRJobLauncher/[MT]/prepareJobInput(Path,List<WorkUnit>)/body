{
  Closer closer=Closer.create();
  try {
    Path jobInputFile=new Path(jobInputPath,this.jobContext.getJobId() + ".wulist");
    OutputStream os=closer.register(this.fs.create(jobInputFile));
    Writer osw=closer.register(new OutputStreamWriter(os,ConfigurationKeys.DEFAULT_CHARSET_ENCODING));
    Writer bw=closer.register(new BufferedWriter(osw));
    ParallelStateSerDeRunner stateSerDeRunner=closer.register(new ParallelStateSerDeRunner(this.stateSerDeRunnerThreads,this.fs));
    int multiTaskIdSequence=0;
    for (    WorkUnit workUnit : workUnits) {
      if (workUnit instanceof MultiWorkUnit) {
        String multiTaskId=JobLauncherUtils.newMultiTaskId(jobContext.getJobId(),multiTaskIdSequence++);
        workUnit.setProp(ConfigurationKeys.TASK_ID_KEY,multiTaskId);
        workUnit.setId(multiTaskId);
      }
      Path workUnitFile=new Path(jobInputPath,workUnit.getProp(ConfigurationKeys.TASK_ID_KEY) + ((workUnit instanceof MultiWorkUnit) ? MULTI_WORK_UNIT_FILE_EXTENSION : WORK_UNIT_FILE_EXTENSION));
      stateSerDeRunner.serializeToFile(workUnit,workUnitFile);
      bw.write(workUnitFile.toUri().getPath() + "\n");
    }
    stateSerDeRunner.awaitDone();
    return jobInputFile;
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    closer.close();
  }
}
