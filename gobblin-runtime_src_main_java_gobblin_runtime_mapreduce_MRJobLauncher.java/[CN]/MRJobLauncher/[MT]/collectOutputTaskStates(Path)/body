{
  FileStatus[] fileStatuses=this.fs.listStatus(taskStatePath,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().endsWith(TASK_STATE_STORE_TABLE_SUFFIX);
    }
  }
);
  if (fileStatuses == null || fileStatuses.length == 0) {
    return Lists.newArrayList();
  }
  Queue<TaskState> taskStateQueue=Queues.newConcurrentLinkedQueue();
  Closer closer=Closer.create();
  try {
    ParallelRunner parallelRunner=closer.register(new ParallelRunner(this.parallelRunnerThreads,this.fs));
    for (    FileStatus status : fileStatuses) {
      parallelRunner.deserializeFromSequenceFile(Text.class,TaskState.class,status.getPath(),taskStateQueue);
    }
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    closer.close();
  }
  LOG.info(String.format("Collected task state of %d completed tasks",taskStateQueue.size()));
  return Lists.newArrayList(taskStateQueue);
}
