{
  String jobName=this.jobContext.getJobName();
  JobState jobState=this.jobContext.getJobState();
  try {
    prepareHadoopJob(workUnits);
    this.taskStateCollectorService.startAsync().awaitRunning();
    LOG.info("Launching Hadoop MR job " + this.job.getJobName());
    this.job.submit();
    this.hadoopJobSubmitted=true;
    if (!jobState.contains(ConfigurationKeys.JOB_TRACKING_URL_KEY)) {
      jobState.setProp(ConfigurationKeys.JOB_TRACKING_URL_KEY,this.job.getTrackingURL());
    }
    TimingEvent mrJobRunTimer=this.eventSubmitter.getTimingEvent(TimingEventNames.RunJobTimings.MR_JOB_RUN);
    LOG.info(String.format("Waiting for Hadoop MR job %s to complete",this.job.getJobID()));
    this.job.waitForCompletion(true);
    mrJobRunTimer.stop(ImmutableMap.of("hadoopMRJobId",this.job.getJobID().toString()));
    if (this.cancellationRequested) {
synchronized (this.cancellationExecution) {
        if (this.cancellationExecuted) {
          return;
        }
      }
    }
    countersToMetrics(JobMetrics.get(jobName,this.jobProps.getProperty(ConfigurationKeys.JOB_ID_KEY)));
  }
  finally {
    this.taskStateCollectorService.stopAsync().awaitTerminated();
    cleanUpWorkingDirectory();
  }
}
