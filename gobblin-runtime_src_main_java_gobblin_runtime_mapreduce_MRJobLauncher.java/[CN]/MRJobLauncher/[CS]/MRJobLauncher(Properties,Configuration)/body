{
  super(jobProps,ImmutableList.<Tag<?>>of());
  this.conf=conf;
  JobConfigurationUtils.putPropertiesIntoConfiguration(this.jobProps,this.conf);
  this.conf.set("mapreduce.map.failures.maxpercent","100");
  this.conf.setBoolean("mapreduce.job.complete.cancel.delegation.tokens",false);
  this.fs=buildFileSystem(jobProps,this.conf);
  this.mrJobDir=new Path(new Path(this.jobProps.getProperty(ConfigurationKeys.MR_JOB_ROOT_DIR_KEY),this.jobContext.getJobName()),this.jobContext.getJobId());
  if (this.fs.exists(this.mrJobDir)) {
    LOG.warn("Job working directory already exists for job " + this.jobContext.getJobName());
    this.fs.delete(this.mrJobDir,true);
  }
  this.fs.mkdirs(this.mrJobDir);
  this.jobInputPath=new Path(this.mrJobDir,INPUT_DIR_NAME);
  this.jobOutputPath=new Path(this.mrJobDir,OUTPUT_DIR_NAME);
  Path outputTaskStateDir=new Path(this.jobOutputPath,this.jobContext.getJobId());
  addDependencies();
  this.job=Job.getInstance(this.conf,JOB_NAME_PREFIX + this.jobContext.getJobName());
  this.parallelRunnerThreads=Integer.parseInt(jobProps.getProperty(ParallelRunner.PARALLEL_RUNNER_THREADS_KEY,Integer.toString(ParallelRunner.DEFAULT_PARALLEL_RUNNER_THREADS)));
  this.taskStateCollectorService=new TaskStateCollectorService(jobProps,this.jobContext.getJobState(),this.eventBus,this.fs,outputTaskStateDir);
  startCancellationExecutor();
}
