{
  if (workUnits.isEmpty()) {
    LOG.warn("No work units to run in mapper " + context.getTaskAttemptID());
    return;
  }
  String jobId=workUnits.get(0).getProp(ConfigurationKeys.JOB_ID_KEY);
  for (  WorkUnit workUnit : workUnits) {
    if (this.jobMetrics.isPresent()) {
      workUnit.setProp(Instrumented.METRIC_CONTEXT_NAME_KEY,this.jobMetrics.get().getName());
    }
    String taskId=workUnit.getProp(ConfigurationKeys.TASK_ID_KEY);
    if (this.taskStateStore.exists(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX)) {
      this.taskStateStore.delete(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX);
    }
  }
  CountDownLatch countDownLatch=new CountDownLatch(workUnits.size());
  List<Task> tasks=AbstractJobLauncher.submitWorkUnits(jobId,workUnits,this.taskStateTracker,this.taskExecutor,countDownLatch);
  LOG.info(String.format("Waiting for submitted tasks of job %s to complete in mapper %s...",jobId,context.getTaskAttemptID()));
  while (countDownLatch.getCount() > 0) {
    LOG.info(String.format("%d out of %d tasks of job %s are running in mapper %s",countDownLatch.getCount(),workUnits.size(),jobId,context.getTaskAttemptID()));
    if (countDownLatch.await(10,TimeUnit.SECONDS)) {
      break;
    }
  }
  LOG.info(String.format("All tasks of job %s have completed in mapper %s",jobId,context.getTaskAttemptID()));
  boolean hasTaskFailure=false;
  for (  Task task : tasks) {
    LOG.info("Writing task state for task " + task.getTaskId());
    this.taskStateStore.put(task.getJobId(),task.getTaskId() + TASK_STATE_STORE_TABLE_SUFFIX,task.getTaskState());
    if (task.getTaskState().getWorkingState() == WorkUnitState.WorkingState.FAILED) {
      hasTaskFailure=true;
    }
  }
  if (hasTaskFailure) {
    throw new IOException(String.format("Not all tasks running in mapper %s completed successfully",context.getTaskAttemptID()));
  }
}
