{
  if (workUnits.isEmpty()) {
    LOG.warn("No work units to run");
    return;
  }
  String jobId=workUnits.get(0).getProp(ConfigurationKeys.JOB_ID_KEY);
  for (  WorkUnit workUnit : workUnits) {
    String taskId=workUnit.getProp(ConfigurationKeys.TASK_ID_KEY);
    if (this.taskStateStore.exists(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX)) {
      this.taskStateStore.delete(jobId,taskId + TASK_STATE_STORE_TABLE_SUFFIX);
    }
  }
  JobMetrics jobMetrics=JobMetrics.get(null,jobId);
  MetricContext.registerContext(jobMetrics.getMetricContext());
  List<Task> tasks=AbstractJobLauncher.runWorkUnits(jobId,workUnits,this.taskStateTracker,this.taskExecutor,new CountDownLatch(workUnits.size()));
  boolean hasTaskFailure=false;
  for (  Task task : tasks) {
    LOG.info("Writing task state for task " + task.getTaskId());
    this.taskStateStore.put(task.getJobId(),task.getTaskId() + TASK_STATE_STORE_TABLE_SUFFIX,task.getTaskState());
    if (task.getTaskState().getWorkingState() == WorkUnitState.WorkingState.FAILED) {
      hasTaskFailure=true;
    }
  }
  if (hasTaskFailure) {
    throw new IOException("Not all tasks completed successfully");
  }
}
