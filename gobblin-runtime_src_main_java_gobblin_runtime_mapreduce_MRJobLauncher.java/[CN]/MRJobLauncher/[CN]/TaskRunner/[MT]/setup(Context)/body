{
  try (Closer closer=Closer.create()){
    this.fs=FileSystem.get(context.getConfiguration());
    this.taskStateStore=new FsStateStore<>(this.fs,FileOutputFormat.getOutputPath(context).toUri().getPath(),TaskState.class);
    String jobStateFileName=context.getConfiguration().get(ConfigurationKeys.JOB_STATE_DISTRIBUTED_CACHE_NAME);
    boolean foundStateFile=false;
    for (    Path dcPath : DistributedCache.getLocalCacheFiles(context.getConfiguration())) {
      if (dcPath.getName().equals(jobStateFileName)) {
        SerializationUtils.deserializeStateFromInputStream(closer.register(new FileInputStream(dcPath.toUri().getPath())),this.jobState);
        foundStateFile=true;
        break;
      }
    }
    if (!foundStateFile) {
      throw new IOException("Job state file not found.");
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Failed to setup the mapper task",ioe);
  }
  this.taskExecutor=new TaskExecutor(context.getConfiguration());
  this.taskStateTracker=new MRTaskStateTracker(context);
  this.serviceManager=new ServiceManager(Lists.newArrayList(this.taskExecutor,this.taskStateTracker));
  try {
    this.serviceManager.startAsync().awaitHealthy(5,TimeUnit.SECONDS);
  }
 catch (  TimeoutException te) {
    LOG.error("Timed out while waiting for the service manager to start up",te);
    throw new RuntimeException(te);
  }
  Configuration configuration=context.getConfiguration();
  if (Boolean.valueOf(configuration.get(ConfigurationKeys.METRICS_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_ENABLED))) {
    this.jobMetrics=Optional.of(JobMetrics.get(this.jobState));
    this.jobMetrics.get().startMetricReportingWithFileSuffix(HadoopUtils.getStateFromConf(configuration),context.getTaskAttemptID().getTaskID().toString());
  }
}
