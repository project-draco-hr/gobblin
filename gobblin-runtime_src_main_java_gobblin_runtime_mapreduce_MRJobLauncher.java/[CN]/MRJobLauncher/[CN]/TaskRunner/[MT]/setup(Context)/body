{
  try {
    this.fs=FileSystem.get(context.getConfiguration());
    this.taskStateStore=new FsStateStore<TaskState>(this.fs,SequenceFileOutputFormat.getOutputPath(context).toUri().getPath(),TaskState.class);
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Failed to setup the mapper task",ioe);
  }
  this.taskExecutor=new TaskExecutor(context.getConfiguration());
  this.taskStateTracker=new MRTaskStateTracker(context);
  this.serviceManager=new ServiceManager(Lists.newArrayList(this.taskExecutor,this.taskStateTracker));
  try {
    this.serviceManager.startAsync().awaitHealthy(5,TimeUnit.SECONDS);
  }
 catch (  TimeoutException te) {
    LOG.error("Timed out while waiting for the service manager to start up",te);
    throw new RuntimeException(te);
  }
  Configuration configuration=context.getConfiguration();
  if (Boolean.valueOf(configuration.get(ConfigurationKeys.METRICS_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_ENABLED))) {
    this.jobMetrics=Optional.of(JobMetrics.get(null,configuration.get(ConfigurationKeys.JOB_ID_KEY)));
    String metricFileSuffix=configuration.get(ConfigurationKeys.METRICS_FILE_SUFFIX,ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);
    if (Strings.isNullOrEmpty(metricFileSuffix)) {
      metricFileSuffix=context.getTaskAttemptID().getTaskID().toString();
    }
 else {
      metricFileSuffix+="." + context.getTaskAttemptID().getTaskID().toString();
    }
    configuration.set(ConfigurationKeys.METRICS_FILE_SUFFIX,metricFileSuffix);
    this.jobMetrics.get().startMetricReporting(configuration);
  }
}
