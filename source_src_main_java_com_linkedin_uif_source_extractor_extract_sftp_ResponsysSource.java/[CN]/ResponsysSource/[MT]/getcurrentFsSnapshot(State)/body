{
  this.sftp=(ChannelSftp)SftpHelper.connect(state.getProp(ConfigurationKeys.SOURCE_CONN_PRIVATE_KEY),state.getProp(ConfigurationKeys.SOURCE_CONN_KNOWN_HOSTS),state.getProp(ConfigurationKeys.SOURCE_CONN_USERNAME),state.getProp(ConfigurationKeys.SOURCE_CONN_HOST_NAME),state.getPropAsInt(ConfigurationKeys.SOURCE_CONN_PORT,ConfigurationKeys.SOURCE_CONN_DEFAULT_PORT),state.getProp(ConfigurationKeys.SOURCE_CONN_USE_PROXY_URL),state.getPropAsInt(ConfigurationKeys.SOURCE_CONN_USE_PROXY_PORT,-1));
  List<Command> cmds=Lists.newArrayList();
  List<String> list=Arrays.asList(state.getProp(ConfigurationKeys.SOURCE_FILEBASED_DATA_DIRECTORY) + "/*" + state.getProp(ConfigurationKeys.SOURCE_ENTITY)+ "*");
  cmds.add(new SftpCommand().build(list,SftpCommandType.LS));
  CommandOutput<SftpCommand,List<String>> response=new SftpCommandOutput();
  try {
    response=SftpHelper.executeUnixCommands(cmds,this.sftp);
  }
 catch (  SftpException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
catch (  SftpCommandFormatException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  Map<SftpCommand,List<String>> results=response.getResults();
  for (  Map.Entry<SftpCommand,List<String>> entry : results.entrySet()) {
    if (entry.getKey().getCommandType().equals(SftpCommandType.LS)) {
      List<String> fsSnapshot=entry.getValue();
      for (int i=0; i < fsSnapshot.size(); i++) {
        fsSnapshot.set(i,state.getProp(ConfigurationKeys.SOURCE_FILEBASED_DATA_DIRECTORY) + "/" + fsSnapshot.get(i));
      }
      return fsSnapshot;
    }
  }
  return null;
}
