{
  initLogger(state);
  this.sourceState=state;
  this.sftp=(ChannelSftp)SftpExecutor.connect(state.getProp(ConfigurationKeys.SOURCE_CONN_PRIVATE_KEY),state.getProp(ConfigurationKeys.SOURCE_CONN_KNOWN_HOSTS),state.getProp(ConfigurationKeys.SOURCE_CONN_USERNAME),state.getProp(ConfigurationKeys.SOURCE_CONN_HOST_NAME),state.getProp(ConfigurationKeys.SOURCE_CONN_USE_PROXY_URL),state.getPropAsInt(ConfigurationKeys.SOURCE_CONN_USE_PROXY_PORT,-1));
  log.info("Get work units");
  List<WorkUnit> workUnits=Lists.newArrayList();
  String nameSpaceName=state.getProp(ConfigurationKeys.EXTRACT_NAMESPACE_NAME_KEY);
  String entityName=state.getProp(ConfigurationKeys.SOURCE_ENTITY);
  String extractTableName=state.getProp(ConfigurationKeys.EXTRACT_TABLE_NAME_KEY);
  if (Strings.isNullOrEmpty(extractTableName)) {
    extractTableName=entityName;
  }
  TableType tableType=TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());
  List<WorkUnitState> previousWorkunits=state.getPreviousStates();
  List<String> prevFsSnapshot=Lists.newArrayList();
  if (!previousWorkunits.isEmpty() && previousWorkunits.get(0).getWorkunit().contains(RESPONSYS_FS_SNAPSHOT)) {
    prevFsSnapshot=previousWorkunits.get(0).getWorkunit().getPropAsList(RESPONSYS_FS_SNAPSHOT);
  }
  List<String> currentFsSnapshot=this.getcurrentFsSnapshot();
  List<String> filesToPull=Lists.newArrayList(currentFsSnapshot);
  filesToPull.removeAll(prevFsSnapshot);
  log.info("Will pull the following files in this run: " + Arrays.toString(filesToPull.toArray()));
  int numPartitions=state.contains((ConfigurationKeys.SOURCE_MAX_NUMBER_OF_PARTITIONS)) && state.getPropAsInt(ConfigurationKeys.SOURCE_MAX_NUMBER_OF_PARTITIONS) <= filesToPull.size() ? state.getPropAsInt(ConfigurationKeys.SOURCE_MAX_NUMBER_OF_PARTITIONS) : filesToPull.size();
  int filesPerPartition=(numPartitions == 0) ? 0 : (int)Math.ceil(filesToPull.size() / numPartitions);
  int workUnitCount=0;
  int fileOffset=0;
  for (int i=0; i < numPartitions; i++) {
    SourceState partitionState=new SourceState();
    partitionState.addAll(state);
    partitionState.setProp(RESPONSYS_FS_SNAPSHOT,StringUtils.join(currentFsSnapshot,","));
    partitionState.setProp(RESPONSYS_FILES_TO_PULL,StringUtils.join(filesToPull.subList(fileOffset,fileOffset + filesPerPartition > filesToPull.size() ? filesToPull.size() : fileOffset + filesPerPartition),","));
    partitionState.setProp(ConfigurationKeys.WORK_UNIT_LOW_WATER_MARK_KEY,-1);
    partitionState.setProp(ConfigurationKeys.WORK_UNIT_HIGH_WATER_MARK_KEY,-1);
    Extract extract=partitionState.createExtract(tableType,nameSpaceName,extractTableName);
    workUnits.add(partitionState.createWorkUnit(extract));
    workUnitCount++;
    fileOffset+=filesPerPartition;
  }
  log.info("Total number of work units for the current run: " + workUnitCount);
  List<WorkUnit> previousWorkUnits=this.getPreviousWorkUnitsForRetry(state);
  log.info("Total number of work units from the previous failed runs: " + previousWorkUnits.size());
  workUnits.addAll(previousWorkUnits);
  return workUnits;
}
