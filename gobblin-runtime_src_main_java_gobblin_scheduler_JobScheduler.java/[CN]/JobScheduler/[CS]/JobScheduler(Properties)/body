{
  this.properties=properties;
  this.scheduler=new StdSchedulerFactory().getScheduler();
  this.jobExecutor=Executors.newFixedThreadPool(Integer.parseInt(properties.getProperty(ConfigurationKeys.JOB_EXECUTOR_THREAD_POOL_SIZE_KEY,Integer.toString(ConfigurationKeys.DEFAULT_JOB_EXECUTOR_THREAD_POOL_SIZE))),ExecutorsUtils.newThreadFactory(Optional.of(LOG),Optional.of("JobScheduler-%d")));
  this.jobConfigFileExtensions=Sets.newHashSet(Splitter.on(",").omitEmptyStrings().split(this.properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_EXTENSIONS_KEY,ConfigurationKeys.DEFAULT_JOB_CONFIG_FILE_EXTENSIONS)));
  long pollingInterval=Long.parseLong(this.properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_MONITOR_POLLING_INTERVAL_KEY,Long.toString(ConfigurationKeys.DEFAULT_JOB_CONFIG_FILE_MONITOR_POLLING_INTERVAL)));
  this.pathAlterationDetector=new PathAlterationDetector(pollingInterval);
  this.waitForJobCompletion=Boolean.parseBoolean(this.properties.getProperty(ConfigurationKeys.SCHEDULER_WAIT_FOR_JOB_COMPLETION_KEY,ConfigurationKeys.DEFAULT_SCHEDULER_WAIT_FOR_JOB_COMPLETION));
}
