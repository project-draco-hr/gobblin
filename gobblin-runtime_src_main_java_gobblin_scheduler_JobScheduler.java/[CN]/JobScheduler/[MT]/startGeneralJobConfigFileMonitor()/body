{
  final Path jobConfigFileDirPath=new Path(this.properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY));
  PathAlterationListener listener=new PathAlterationListenerAdaptor(){
    @Override public void onFileCreate(    Path path){
      String fileExntensionFromPath=path.getName().substring(path.getName().lastIndexOf('.') + 1);
      if (!JobScheduler.this.jobConfigFileExtensions.contains(fileExntensionFromPath)) {
        return;
      }
      try {
        LOG.info("Detected new job configuration file " + path.toString());
        Properties jobProps=SchedulerUtils.loadGenericJobConfig(JobScheduler.this.properties,path,jobConfigFileDirPath);
        boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
        scheduleJob(jobProps,runOnce ? new RunOnceJobListener() : new EmailNotificationJobListener());
      }
 catch (      ConfigurationException|IOException e) {
        LOG.error("Failed to load from job configuration file " + path.toString(),e);
      }
catch (      JobException je) {
        LOG.error("Failed to schedule new job loaded from job configuration file " + path.toString(),je);
      }
    }
    /** 
 * Called when a job configuration file is changed.
 */
    @Override public void onFileChange(    Path path){
      String fileExtension=path.getName().substring(path.getName().lastIndexOf('.') + 1);
      if (fileExtension.equalsIgnoreCase(SchedulerUtils.JOB_PROPS_FILE_EXTENSION)) {
        LOG.info("Detected change to common properties file " + path.toString());
        try {
          for (          Properties jobProps : SchedulerUtils.loadGenericJobConfigs(JobScheduler.this.properties,path,jobConfigFileDirPath)) {
            try {
              rescheduleJob(jobProps);
            }
 catch (            JobException je) {
              LOG.error("Failed to reschedule job reloaded from job configuration file " + jobProps.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY),je);
            }
          }
        }
 catch (        ConfigurationException|IOException e) {
          LOG.error("Failed to reload job configuration files affected by changes to " + path.toString(),e);
        }
        return;
      }
      if (!JobScheduler.this.jobConfigFileExtensions.contains(fileExtension)) {
        return;
      }
      try {
        LOG.info("Detected change to job configuration file " + path.toString());
        Properties jobProps=SchedulerUtils.loadGenericJobConfig(JobScheduler.this.properties,path,jobConfigFileDirPath);
        rescheduleJob(jobProps);
      }
 catch (      ConfigurationException|IOException e) {
        LOG.error("Failed to reload from job configuration file " + path.toString(),e);
      }
catch (      JobException je) {
        LOG.error("Failed to reschedule job reloaded from job configuration file " + toString(),je);
      }
    }
    private void rescheduleJob(    Properties jobProps) throws JobException {
      String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
      unscheduleJob(jobName);
      boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
      scheduleJob(jobProps,runOnce ? new RunOnceJobListener() : new EmailNotificationJobListener());
    }
  }
;
  SchedulerUtils.addPathAlterationObserver(this.pathAlterationMonitor,listener,jobConfigFileDirPath);
  this.pathAlterationMonitor.start();
}
