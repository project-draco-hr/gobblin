{
  Preconditions.checkArgument(jobProps.containsKey(ConfigurationKeys.JOB_NAME_KEY),"A job must have a job name specified by job.name");
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  boolean disabled=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_DISABLED_KEY,"false"));
  if (disabled) {
    LOG.info("Skipping disabled job " + jobName);
    return;
  }
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,JobLauncherUtils.newJobId(jobName));
  try (Closer closer=Closer.create()){
    closer.register(jobLauncher).launchJob(jobListener);
    boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
    if (runOnce && this.scheduledJobs.containsKey(jobName)) {
      this.scheduler.deleteJob(this.scheduledJobs.remove(jobName));
    }
  }
 catch (  Throwable t) {
    throw new JobException("Failed to launch and run job " + jobName,t);
  }
}
