{
  Preconditions.checkArgument(jobProps.containsKey(ConfigurationKeys.JOB_NAME_KEY),"A job must have a job name specified by job.name");
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  if (this.scheduledJobs.containsKey(jobName)) {
    LOG.warn("Job " + jobName + " has already been scheduled");
    return;
  }
  boolean disabled=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_DISABLED_KEY,"false"));
  if (disabled) {
    LOG.info("Skipping disabled job " + jobName);
    return;
  }
  if (!jobProps.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {
    jobProps.setProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"true");
    this.jobExecutor.execute(new NonScheduledJobRunner(jobProps,jobListener));
    return;
  }
  if (jobListener != null) {
    this.jobListenerMap.put(jobName,jobListener);
  }
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(JOB_SCHEDULER_KEY,this);
  jobDataMap.put(PROPERTIES_KEY,jobProps);
  jobDataMap.put(JOB_LISTENER_KEY,jobListener);
  jobDataMap.putAll(additionalJobData);
  JobDetail job=JobBuilder.newJob(jobClass).withIdentity(jobName,Strings.nullToEmpty(jobProps.getProperty(ConfigurationKeys.JOB_GROUP_KEY))).withDescription(Strings.nullToEmpty(jobProps.getProperty(ConfigurationKeys.JOB_DESCRIPTION_KEY))).usingJobData(jobDataMap).build();
  try {
    this.scheduler.getScheduler().scheduleJob(job,getTrigger(job.getKey(),jobProps));
  }
 catch (  SchedulerException se) {
    LOG.error("Failed to schedule job " + jobName,se);
    throw new JobException("Failed to schedule job " + jobName,se);
  }
  this.scheduledJobs.put(jobName,job.getKey());
}
