{
  if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_ENABLED))) {
    LOGGER.info("Not reporting metrics to Kafka");
    return;
  }
  String brokers=properties.getProperty(ConfigurationKeys.METRICS_KAFKA_BROKERS);
  String topic=properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC);
  if (Strings.isNullOrEmpty(brokers)) {
    LOGGER.error("Kafka metrics brokers property is empty or not supplied. Will not report metrics to Kafka.");
    return;
  }
  if (Strings.isNullOrEmpty(topic)) {
    LOGGER.error("Kafka metrics topic property is empty or not supplied. Will not report metrics to Kafka.");
    return;
  }
  String reportingFormat=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_FORMAT,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_FORMAT);
  if (!reportingFormat.equalsIgnoreCase("avro") && !reportingFormat.equalsIgnoreCase("json")) {
    LOGGER.warn("Kafka metrics reporting format " + reportingFormat + " not recognized. Will report in json format.");
    reportingFormat="json";
  }
  if (reportingFormat.equalsIgnoreCase("json")) {
    this.kafkaReporter=Optional.of(closer.register(KafkaReporter.forContext(this.metricContext).build(brokers,topic)));
  }
 else   if (reportingFormat.equalsIgnoreCase("avro")) {
    this.kafkaReporter=Optional.of((KafkaReporter)closer.register(KafkaAvroReporter.forContext(this.metricContext).build(brokers,topic)));
  }
}
