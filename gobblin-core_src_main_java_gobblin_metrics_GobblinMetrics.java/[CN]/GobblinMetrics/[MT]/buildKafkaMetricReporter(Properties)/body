{
  if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_ENABLED))) {
    LOGGER.info("Not reporting metrics to Kafka");
    return;
  }
  Optional<String> topicDefault=Optional.fromNullable(properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC));
  Optional<String> topicMetrics=Optional.fromNullable(properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC_METRICS));
  Optional<String> topicEvents=Optional.fromNullable(properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC_EVENTS));
  try {
    Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_KAFKA_BROKERS),"Kafka metrics brokers missing.");
    Preconditions.checkArgument(topicMetrics.or(topicEvents).or(topicDefault).isPresent(),"Kafka topic missing.");
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.error("Not reporting metrics to Kafka due to missing Kafka configuration(s).",exception);
    return;
  }
  String brokers=properties.getProperty(ConfigurationKeys.METRICS_KAFKA_BROKERS);
  String reportingFormat=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_FORMAT,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_FORMAT);
  KafkaReportingFormats formatEnum;
  try {
    formatEnum=KafkaReportingFormats.valueOf(reportingFormat.toUpperCase());
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.warn("Kafka metrics reporting format " + reportingFormat + " not recognized. Will report in json format.",exception);
    formatEnum=KafkaReportingFormats.JSON;
  }
  Optional<KafkaAvroSchemaRegistry> registry=Optional.absent();
  try {
    if (formatEnum == KafkaReportingFormats.AVRO && Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {
      registry=Optional.of(new KafkaAvroSchemaRegistry(properties));
    }
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.error("Not reporting metrics to Kafka due to missing Kafka configuration(s).",exception);
    return;
  }
  if (topicMetrics.or(topicDefault).isPresent()) {
    try {
      KafkaReporter.Builder<?> builder=formatEnum.metricReporterBuilder(this.metricContext);
      if (builder instanceof KafkaAvroReporter.Builder<?> && registry.isPresent()) {
        LOGGER.info("Using schema registry for Kafka avro metrics reporter.");
        builder=((KafkaAvroReporter.Builder<?>)builder).withSchemaRegistry(registry.get());
      }
      this.scheduledReporters.add(this.closer.register(builder.build(brokers,topicMetrics.or(topicDefault).get())));
    }
 catch (    IOException exception) {
      LOGGER.error("Failed to create Kafka metrics reporter. Will not report metrics to Kafka.",exception);
    }
  }
  if (topicEvents.or(topicDefault).isPresent()) {
    try {
      KafkaEventReporter.Builder<?> builder=formatEnum.eventReporterBuilder(this.metricContext);
      if (builder instanceof KafkaAvroEventReporter.Builder<?> && registry.isPresent()) {
        LOGGER.info("Using schema registry for Kafka avro events reporter.");
        builder=((KafkaAvroEventReporter.Builder<?>)builder).withSchemaRegistry(registry.get());
      }
      this.scheduledReporters.add(this.closer.register(builder.build(brokers,topicEvents.or(topicDefault).get())));
    }
 catch (    IOException exception) {
      LOGGER.error("Failed to create Kafka events reporter. Will not report events to Kafka.",exception);
    }
  }
}
