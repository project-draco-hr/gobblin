{
  String reporterClasses=properties.getProperty(ConfigurationKeys.METRICS_CUSTOM_BUILDERS);
  if (Strings.isNullOrEmpty(reporterClasses)) {
    return;
  }
  for (  String reporterClass : Splitter.on(",").split(reporterClasses)) {
    try {
      Class<?> clazz=Class.forName(reporterClass);
      if (CustomCodahaleReporterFactory.class.isAssignableFrom(clazz)) {
        CustomCodahaleReporterFactory customCodahaleReporterFactory=((CustomCodahaleReporterFactory)clazz.getConstructor().newInstance());
        com.codahale.metrics.ScheduledReporter scheduledReporter=this.codahaleReportersCloser.register(customCodahaleReporterFactory.newScheduledReporter(this.metricContext,properties));
        this.scheduledReporters.add(scheduledReporter);
      }
 else       if (CustomReporterFactory.class.isAssignableFrom(clazz)) {
        CustomReporterFactory customReporterFactory=((CustomReporterFactory)clazz.getConstructor().newInstance());
        customReporterFactory.newScheduledReporter(properties);
      }
 else {
        throw new IllegalArgumentException("Class " + reporterClass + " specified by key "+ ConfigurationKeys.METRICS_CUSTOM_BUILDERS+ " must implement: "+ CustomCodahaleReporterFactory.class+ " or "+ CustomReporterFactory.class);
      }
    }
 catch (    ClassNotFoundException exception) {
      LOGGER.warn(String.format("Failed to create metric reporter: requested CustomReporterFactory %s not found.",reporterClass),exception);
    }
catch (    NoSuchMethodException exception) {
      LOGGER.warn(String.format("Failed to create metric reporter: requested CustomReporterFactory %s " + "does not have parameterless constructor.",reporterClass),exception);
    }
catch (    Exception exception) {
      LOGGER.warn("Could not create metric reporter from builder " + reporterClass + ".",exception);
    }
  }
}
