{
  state=convertDeprecatedConfigs(state);
  Preconditions.checkArgument(state.contains(EXTRACT_LIMIT_TYPE_KEY),String.format("Missing configuration property %s for the Limiter type",EXTRACT_LIMIT_TYPE_KEY));
  BaseLimiterType type=BaseLimiterType.forName(state.getProp(EXTRACT_LIMIT_TYPE_KEY));
switch (type) {
case RATE_BASED:
    Preconditions.checkArgument(state.contains(EXTRACT_LIMIT_RATE_LIMIT_KEY));
  int rateLimit=Integer.parseInt(state.getProp(EXTRACT_LIMIT_RATE_LIMIT_KEY));
if (state.contains(EXTRACT_LIMIT_RATE_LIMIT_TIMEUNIT_KEY)) {
  TimeUnit rateTimeUnit=TimeUnit.valueOf(state.getProp(EXTRACT_LIMIT_RATE_LIMIT_TIMEUNIT_KEY).toUpperCase());
  return new RateBasedLimiter(rateLimit,rateTimeUnit);
}
return new RateBasedLimiter(rateLimit);
case TIME_BASED:
Preconditions.checkArgument(state.contains(EXTRACT_LIMIT_TIME_LIMIT_KEY));
long timeLimit=Long.parseLong(state.getProp(EXTRACT_LIMIT_TIME_LIMIT_KEY));
if (state.contains(EXTRACT_LIMIT_TIME_LIMIT_TIMEUNIT_KEY)) {
TimeUnit timeTimeUnit=TimeUnit.valueOf(state.getProp(EXTRACT_LIMIT_TIME_LIMIT_TIMEUNIT_KEY).toUpperCase());
return new TimeBasedLimiter(timeLimit,timeTimeUnit);
}
return new TimeBasedLimiter(timeLimit);
case COUNT_BASED:
Preconditions.checkArgument(state.contains(EXTRACT_LIMIT_COUNT_LIMIT_KEY));
long countLimit=Long.parseLong(state.getProp(EXTRACT_LIMIT_COUNT_LIMIT_KEY));
return new CountBasedLimiter(countLimit);
case POOL_BASED:
Preconditions.checkArgument(state.contains(EXTRACT_LIMIT_POOL_SIZE_KEY));
int poolSize=Integer.parseInt(state.getProp(EXTRACT_LIMIT_POOL_SIZE_KEY));
return new PoolBasedLimiter(poolSize);
default :
throw new IllegalArgumentException("Unrecognized Limiter type: " + type.toString());
}
}
