{
  List<Iterator<T>> iteratorList=Lists.newArrayList();
  while (requestors.hasNext()) {
    Requestor<T> requestor=requestors.next();
    if (!(requestor instanceof PushDownRequestor)) {
      throw new RuntimeException(String.format("%s can only be used with %s.",PreOrderAllocator.class,PushDownRequestor.class));
    }
    try {
      iteratorList.add(((PushDownRequestor<T>)requestor).getRequests(this.prioritizer));
    }
 catch (    IOException ioe) {
      log.error("Failed to get requests from " + requestor);
    }
  }
  PriorityMultiIterator<T> multiIterator=new PriorityMultiIterator<>(iteratorList,this.prioritizer);
  ConcurrentBoundedPriorityIterable<T> iterable=new ConcurrentBoundedPriorityIterable<>(this.prioritizer,this.resourceEstimator,resourcePool);
  while (multiIterator.hasNext() && !iterable.isFull()) {
    iterable.add(multiIterator.next());
  }
  return new AllocatedRequestsBase<>(iterable.iterator(),resourcePool);
}
