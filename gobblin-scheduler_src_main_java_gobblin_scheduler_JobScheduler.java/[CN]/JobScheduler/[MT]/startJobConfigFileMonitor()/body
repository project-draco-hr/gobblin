{
  final File jobConfigFileDir=new File(this.properties.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY));
  FileAlterationListener listener=new FileAlterationListenerAdaptor(){
    /** 
 * Called when a new job configuration file is dropped in.
 */
    @Override public void onFileCreate(    File file){
      String fileExtension=Files.getFileExtension(file.getName());
      if (!jobConfigFileExtensions.contains(fileExtension)) {
        return;
      }
      try {
        LOG.info("Detected new job configuration file " + file.getAbsolutePath());
        Properties jobProps=SchedulerUtils.loadJobConfig(properties,file,jobConfigFileDir);
        boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
        scheduleJob(jobProps,runOnce ? new RunOnceJobListener() : new EmailNotificationJobListener());
      }
 catch (      ConfigurationException ce) {
        LOG.error("Failed to load from job configuration file " + file.getAbsolutePath(),ce);
      }
catch (      IOException ioe) {
        LOG.error("Failed to load from job configuration file " + file.getAbsolutePath(),ioe);
      }
catch (      JobException je) {
        LOG.error("Failed to schedule new job loaded from job configuration file " + file.getAbsolutePath(),je);
      }
    }
    /** 
 * Called when a job configuration file is changed.
 */
    @Override public void onFileChange(    File file){
      String fileExtension=Files.getFileExtension(file.getName());
      if (fileExtension.equalsIgnoreCase(SchedulerUtils.JOB_PROPS_FILE_EXTENSION)) {
        LOG.info("Detected change to common properties file " + file.getAbsolutePath());
        try {
          for (          Properties jobProps : SchedulerUtils.loadJobConfigs(properties,file,jobConfigFileDir)) {
            try {
              rescheduleJob(jobProps);
            }
 catch (            JobException je) {
              LOG.error("Failed to reschedule job reloaded from job configuration file " + jobProps.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY),je);
            }
          }
        }
 catch (        ConfigurationException ce) {
          LOG.error("Failed to reload job configuration files affected by changes to " + file.getAbsolutePath(),ce);
        }
catch (        IOException ioe) {
          LOG.error("Failed to reload job configuration files affected by changes to " + file.getAbsolutePath(),ioe);
        }
        return;
      }
      if (!jobConfigFileExtensions.contains(fileExtension)) {
        return;
      }
      try {
        LOG.info("Detected change to job configuration file " + file.getAbsolutePath());
        Properties jobProps=SchedulerUtils.loadJobConfig(properties,file,jobConfigFileDir);
        rescheduleJob(jobProps);
      }
 catch (      ConfigurationException ce) {
        LOG.error("Failed to reload from job configuration file " + file.getAbsolutePath(),ce);
      }
catch (      IOException ioe) {
        LOG.error("Failed to reload from job configuration file " + file.getAbsolutePath(),ioe);
      }
catch (      JobException je) {
        LOG.error("Failed to reschedule job reloaded from job configuration file " + file.getAbsolutePath(),je);
      }
    }
    private void rescheduleJob(    Properties jobProps) throws JobException {
      String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
      unscheduleJob(jobName);
      boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
      scheduleJob(jobProps,runOnce ? new RunOnceJobListener() : new EmailNotificationJobListener());
    }
  }
;
  SchedulerUtils.addFileAlterationObserver(this.fileAlterationMonitor,listener,jobConfigFileDir);
  this.fileAlterationMonitor.start();
}
