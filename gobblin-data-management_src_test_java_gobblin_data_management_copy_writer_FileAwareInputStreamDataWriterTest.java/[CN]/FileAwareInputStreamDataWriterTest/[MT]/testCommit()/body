{
  String destinationExistingToken="destination";
  String destinationAdditionalTokens="path";
  String fileName="file";
  Path destination=new Path(new Path(new Path("/",destinationExistingToken),destinationAdditionalTokens),fileName);
  Path destinationWithoutLeadingSeparator=new Path(new Path(destinationExistingToken,destinationAdditionalTokens),fileName);
  File tmpFile=Files.createTempDir();
  tmpFile.deleteOnExit();
  Path tmpPath=new Path(tmpFile.getAbsolutePath());
  Path originFile=new Path(tmpPath,fileName);
  this.fs.createNewFile(originFile);
  Path stagingDir=new Path(tmpPath,"staging");
  this.fs.mkdirs(stagingDir);
  Path outputDir=new Path(tmpPath,"output");
  this.fs.mkdirs(outputDir);
  FileStatus status=this.fs.getFileStatus(originFile);
  FsPermission readWrite=new FsPermission(FsAction.READ_WRITE,FsAction.READ_WRITE,FsAction.READ_WRITE);
  FsPermission dirReadWrite=new FsPermission(FsAction.ALL,FsAction.READ_WRITE,FsAction.READ_WRITE);
  OwnerAndPermission ownerAndPermission=new OwnerAndPermission(status.getOwner(),status.getGroup(),readWrite);
  List<OwnerAndPermission> ancestorOwnerAndPermissions=Lists.newArrayList();
  ancestorOwnerAndPermissions.add(ownerAndPermission);
  ancestorOwnerAndPermissions.add(ownerAndPermission);
  ancestorOwnerAndPermissions.add(ownerAndPermission);
  ancestorOwnerAndPermissions.add(ownerAndPermission);
  CopyableFile cf=CopyableFile.builder(this.fs,status,new Path("/dataset"),CopyConfiguration.builder().targetRoot(new Path("/target")).preserve(PreserveAttributes.fromMnemonicString("")).build()).destination(destination).destinationOwnerAndPermission(ownerAndPermission).ancestorsOwnerAndPermission(ancestorOwnerAndPermissions).build();
  WorkUnitState state=new WorkUnitState();
  state.setProp(ConfigurationKeys.WRITER_STAGING_DIR,stagingDir.toUri().getPath());
  state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR,outputDir.toUri().getPath());
  state.setProp(ConfigurationKeys.WRITER_FILE_PATH,RandomStringUtils.randomAlphabetic(5));
  CopyableDatasetMetadata metadata=new CopyableDatasetMetadata(new TestCopyableDataset(new Path("/source")),new Path("/"));
  CopySource.serializeCopyableFile(state,cf);
  CopySource.serializeCopyableDataset(state,metadata);
  FileAwareInputStreamDataWriter writer=new FileAwareInputStreamDataWriter(state,1,0);
  Path writtenFile=writer.getStagingFilePath(cf);
  this.fs.mkdirs(writtenFile.getParent());
  this.fs.createNewFile(writtenFile);
  Path outputRoot=FileAwareInputStreamDataWriter.getPartitionOutputRoot(outputDir,cf.getDatasetAndPartition(metadata));
  Path existingOutputPath=new Path(outputRoot,destinationExistingToken);
  this.fs.mkdirs(existingOutputPath);
  FileStatus fileStatus=this.fs.getFileStatus(existingOutputPath);
  FsPermission existingPathPermission=fileStatus.getPermission();
  Assert.assertTrue(this.fs.exists(existingOutputPath));
  Assert.assertEquals(this.fs.listStatus(existingOutputPath).length,0);
  writer.actualProcessedCopyableFile=Optional.of(cf);
  writer.commit();
  Path expectedOutputPath=new Path(outputRoot,destinationWithoutLeadingSeparator);
  Assert.assertTrue(this.fs.exists(expectedOutputPath));
  fileStatus=this.fs.getFileStatus(expectedOutputPath);
  Assert.assertEquals(fileStatus.getOwner(),ownerAndPermission.getOwner());
  Assert.assertEquals(fileStatus.getGroup(),ownerAndPermission.getGroup());
  Assert.assertEquals(fileStatus.getPermission(),readWrite);
  fileStatus=this.fs.getFileStatus(expectedOutputPath.getParent());
  Assert.assertEquals(fileStatus.getPermission(),dirReadWrite);
  fileStatus=this.fs.getFileStatus(existingOutputPath);
  Assert.assertEquals(fileStatus.getPermission(),existingPathPermission);
  Assert.assertFalse(this.fs.exists(writer.stagingDir));
}
