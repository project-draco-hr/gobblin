{
  PathFindingMethod pathFindingMethod=PathFindingMethod.valueOf(this.properties.getProperty(HIVE_LOCATION_LISTING_METHOD,DEFAULT_HIVE_LOCATION_LISTING_METHOD).toUpperCase());
  Map<Path,FileStatus> result=Maps.newHashMap();
  if (pathFindingMethod == PathFindingMethod.INPUT_FORMAT) {
    for (    Path path : HiveUtils.getPaths(this.inputFormat,this.location)) {
      result.put(path,this.fileSystem.getFileStatus(path));
    }
    boolean useHiveLocationDescriptorWithAdditionalData=Boolean.valueOf(this.properties.getProperty(HIVE_DATASET_COPY_ADDITIONAL_PATHS_RECURSIVELY_ENABLED,"false"));
    if (useHiveLocationDescriptorWithAdditionalData) {
      if (PathUtils.isGlob(this.location)) {
        throw new IOException("can not get additional data for glob pattern path " + this.location);
      }
      RecursivePathFinder finder=new RecursivePathFinder(this.fileSystem,this.location,this.properties);
      for (      FileStatus status : finder.getPaths(false)) {
        result.put(status.getPath(),status);
      }
    }
    return result;
  }
 else   if (pathFindingMethod == PathFindingMethod.RECURSIVE) {
    if (PathUtils.isGlob(this.location)) {
      throw new IOException("Cannot use recursive listing for globbed locations.");
    }
    boolean skipHiddenPaths=Boolean.parseBoolean(this.properties.getProperty(SKIP_HIDDEN_PATHS,DEFAULT_SKIP_HIDDEN_PATHS));
    RecursivePathFinder finder=new RecursivePathFinder(this.fileSystem,this.location,this.properties);
    for (    FileStatus status : finder.getPaths(skipHiddenPaths)) {
      result.put(status.getPath(),status);
    }
    return result;
  }
 else {
    throw new IOException("Hive location listing method not recognized: " + pathFindingMethod);
  }
}
