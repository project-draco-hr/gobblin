{
  String dbName="testdb";
  String tableName="testtable";
  String tableSdLoc="/tmp/testtable";
  this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName,false,true,true);
  Table table=this.hiveMetastoreTestUtils.createTestTable(dbName,tableName,tableSdLoc,Optional.<String>absent());
  Schema schema=ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir,"recordWithinRecordWithinRecord_nested.json");
  WorkUnitState wus=ConversionHiveTestUtils.createWus(dbName,tableName,0);
  wus.getJobState().setProp("orc.table.flatten.schema","false");
  HiveAvroToOrcConverter converter=new HiveAvroToOrcConverter();
  List<QueryBasedHiveConversionEntity> conversionEntities=Lists.newArrayList(converter.convertRecord(schema,new QueryBasedHiveConversionEntity(new SchemaAwareHiveTable(table,schema)),wus));
  Assert.assertEquals(conversionEntities.size(),1,"Only one query entity should be returned");
  QueryBasedHiveConversionEntity queryBasedHiveConversionEntity=conversionEntities.get(0);
  List<String> queries=queryBasedHiveConversionEntity.getQueries();
  Assert.assertEquals(queries.size(),2,"One DDL and one DML query should be returned");
  Assert.assertEquals(queries.get(0).trim().replaceAll(" ",""),ConversionHiveTestUtils.readQueryFromFile(resourceDir,"recordWithinRecordWithinRecord_nested.ddl").replaceAll(" ",""));
  Assert.assertEquals(queries.get(1).trim().replaceAll(" ",""),ConversionHiveTestUtils.readQueryFromFile(resourceDir,"recordWithinRecordWithinRecord_nested.dml").replaceAll(" ",""));
}
