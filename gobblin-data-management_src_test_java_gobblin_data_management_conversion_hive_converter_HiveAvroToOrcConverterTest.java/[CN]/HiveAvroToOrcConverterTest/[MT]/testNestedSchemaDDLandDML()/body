{
  String dbName="testdb";
  String tableName="testtable";
  String tableSdLoc="/tmp/testtable";
  this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName,false,true,true);
  Table table=this.hiveMetastoreTestUtils.createTestTable(dbName,tableName,tableSdLoc,Optional.<String>absent());
  Schema schema=ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir,"recordWithinRecordWithinRecord_nested.json");
  WorkUnitState wus=ConversionHiveTestUtils.createWus(dbName,tableName,0);
  wus.getJobState().setProp("orc.table.flatten.schema","false");
  try (HiveAvroToNestedOrcConverter converter=new HiveAvroToNestedOrcConverter()){
    Config config=ConfigFactory.parseMap(ImmutableMap.<String,String>builder().put("destinationFormats","nestedOrc").put("nestedOrc.destination.tableName","testtable_orc_nested").put("nestedOrc.destination.dbName",dbName).put("nestedOrc.destination.dataPath","file:/tmp/testtable_orc_nested").build());
    ConvertibleHiveDataset cd=ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);
    List<QueryBasedHiveConversionEntity> conversionEntities=Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema,wus),new QueryBasedHiveConversionEntity(cd,new SchemaAwareHiveTable(table,schema)),wus));
    Assert.assertEquals(conversionEntities.size(),1,"Only one query entity should be returned");
    QueryBasedHiveConversionEntity queryBasedHiveConversionEntity=conversionEntities.get(0);
    List<String> queries=queryBasedHiveConversionEntity.getQueries();
    Assert.assertEquals(queries.size(),4,"4 DDL and one DML query should be returned");
    String actualDDLQuery=StringUtils.substringAfter("(",queries.get(0).trim());
    String actualDMLQuery=StringUtils.substringAfter("SELECT",queries.get(0).trim());
    String expectedDDLQuery=StringUtils.substringAfter("(",ConversionHiveTestUtils.readQueryFromFile(resourceDir,"recordWithinRecordWithinRecord_nested.ddl"));
    String expectedDMLQuery=StringUtils.substringAfter("SELECT",ConversionHiveTestUtils.readQueryFromFile(resourceDir,"recordWithinRecordWithinRecord_nested.dml"));
    Assert.assertEquals(actualDDLQuery,expectedDDLQuery);
    Assert.assertEquals(actualDMLQuery,expectedDMLQuery);
  }
 }
