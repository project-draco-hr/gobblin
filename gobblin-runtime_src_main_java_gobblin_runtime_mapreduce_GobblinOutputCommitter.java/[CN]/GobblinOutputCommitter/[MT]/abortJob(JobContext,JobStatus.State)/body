{
  LOG.info("Aborting Job: " + jobContext.getJobID() + " with state: "+ state);
  Configuration conf=jobContext.getConfiguration();
  URI fsUri=URI.create(conf.get(ConfigurationKeys.FS_URI_KEY,ConfigurationKeys.LOCAL_FS_URI));
  FileSystem fs=FileSystem.get(fsUri,conf);
  Path mrJobDir=new Path(conf.get(ConfigurationKeys.MR_JOB_ROOT_DIR_KEY),conf.get(ConfigurationKeys.JOB_NAME_KEY));
  Path jobInputDir=new Path(mrJobDir,"input");
  if (!fs.exists(jobInputDir) || !fs.getFileStatus(jobInputDir).isDir()) {
    LOG.warn("Folder " + jobInputDir + " containing serialized WorkUnits doesn't exist. No data will cleaned up.");
    return;
  }
  try {
    for (    FileStatus status : fs.listStatus(jobInputDir,new WorkUnitFilter())) {
      Closer workUnitFileCloser=Closer.create();
      if (status.getPath().getName().endsWith(".wu")) {
        WorkUnit wu=WorkUnit.createEmpty();
        try {
          wu.readFields(workUnitFileCloser.register(new DataInputStream(fs.open(status.getPath()))));
        }
  finally {
          workUnitFileCloser.close();
        }
        JobLauncherUtils.cleanStagingData(new WorkUnitState(wu),LOG);
      }
      if (status.getPath().getName().endsWith(".mwu")) {
        MultiWorkUnit mwu=new MultiWorkUnit();
        try {
          mwu.readFields(workUnitFileCloser.register(new DataInputStream(fs.open(status.getPath()))));
        }
  finally {
          workUnitFileCloser.close();
        }
        for (        WorkUnit wu : mwu.getWorkUnits()) {
          JobLauncherUtils.cleanStagingData(new WorkUnitState(wu),LOG);
        }
      }
    }
  }
  finally {
    try {
      cleanUpWorkingDirectory(mrJobDir,fs);
    }
  finally {
      super.abortJob(jobContext,state);
    }
  }
}
