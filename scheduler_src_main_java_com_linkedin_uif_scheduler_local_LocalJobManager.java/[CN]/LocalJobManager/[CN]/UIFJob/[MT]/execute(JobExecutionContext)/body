{
  JobDataMap dataMap=context.getJobDetail().getJobDataMap();
  Properties jobProps=(Properties)dataMap.get(PROPERTIES_KEY);
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  ConcurrentMap<String,JobLock> jobLockMap=(ConcurrentMap<String,JobLock>)dataMap.get(JOB_LOCK_MAP_KEY);
  if (!acquireJobLock(jobLockMap,jobName)) {
    LOG.info("Failed to acquire the job lock for job " + jobName);
    return;
  }
  WorkUnitManager workUnitManager=(WorkUnitManager)dataMap.get(WORK_UNIT_MANAGER_KEY);
  Map<String,Class<SourceWrapperBase>> sourceWrapperMap=(Map<String,Class<SourceWrapperBase>>)dataMap.get(SOURCE_WRAPPER_MAP_KEY);
  Map<String,JobState> jobStateMap=(Map<String,JobState>)dataMap.get(JOB_STATE_MAP_KEY);
  Map<String,Source> jobSourceMap=(Map<String,Source>)dataMap.get(JOB_SOURCE_MAP_KEY);
  Map<String,String> lastJobIdMap=(Map<String,String>)dataMap.get(LAST_JOB_ID_MAP_KEY);
  StateStore taskStateStore=(StateStore)dataMap.get(TASK_STATE_STORE_KEY);
  String jobIdSuffix=String.format("%s_%d",jobName,System.currentTimeMillis());
  String jobId="job_" + jobIdSuffix;
  JobState jobState=new JobState(jobName,jobId);
  jobStateMap.put(jobId,jobState);
  jobState.addAll(jobProps);
  LOG.info("Starting job " + jobId);
  try {
    SourceWrapperBase source=sourceWrapperMap.get(jobProps.getProperty(ConfigurationKeys.SOURCE_WRAPPER_CLASS_KEY,ConfigurationKeys.DEFAULT_SOURCE_WRAPPER).toLowerCase()).newInstance();
    jobSourceMap.put(jobId,source);
    SourceState sourceState=new SourceState(jobState,getPreviousWorkUnitStates(jobName,lastJobIdMap,taskStateStore));
    source.init(sourceState);
    List<WorkUnit> workUnits=source.getWorkunits(sourceState);
    if (workUnits == null || workUnits.isEmpty()) {
      LOG.warn("No work units have been created for job " + jobId);
      jobLockMap.get(jobName).unlock();
      return;
    }
    int sequence=0;
    for (    WorkUnit workUnit : workUnits) {
      String taskId=String.format("task_%s_%d",jobIdSuffix,sequence++);
      WorkUnitState workUnitState=new WorkUnitState(workUnit);
      workUnitState.setProp(ConfigurationKeys.JOB_ID_KEY,jobId);
      workUnitState.setProp(ConfigurationKeys.TASK_ID_KEY,taskId);
      workUnitManager.addWorkUnit(workUnitState);
    }
    jobState.setTasks(workUnits.size());
    jobState.setStartTime(System.currentTimeMillis());
    jobState.setState(JobState.RunningState.WORKING);
  }
 catch (  Exception e) {
    LOG.error("Failed to run job " + jobId,e);
    jobState.setState(JobState.RunningState.FAILED);
    jobSourceMap.remove(jobId).shutdown(jobState);
    jobStateMap.remove(jobId);
    boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
    try {
      if (!runOnce) {
        jobLockMap.get(jobName).unlock();
      }
 else {
        jobLockMap.remove(jobName).unlock();
      }
    }
 catch (    IOException ioe) {
    }
    throw new JobExecutionException(e);
  }
}
