{
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  if (jobListener != null) {
    this.jobListenerMap.put(jobName,jobListener);
  }
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(PROPERTIES_KEY,jobProps);
  jobDataMap.put(WORK_UNIT_MANAGER_KEY,this.workUnitManager);
  jobDataMap.put(SOURCE_WRAPPER_MAP_KEY,this.sourceWrapperMap);
  jobDataMap.put(JOB_LOCK_MAP_KEY,this.jobLockMap);
  jobDataMap.put(JOB_STATE_MAP_KEY,this.jobStateMap);
  jobDataMap.put(JOB_SOURCE_MAP_KEY,this.jobSourceMap);
  jobDataMap.put(LAST_JOB_ID_MAP_KEY,this.lastJobIdMap);
  jobDataMap.put(TASK_STATE_STORE_KEY,this.taskStateStore);
  JobDetail job=JobBuilder.newJob(UIFJob.class).withIdentity(jobName,Strings.nullToEmpty(jobProps.getProperty(ConfigurationKeys.JOB_GROUP_KEY))).withDescription(Strings.nullToEmpty(jobProps.getProperty(ConfigurationKeys.JOB_DESCRIPTION_KEY))).usingJobData(jobDataMap).build();
  this.scheduler.scheduleJob(job,getTrigger(job.getKey(),jobProps));
  boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
  if (runOnce) {
    this.runOnceJobs.put(jobName,job.getKey());
    this.runOnceJobConfigFiles.put(jobName,jobProps.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));
  }
}
