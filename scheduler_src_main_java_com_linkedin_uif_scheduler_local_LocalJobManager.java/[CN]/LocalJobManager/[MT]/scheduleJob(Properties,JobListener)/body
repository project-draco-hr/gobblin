{
  Preconditions.checkNotNull(jobProps);
  if (!jobProps.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {
    jobProps.setProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"true");
    runJob(jobProps,jobListener);
    return;
  }
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  if (jobListener != null) {
    this.jobListenerMap.put(jobName,jobListener);
  }
  boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(JOB_MANAGER_KEY,this);
  jobDataMap.put(PROPERTIES_KEY,jobProps);
  jobDataMap.put(JOB_LISTENER_KEY,jobListener);
  JobDetail job=JobBuilder.newJob(UIFJob.class).withIdentity(jobName,Strings.nullToEmpty(jobProps.getProperty(ConfigurationKeys.JOB_GROUP_KEY))).withDescription(Strings.nullToEmpty(jobProps.getProperty(ConfigurationKeys.JOB_DESCRIPTION_KEY))).usingJobData(jobDataMap).build();
  try {
    this.scheduler.scheduleJob(job,getTrigger(job.getKey(),jobProps));
  }
 catch (  SchedulerException se) {
    LOG.error("Failed to schedule job " + jobName,se);
    throw new JobException("Failed to schedule job " + jobName,se);
  }
  this.scheduledJobs.put(jobName,job.getKey());
  if (runOnce) {
    this.runOnceJobs.put(jobName,job.getKey());
    this.runOnceJobConfigFiles.put(jobName,jobProps.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));
  }
}
