{
  Preconditions.checkNotNull(jobProps);
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  if (jobListener != null) {
    this.jobListenerMap.put(jobName,jobListener);
  }
  if (!acquireJobLock(jobName)) {
    LOG.info(String.format("Previous instance of job %s is still running, skipping this scheduled run",jobName));
    return;
  }
  boolean runOnce=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_RUN_ONCE_KEY,"false"));
  String jobIdSuffix=String.format("%s_%d",jobName,System.currentTimeMillis());
  String jobId="job_" + jobIdSuffix;
  JobState jobState=new JobState(jobName,jobId);
  jobState.addAll(jobProps);
  LOG.info("Starting job " + jobId);
  SourceWrapperBase source;
  SourceState sourceState;
  try {
    source=this.sourceWrapperMap.get(jobProps.getProperty(ConfigurationKeys.SOURCE_WRAPPER_CLASS_KEY,ConfigurationKeys.DEFAULT_SOURCE_WRAPPER).toLowerCase()).newInstance();
    sourceState=new SourceState(jobState,getPreviousWorkUnitStates(jobName));
    source.init(sourceState);
  }
 catch (  Exception e) {
    LOG.error("Failed to instantiate source for job " + jobId,e);
    unlockJob(jobName,runOnce);
    throw new JobException("Failed to run job " + jobId,e);
  }
  List<WorkUnit> workUnits=source.getWorkunits(sourceState);
  if (workUnits == null || workUnits.isEmpty()) {
    LOG.warn("No work units have been created for job " + jobId);
    source.shutdown(jobState);
    unlockJob(jobName,runOnce);
    callJobListener(jobName,jobState,runOnce);
    return;
  }
  jobState.setTasks(workUnits.size());
  jobState.setStartTime(System.currentTimeMillis());
  jobState.setState(JobState.RunningState.WORKING);
  this.jobStateMap.put(jobId,jobState);
  this.jobSourceMap.put(jobId,source);
  int sequence=0;
  for (  WorkUnit workUnit : workUnits) {
    String taskId=String.format("task_%s_%d",jobIdSuffix,sequence++);
    workUnit.setId(taskId);
    WorkUnitState workUnitState=new WorkUnitState(workUnit);
    workUnitState.setId(taskId);
    workUnitState.setProp(ConfigurationKeys.JOB_ID_KEY,jobId);
    workUnitState.setProp(ConfigurationKeys.TASK_ID_KEY,taskId);
    this.workUnitManager.addWorkUnit(workUnitState);
  }
}
