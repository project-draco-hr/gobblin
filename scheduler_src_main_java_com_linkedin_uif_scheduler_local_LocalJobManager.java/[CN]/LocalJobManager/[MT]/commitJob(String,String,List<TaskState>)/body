{
  LOG.info("Publishing job data of job " + jobId);
  Class<? extends DataPublisher> dataPublisherClass=(Class<? extends DataPublisher>)Class.forName(taskStates.get(0).getProp(ConfigurationKeys.DATA_PUBLISHER_TYPE));
  Constructor<? extends DataPublisher> dataPublisherConstructor=dataPublisherClass.getConstructor(com.linkedin.uif.configuration.State.class);
  DataPublisher publisher=dataPublisherConstructor.newInstance(taskStates.get(0));
  publisher.initialize();
  publisher.publishData(taskStates);
  LOG.info("Persisting job/task states of job " + jobId);
  this.taskStateStore.putAll(jobName,jobId + TASK_STATE_STORE_TABLE_SUFFIX,taskStates);
  JobState jobState=buildJobState(jobId,jobName,taskStates);
  this.jobStateStore.put(jobName,jobId + JOB_STATE_STORE_TABLE_SUFFIX,jobState);
  this.jobSourceMap.get(jobId).shutdown(jobState);
  this.jobSourceMap.remove(jobId);
  this.jobTaskCountMap.remove(jobId);
  this.jobTaskStatesMap.remove(jobId);
  this.lastJobIdMap.put(jobName,jobId);
  this.jobLockMap.get(jobName).unlock();
}
