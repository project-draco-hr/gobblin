{
  if (state.contains(key)) {
    Optional<T> fieldValue;
    if (new TypeToken<Boolean>(){
    }
.isAssignableFrom(token)) {
      fieldValue=(Optional<T>)Optional.of(state.getPropAsBoolean(key));
    }
 else     if (new TypeToken<Integer>(){
    }
.isAssignableFrom(token)) {
      fieldValue=(Optional<T>)Optional.of(state.getPropAsInt(key));
    }
 else     if (new TypeToken<Long>(){
    }
.isAssignableFrom(token)) {
      fieldValue=(Optional<T>)Optional.of(state.getPropAsLong(key));
    }
 else     if (new TypeToken<List<String>>(){
    }
.isAssignableFrom(token)) {
      fieldValue=(Optional<T>)Optional.of(state.getPropAsList(key));
    }
 else {
      fieldValue=(Optional<T>)Optional.of(state.getProp(key));
    }
    state.removeProp(key);
    return fieldValue;
  }
  return Optional.<T>absent();
}
