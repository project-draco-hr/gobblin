{
  Map<String,Class<?>> cache=Maps.newHashMap();
  Reflections reflections=new Reflections("");
  for (  Class<?> clazz : Sets.intersection(reflections.getTypesAnnotatedWith(Alias.class),reflections.getSubTypesOf(subTypeOf))) {
    String alias=clazz.getAnnotation(Alias.class).value();
    if (cache.containsKey(alias)) {
      log.warn(String.format("Alias %s already mapped to class %s. Mapping for %s will be ignored",alias,cache.get(alias).getCanonicalName(),clazz.getCanonicalName()));
    }
 else {
      cache.put(clazz.getAnnotation(Alias.class).value(),clazz);
    }
  }
  this.aliasToClassCache=ImmutableMap.copyOf(cache);
}
