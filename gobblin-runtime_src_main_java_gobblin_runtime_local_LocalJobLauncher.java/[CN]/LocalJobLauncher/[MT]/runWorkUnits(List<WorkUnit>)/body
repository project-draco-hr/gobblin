{
  TimingEvent workUnitsPreparationTimer=this.eventSubmitter.getTimingEvent(TimingEventNames.RunJobTimings.WORK_UNITS_PREPARATION);
  List<WorkUnit> workUnitsToRun=JobLauncherUtils.flattenWorkUnits(workUnits);
  workUnitsPreparationTimer.stop();
  if (workUnitsToRun.isEmpty()) {
    LOG.warn("No work units to run");
    return;
  }
  String jobId=this.jobContext.getJobId();
  JobState jobState=this.jobContext.getJobState();
  for (  WorkUnit workUnit : workUnitsToRun) {
    workUnit.addAllIfNotExist(jobState);
  }
  TimingEvent workUnitsRunTimer=this.eventSubmitter.getTimingEvent(TimingEventNames.RunJobTimings.WORK_UNITS_RUN);
  this.countDownLatch=new CountDownLatch(workUnitsToRun.size());
  List<Task> tasks=AbstractJobLauncher.runWorkUnits(this.jobContext.getJobId(),workUnitsToRun,this.taskStateTracker,this.taskExecutor,this.countDownLatch);
  LOG.info(String.format("Waiting for submitted tasks of job %s to complete...",jobId));
  while (this.countDownLatch.getCount() > 0) {
    LOG.info(String.format("%d out of %d tasks of job %s are running",this.countDownLatch.getCount(),workUnitsToRun.size(),jobId));
    this.countDownLatch.await(1,TimeUnit.MINUTES);
    for (    Task task : tasks) {
      if (task.isCompleted()) {
        this.eventBus.post(new NewOutputTaskStateEvent(task.getTaskState()));
      }
    }
  }
  workUnitsRunTimer.stop();
  if (this.cancellationRequested) {
synchronized (this.cancellationExecution) {
      if (this.cancellationExecuted) {
        return;
      }
    }
  }
  LOG.info(String.format("All tasks of job %s have completed",jobId));
  if (jobState.getState() == JobState.RunningState.RUNNING) {
    jobState.setState(JobState.RunningState.SUCCESSFUL);
  }
}
