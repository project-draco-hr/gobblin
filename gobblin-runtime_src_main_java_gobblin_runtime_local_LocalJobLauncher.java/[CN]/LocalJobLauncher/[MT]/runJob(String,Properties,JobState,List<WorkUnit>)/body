{
  JobMetrics jobMetrics=JobMetrics.get(jobState);
  Timer.Context startDependentServicesTimer=jobMetrics.getTimer(MetricNames.RunJobTimings.START_DEPENDENT_SERVICES).time();
  this.serviceManager.startAsync().awaitHealthy(5,TimeUnit.SECONDS);
  startDependentServicesTimer.stop();
  List<WorkUnit> workUnitsToRun=Lists.newArrayList();
  for (  WorkUnit workUnit : workUnits) {
    if (workUnit instanceof MultiWorkUnit) {
      workUnitsToRun.addAll(((MultiWorkUnit)workUnit).getWorkUnits());
    }
 else {
      workUnitsToRun.add(workUnit);
    }
  }
  if (workUnitsToRun.isEmpty()) {
    LOG.warn("No work units to run");
    return;
  }
  String jobId=jobProps.getProperty(ConfigurationKeys.JOB_ID_KEY);
  this.countDownLatch=new CountDownLatch(workUnitsToRun.size());
  Timer.Context runWorkUnitsTimer=jobMetrics.getTimer(MetricNames.RunJobTimings.RUN_WORK_UNITS).time();
  List<Task> tasks=AbstractJobLauncher.runWorkUnits(jobId,workUnitsToRun,this.taskStateTracker,this.taskExecutor,this.countDownLatch);
  runWorkUnitsTimer.stop();
  if (isCancelled) {
    jobState.setState(JobState.RunningState.CANCELLED);
  }
 else   if (jobState.getState() == JobState.RunningState.RUNNING) {
    jobState.setState(JobState.RunningState.SUCCESSFUL);
  }
  for (  Task task : tasks) {
    jobState.addTaskState(task.getTaskState());
    if (task.getTaskState().getWorkingState() == WorkUnitState.WorkingState.FAILED) {
      jobState.setState(JobState.RunningState.FAILED);
    }
  }
  this.serviceManager.stopAsync().awaitStopped(5,TimeUnit.SECONDS);
}
