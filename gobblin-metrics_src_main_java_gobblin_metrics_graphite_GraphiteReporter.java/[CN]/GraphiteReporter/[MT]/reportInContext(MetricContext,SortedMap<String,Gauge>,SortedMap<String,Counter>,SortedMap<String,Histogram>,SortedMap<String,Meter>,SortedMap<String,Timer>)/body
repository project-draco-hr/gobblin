{
  try {
    if (!this.graphiteSender.isConnected()) {
      this.graphiteSender.connect();
    }
    long timeStamp=System.currentTimeMillis() / 1000l;
    for (    SortedMap.Entry<String,Gauge> entry : gauges.entrySet()) {
      reportGauge(context,entry.getKey(),entry.getValue(),timeStamp);
    }
    for (    SortedMap.Entry<String,Counter> entry : counters.entrySet()) {
      reportCounter(context,entry.getKey(),entry.getValue(),timeStamp);
    }
    for (    SortedMap.Entry<String,Histogram> entry : histograms.entrySet()) {
      reportHistogram(context,entry.getKey(),entry.getValue(),timeStamp);
    }
    for (    SortedMap.Entry<String,Meter> entry : meters.entrySet()) {
      reportMetered(context,entry.getKey(),entry.getValue(),timeStamp);
    }
    for (    SortedMap.Entry<String,Timer> entry : timers.entrySet()) {
      reportTimer(context,entry.getKey(),entry.getValue(),timeStamp);
    }
    this.graphiteSender.flush();
  }
 catch (  IOException ioe) {
    LOGGER.error("Error sending metrics to Graphite",ioe);
    try {
      this.graphiteSender.close();
    }
 catch (    IOException innerIoe) {
      LOGGER.error("Error closing the Graphite sender",innerIoe);
    }
  }
}
