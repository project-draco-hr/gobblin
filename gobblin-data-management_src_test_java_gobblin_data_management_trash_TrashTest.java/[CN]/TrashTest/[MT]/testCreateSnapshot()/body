{
  TrashTestBase trash=new TrashTestBase(new Properties());
  Path pathInTrash=new Path(trash.trash.getTrashLocation(),"dirInTrash");
  DateTimeUtils.setCurrentMillisFixed(new DateTime(2015,7,15,10,0).getMillis());
  final List<Path> createdDirs=Lists.newArrayList();
  final List<Pair<Path,Path>> movedPaths=Lists.newArrayList();
  when(trash.fs.listStatus(eq(trash.trash.getTrashLocation()),any(PathFilter.class))).thenReturn(Lists.newArrayList(new FileStatus(0,true,0,0,0,pathInTrash)).toArray(new FileStatus[]{}));
  when(trash.fs.exists(any(Path.class))).thenReturn(false);
  when(trash.fs.mkdirs(any(Path.class),any(FsPermission.class))).thenAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      createdDirs.add((Path)invocation.getArguments()[0]);
      return true;
    }
  }
);
  when(trash.fs.rename(any(Path.class),any(Path.class))).thenAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      movedPaths.add(new Pair<Path,Path>((Path)args[0],(Path)args[1]));
      return true;
    }
  }
);
  trash.trash.createTrashSnapshot();
  Assert.assertEquals(createdDirs.size(),1);
  Path createdDir=createdDirs.get(0);
  Assert.assertTrue(Trash.TRASH_SNAPSHOT_NAME_FORMATTER.parseDateTime(createdDir.getName()).equals(new DateTime().withZone(DateTimeZone.UTC)));
  Assert.assertEquals(movedPaths.size(),1);
  Assert.assertTrue(movedPaths.get(0).first().equals(pathInTrash));
  Assert.assertTrue(movedPaths.get(0).second().getName().equals(pathInTrash.getName()));
  Assert.assertTrue(movedPaths.get(0).second().getParent().equals(createdDir));
  DateTimeUtils.setCurrentMillisSystem();
}
