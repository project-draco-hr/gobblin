{
  if (this.partitionIterator.hasNext()) {
    Map.Entry<List<String>,Partition> partitionEntry=this.partitionIterator.next();
    List<CopyEntity> copyEntities=Lists.newArrayList();
    try {
      copyEntities=new PartitionCopy(partitionEntry.getValue(),HiveCopyEntityHelper.this.dataset.properties).getCopyEntities();
    }
 catch (    IOException ioe) {
      log.error("Could not generate work units to copy partition " + partitionEntry.getValue().getCompleteName(),ioe);
    }
    HiveCopyEntityHelper.this.targetPartitions.remove(partitionEntry.getKey());
    return new FileSet.Builder<>(partitionEntry.getValue().getCompleteName(),HiveCopyEntityHelper.this.dataset).add(copyEntities).build();
  }
 else   if (!HiveCopyEntityHelper.this.targetPartitions.isEmpty()) {
    List<CopyEntity> deregisterCopyEntities=Lists.newArrayList();
    int priority=1;
    String deregisterFileSet="deregister";
    for (    Map.Entry<List<String>,Partition> partitionEntry : HiveCopyEntityHelper.this.targetPartitions.entrySet()) {
      try {
        priority=addPartitionDeregisterSteps(deregisterCopyEntities,deregisterFileSet,priority,HiveCopyEntityHelper.this.targetTable,partitionEntry.getValue());
      }
 catch (      IOException ioe) {
        log.error("Could not create work unit to deregister partition " + partitionEntry.getValue().getCompleteName());
      }
    }
    HiveCopyEntityHelper.this.targetPartitions.clear();
    return new FileSet.Builder<>(deregisterFileSet,HiveCopyEntityHelper.this.dataset).add(deregisterCopyEntities).build();
  }
 else {
    throw new NoSuchElementException();
  }
}
