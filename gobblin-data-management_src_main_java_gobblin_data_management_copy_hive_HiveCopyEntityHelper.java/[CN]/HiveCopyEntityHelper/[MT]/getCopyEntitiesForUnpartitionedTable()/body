{
  MultiTimingEvent multiTimer=new MultiTimingEvent(this.eventSubmitter,"TableCopy",true);
  int stepPriority=0;
  String fileSet=this.dataset.table.getTableName();
  List<CopyEntity> copyEntities=Lists.newArrayList();
  if (this.existingTargetTable.isPresent()) {
    if (!this.targetTable.getDataLocation().equals(this.existingTargetTable.get().getDataLocation())) {
      if (existingEntityPolicy != ExistingEntityPolicy.REPLACE_TABLE) {
        log.error("Source and target table are not compatible. Aborting copy of table " + this.targetTable,new HiveTableLocationNotMatchException(this.targetTable.getDataLocation(),this.existingTargetTable.get().getDataLocation()));
        return Lists.newArrayList();
      }
      log.warn("Source and target table are not compatible. Will override target table " + this.existingTargetTable.get().getDataLocation());
      stepPriority=addTableDeregisterSteps(copyEntities,fileSet,stepPriority,targetTable);
      this.existingTargetTable=Optional.absent();
    }
  }
  stepPriority=addSharedSteps(copyEntities,fileSet,stepPriority);
  HiveLocationDescriptor sourceLocation=HiveLocationDescriptor.forTable(this.dataset.table,this.dataset.fs,this.dataset.getProperties());
  HiveLocationDescriptor desiredTargetLocation=HiveLocationDescriptor.forTable(this.targetTable,this.targetFs,this.dataset.getProperties());
  Optional<HiveLocationDescriptor> existingTargetLocation=this.existingTargetTable.isPresent() ? Optional.of(HiveLocationDescriptor.forTable(this.existingTargetTable.get(),this.targetFs,this.dataset.getProperties())) : Optional.<HiveLocationDescriptor>absent();
  DiffPathSet diffPathSet=fullPathDiff(sourceLocation,desiredTargetLocation,existingTargetLocation,Optional.<Partition>absent(),multiTimer,this);
  DeleteFileCommitStep deleteStep=DeleteFileCommitStep.fromPaths(targetFs,diffPathSet.pathsToDelete,this.dataset.getProperties());
  copyEntities.add(new PrePublishStep(fileSet,Maps.<String,Object>newHashMap(),deleteStep,stepPriority++));
  for (  CopyableFile.Builder builder : getCopyableFilesFromPaths(diffPathSet.filesToCopy,configuration,Optional.<Partition>absent())) {
    copyEntities.add(builder.build());
  }
  multiTimer.close();
  return copyEntities;
}
