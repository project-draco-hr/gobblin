{
  List<CopyableFile.Builder> builders=Lists.newArrayList();
  List<SourceAndDestination> dataFiles=Lists.newArrayList();
  Configuration hadoopConfiguration=new Configuration();
  FileSystem actualSourceFs=null;
  String referenceScheme=null;
  String referenceAuthority=null;
  for (  FileStatus status : paths) {
    dataFiles.add(new SourceAndDestination(status,getTargetPathHelper().getTargetPath(status.getPath(),this.targetFs,partition,true)));
  }
  for (  SourceAndDestination sourceAndDestination : dataFiles) {
    URI uri=sourceAndDestination.getSource().getPath().toUri();
    if (actualSourceFs == null || !StringUtils.equals(referenceScheme,uri.getScheme()) || !StringUtils.equals(referenceAuthority,uri.getAuthority())) {
      actualSourceFs=sourceAndDestination.getSource().getPath().getFileSystem(hadoopConfiguration);
      referenceScheme=uri.getScheme();
      referenceAuthority=uri.getAuthority();
    }
    if (!this.dataset.getTableRootPath().isPresent()) {
      throw new IOException(String.format("Table %s does not have a concrete table root path.",this.dataset.getTable().getCompleteName()));
    }
    List<OwnerAndPermission> ancestorOwnerAndPermission=CopyableFile.resolveReplicatedOwnerAndPermissionsRecursively(actualSourceFs,sourceAndDestination.getSource().getPath(),this.dataset.getTableRootPath().get().getParent(),configuration);
    builders.add(CopyableFile.fromOriginAndDestination(actualSourceFs,sourceAndDestination.getSource(),sourceAndDestination.getDestination(),configuration).ancestorsOwnerAndPermission(ancestorOwnerAndPermission));
  }
  return builders;
}
