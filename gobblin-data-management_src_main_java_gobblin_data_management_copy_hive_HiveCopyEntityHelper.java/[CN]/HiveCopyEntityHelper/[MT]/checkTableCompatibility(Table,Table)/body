{
  Path targetLocation=getTargetLocation(this.dataset.fs,this.targetFs,sourceTable.getDataLocation(),Optional.<Partition>absent());
  if (!targetLocation.equals(targetTable.getDataLocation())) {
    throw new IOException(String.format("Computed target location %s and already registered target location %s do not agree.",targetLocation,targetTable.getDataLocation()));
  }
  if (HiveUtils.isPartitioned(sourceTable) != HiveUtils.isPartitioned(targetTable)) {
    throw new IOException(String.format("%s: Source table %s partitioned, target table %s partitioned. Tables are incompatible.",this.dataset.tableIdentifier,HiveUtils.isPartitioned(sourceTable) ? "is" : "is not",HiveUtils.isPartitioned(targetTable) ? "is" : "is not"));
  }
  if (sourceTable.isPartitioned() && !sourceTable.getPartitionKeys().equals(targetTable.getPartitionKeys())) {
    throw new IOException(String.format("%s: Source table has partition keys %s, target table has partition  keys %s. " + "Tables are incompatible.",this.dataset.tableIdentifier,gson.toJson(sourceTable.getPartitionKeys()),gson.toJson(targetTable.getPartitionKeys())));
  }
}
