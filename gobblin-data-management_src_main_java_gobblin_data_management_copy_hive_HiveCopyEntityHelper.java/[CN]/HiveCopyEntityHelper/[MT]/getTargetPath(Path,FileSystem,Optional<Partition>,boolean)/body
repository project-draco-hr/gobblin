{
  if (this.relocateDataFiles) {
    Preconditions.checkArgument(this.targetTableRoot.isPresent(),"Must define %s to relocate data files.",COPY_TARGET_TABLE_ROOT);
    Path path=this.targetTableRoot.get();
    if (partition.isPresent()) {
      addPartitionToPath(path,partition.get());
    }
    if (!isConcreteFile) {
      return targetFs.makeQualified(path);
    }
 else {
      return targetFs.makeQualified(new Path(path,sourcePath.getName()));
    }
  }
  if (this.targetTablePrefixTobeReplaced.isPresent() || this.targetTablePrefixReplacement.isPresent()) {
    Preconditions.checkState(this.targetTablePrefixTobeReplaced.isPresent(),String.format("Must specify both %s option and %s option together",COPY_TARGET_TABLE_PREFIX_TOBE_REPLACED,COPY_TARGET_TABLE_PREFIX_REPLACEMENT));
    Preconditions.checkState(this.targetTablePrefixReplacement.isPresent(),String.format("Must specify both %s option and %s option together",COPY_TARGET_TABLE_PREFIX_TOBE_REPLACED,COPY_TARGET_TABLE_PREFIX_REPLACEMENT));
    Preconditions.checkState(!this.targetTableRoot.isPresent(),String.format("Can not specify the option %s with option %s ",COPY_TARGET_TABLE_ROOT,COPY_TARGET_TABLE_PREFIX_REPLACEMENT));
    Path targetPathWithoutSchemeAndAuthority=replacedPrefix(sourcePath,this.targetTablePrefixTobeReplaced.get(),this.targetTablePrefixReplacement.get());
    return targetFs.makeQualified(targetPathWithoutSchemeAndAuthority);
  }
 else   if (this.targetTableRoot.isPresent()) {
    Preconditions.checkArgument(this.targetTableRoot.isPresent(),"Must define %s to relocate data files.",COPY_TARGET_TABLE_ROOT);
    Path path=this.targetTableRoot.get();
    if (partition.isPresent()) {
      addPartitionToPath(path,partition.get());
    }
    if (!isConcreteFile) {
      return targetFs.makeQualified(path);
    }
 else {
      return targetFs.makeQualified(new Path(path,sourcePath.getName()));
    }
  }
 else {
    return targetFs.makeQualified(PathUtils.getPathWithoutSchemeAndAuthority(sourcePath));
  }
}
