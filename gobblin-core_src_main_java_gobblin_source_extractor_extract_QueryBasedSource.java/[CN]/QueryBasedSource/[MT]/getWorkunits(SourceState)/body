{
  initLogger(state);
  List<WorkUnit> workUnits=Lists.newArrayList();
  String nameSpaceName=state.getProp(ConfigurationKeys.EXTRACT_NAMESPACE_NAME_KEY);
  Map<String,String> tableNameToEntityMap=Maps.newHashMap();
  Set<String> entities=getSourceEntities(state);
  List<Pattern> blacklist=DatasetFilterUtils.getPatternList(state,ENTITY_BLACKLIST);
  List<Pattern> whitelist=DatasetFilterUtils.getPatternList(state,ENTITY_WHITELIST);
  for (  String entity : DatasetFilterUtils.filter(entities,blacklist,whitelist)) {
    tableNameToEntityMap.put(Utils.escapeSpecialCharacters(entity,ConfigurationKeys.ESCAPE_CHARS_IN_TABLE_NAME,"_"),entity);
  }
  Map<String,State> tableSpecificPropsMap=shouldObtainTablePropsFromConfigStore(state) ? getTableSpecificPropsFromConfigStore(tableNameToEntityMap.keySet(),state) : DatasetUtils.getDatasetSpecificProps(tableNameToEntityMap.keySet(),state);
  Map<String,Long> prevWatermarksByTable=getPreviousWatermarksForAllTables(state);
  for (  String tableName : Sets.union(tableNameToEntityMap.keySet(),prevWatermarksByTable.keySet())) {
    log.info(String.format("Table to be processed: %s, %s",tableName,tableNameToEntityMap.containsKey(tableName) ? "source entity = " + tableNameToEntityMap.get(tableName) : "which does not have source entity but has previous watermark"));
    SourceState combinedState=getCombinedState(state,tableSpecificPropsMap.get(tableName));
    TableType tableType=TableType.valueOf(combinedState.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());
    long previousWatermark=prevWatermarksByTable.containsKey(tableName) ? prevWatermarksByTable.get(tableName) : ConfigurationKeys.DEFAULT_WATERMARK_VALUE;
    if (!tableNameToEntityMap.containsKey(tableName)) {
      combinedState.setProp(ConfigurationKeys.SOURCE_QUERYBASED_END_VALUE,previousWatermark);
    }
    Map<Long,Long> sortedPartitions=Maps.newTreeMap();
    sortedPartitions.putAll(new Partitioner(combinedState).getPartitions(previousWatermark));
    String outputTableName=state.contains(ConfigurationKeys.EXTRACT_TABLE_NAME_KEY) ? state.getProp(ConfigurationKeys.EXTRACT_TABLE_NAME_KEY) : tableName;
    log.info("Create extract output with table name is " + outputTableName);
    Extract extract=createExtract(tableType,nameSpaceName,outputTableName);
    if (Boolean.valueOf(combinedState.getProp(ConfigurationKeys.EXTRACT_IS_FULL_KEY))) {
      extract.setFullTrue(System.currentTimeMillis());
    }
    for (    Entry<Long,Long> entry : sortedPartitions.entrySet()) {
      WorkUnit workunit=WorkUnit.create(extract);
      workunit.setProp(ConfigurationKeys.SOURCE_ENTITY,tableName);
      workunit.setWatermarkInterval(new WatermarkInterval(new LongWatermark(entry.getKey()),new LongWatermark(entry.getValue())));
      workUnits.add(workunit);
    }
  }
  log.info("Total number of workunits for the current run: " + workUnits.size());
  List<WorkUnit> previousWorkUnits=this.getPreviousWorkUnitsForRetry(state);
  log.info("Total number of incomplete tasks from the previous run: " + previousWorkUnits.size());
  workUnits.addAll(previousWorkUnits);
  int numOfMultiWorkunits=state.getPropAsInt(ConfigurationKeys.MR_JOB_MAX_MAPPERS_KEY,ConfigurationKeys.DEFAULT_MR_JOB_MAX_MAPPERS);
  return pack(workUnits,numOfMultiWorkunits);
}
