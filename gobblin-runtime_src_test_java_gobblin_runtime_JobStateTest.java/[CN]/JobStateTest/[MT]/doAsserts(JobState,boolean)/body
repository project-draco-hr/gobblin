{
  Assert.assertEquals(jobState.getJobName(),"TestJob");
  Assert.assertEquals(jobState.getJobId(),"TestJob-1");
  Assert.assertEquals(jobState.getId(),"TestJob-1");
  Assert.assertEquals(jobState.getStartTime(),this.startTime);
  Assert.assertEquals(jobState.getEndTime(),this.startTime + 1000);
  Assert.assertEquals(jobState.getDuration(),1000);
  Assert.assertEquals(jobState.getState(),JobState.RunningState.COMMITTED);
  Assert.assertEquals(jobState.getTasks(),3);
  Assert.assertEquals(jobState.getProp("foo"),"bar");
  if (!considerTaskStates) {
    return;
  }
  List<String> taskStateIds=Lists.newArrayList();
  for (int i=0; i < jobState.getCompletedTasks(); i++) {
    TaskState taskState=jobState.getTaskStates().get(i);
    Assert.assertEquals(taskState.getJobId(),"TestJob-1");
    Assert.assertEquals(taskState.getStartTime(),this.startTime);
    Assert.assertEquals(taskState.getEndTime(),this.startTime + 1000);
    Assert.assertEquals(taskState.getTaskDuration(),1000);
    Assert.assertEquals(taskState.getWorkingState(),WorkUnitState.WorkingState.COMMITTED);
    Assert.assertTrue(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY).startsWith("TestDataset"));
    Assert.assertEquals(taskState.getProp("foo"),"bar");
    taskStateIds.add(taskState.getTaskId());
  }
  Collections.sort(taskStateIds);
  Assert.assertEquals(taskStateIds,Lists.newArrayList("TestTask-0","TestTask-1","TestTask-2"));
  Set<String> sortedDatasetUrns=Sets.newTreeSet(jobState.getDatasetStatesByUrns().keySet());
  Assert.assertEquals(sortedDatasetUrns.size(),jobState.getCompletedTasks());
  Map<String,JobState> datasetStatesByUrns=jobState.getDatasetStatesByUrns();
  int index=0;
  for (  String dataSetUrn : sortedDatasetUrns) {
    Assert.assertEquals(dataSetUrn,"TestDataset" + index);
    List<TaskState> taskStates=datasetStatesByUrns.get(dataSetUrn).getTaskStates();
    Assert.assertEquals(taskStates.size(),1);
    Assert.assertEquals(taskStates.get(0).getTaskId(),"TestTask-" + index);
    index++;
  }
}
