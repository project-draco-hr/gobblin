{
  MetricRegistry registry=new MetricRegistry();
  Counter counter=registry.counter("com.linkedin.example.counter");
  Meter meter=registry.meter("com.linkedin.example.meter");
  Histogram histogram=registry.histogram("com.linkedin.example.histogram");
  KafkaReporter kafkaReporter=getBuilder(registry).build("localhost:" + kafkaPort,topic);
  counter.inc();
  meter.mark(2);
  histogram.update(1);
  histogram.update(1);
  histogram.update(2);
  kafkaReporter.report();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
  }
  Map<String,Double> expected=new HashMap<String,Double>();
  expected.put("com.linkedin.example.counter." + Measurements.COUNT,1.0);
  expected.put("com.linkedin.example.meter." + Measurements.COUNT,2.0);
  expected.put("com.linkedin.example.histogram." + Measurements.COUNT,3.0);
  MetricReport nextReport=nextReport(iterator);
  expectMetricsWithValues(nextReport,expected);
  kafkaReporter.report();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
  }
  Set<String> expectedSet=new HashSet<String>();
  expectedSet.add("com.linkedin.example.counter." + Measurements.COUNT);
  expectedSet.add("com.linkedin.example.meter." + Measurements.COUNT);
  expectedSet.add("com.linkedin.example.meter." + Measurements.MEAN_RATE);
  expectedSet.add("com.linkedin.example.meter." + Measurements.RATE_1MIN);
  expectedSet.add("com.linkedin.example.meter." + Measurements.RATE_5MIN);
  expectedSet.add("com.linkedin.example.meter." + Measurements.RATE_15MIN);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.MEAN);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.MIN);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.MAX);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.MEDIAN);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.PERCENTILE_75TH);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.PERCENTILE_95TH);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.PERCENTILE_99TH);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.PERCENTILE_999TH);
  expectedSet.add("com.linkedin.example.histogram." + Measurements.COUNT);
  nextReport=nextReport(iterator);
  expectMetrics(nextReport,expectedSet,true);
  kafkaReporter.close();
}
