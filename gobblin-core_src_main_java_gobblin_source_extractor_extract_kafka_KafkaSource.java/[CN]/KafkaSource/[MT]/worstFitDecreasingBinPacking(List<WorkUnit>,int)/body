{
  Collections.sort(groups,SIZE_DESC_COMPARATOR);
  MinMaxPriorityQueue<MultiWorkUnit> pQueue=MinMaxPriorityQueue.orderedBy(SIZE_ASC_COMPARATOR).expectedSize(numOfMultiWorkUnits).create();
  for (int i=0; i < numOfMultiWorkUnits; i++) {
    MultiWorkUnit multiWorkUnit=new MultiWorkUnit();
    setWorkUnitEstSize(multiWorkUnit,0);
    pQueue.add(multiWorkUnit);
  }
  for (  WorkUnit group : groups) {
    MultiWorkUnit lightestMultiWorkUnit=pQueue.poll();
    addWorkUnitToMultiWorkUnit(group,lightestMultiWorkUnit);
    pQueue.add(lightestMultiWorkUnit);
  }
  long minLoad=getWorkUnitEstSize(pQueue.peekFirst());
  long maxLoad=getWorkUnitEstSize(pQueue.peekLast());
  LOG.info(String.format("Min data size of multiWorkUnit = %d; Max data size of multiWorkUnit = %d; Diff = %f%%",minLoad,maxLoad,(double)(maxLoad - minLoad) / (double)maxLoad * 100.0));
  List<WorkUnit> multiWorkUnits=Lists.newArrayList();
  multiWorkUnits.addAll(pQueue);
  return multiWorkUnits;
}
