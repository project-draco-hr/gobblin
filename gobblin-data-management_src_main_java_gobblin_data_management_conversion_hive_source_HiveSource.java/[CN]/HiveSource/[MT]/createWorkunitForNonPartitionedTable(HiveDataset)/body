{
  try {
    long tableProcessTime=new DateTime().getMillis();
    long updateTime=this.updateProvider.getUpdateTime(hiveDataset.getTable());
    this.watermarker.onTableProcessBegin(hiveDataset.getTable(),tableProcessTime);
    LongWatermark lowWatermark=this.watermarker.getPreviousHighWatermark(hiveDataset.getTable());
    if (shouldCreateWorkunit(hiveDataset.getTable().getTTable().getCreateTime(),updateTime,lowWatermark)) {
      log.debug(String.format("Processing table: %s",hiveDataset.getTable()));
      LongWatermark expectedDatasetHighWatermark=this.watermarker.getExpectedHighWatermark(hiveDataset.getTable(),tableProcessTime);
      HiveWorkUnit hiveWorkUnit=new HiveWorkUnit(hiveDataset);
      hiveWorkUnit.setTableSchemaUrl(this.avroSchemaManager.getSchemaUrl(hiveDataset.getTable()));
      hiveWorkUnit.setWatermarkInterval(new WatermarkInterval(lowWatermark,expectedDatasetHighWatermark));
      EventWorkunitUtils.setTableSlaEventMetadata(hiveWorkUnit,hiveDataset.getTable(),updateTime,lowWatermark.getValue(),this.beginGetWorkunitsTime);
      this.workunits.add(hiveWorkUnit);
      log.debug(String.format("Workunit added for table: %s",hiveWorkUnit));
    }
 else {
      log.info(String.format("Not creating workunit for table %s as updateTime %s is not greater than low watermark %s",hiveDataset.getTable().getCompleteName(),updateTime,lowWatermark.getValue()));
    }
  }
 catch (  UpdateNotFoundException e) {
    log.error(String.format("Not Creating workunit for %s as update time was not found. %s",hiveDataset.getTable().getCompleteName(),e.getMessage()));
  }
}
