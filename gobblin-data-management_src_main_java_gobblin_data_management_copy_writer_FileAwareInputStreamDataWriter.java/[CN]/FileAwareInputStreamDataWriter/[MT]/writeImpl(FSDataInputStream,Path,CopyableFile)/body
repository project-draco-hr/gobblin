{
  final short replication=copyableFile.getPreserve().preserve(PreserveAttributes.Option.REPLICATION) ? copyableFile.getOrigin().getReplication() : this.fs.getDefaultReplication(writeAt);
  final long blockSize=copyableFile.getPreserve().preserve(PreserveAttributes.Option.BLOCK_SIZE) ? copyableFile.getOrigin().getBlockSize() : this.fs.getDefaultBlockSize(writeAt);
  Predicate<FileStatus> fileStatusAttributesFilter=new Predicate<FileStatus>(){
    @Override public boolean apply(    FileStatus input){
      return input.getReplication() == replication && input.getBlockSize() == blockSize;
    }
  }
;
  Optional<FileStatus> persistedFile=this.recoveryHelper.findPersistedFile(this.state,copyableFile,fileStatusAttributesFilter);
  if (persistedFile.isPresent()) {
    log.info(String.format("Recovering persisted file %s to %s.",persistedFile.get().getPath(),writeAt));
    this.fs.rename(persistedFile.get().getPath(),writeAt);
  }
 else {
    FSDataOutputStream os=this.fs.create(writeAt,true,this.fs.getConf().getInt("io.file.buffer.size",4096),replication,blockSize);
    try {
      this.bytesWritten.addAndGet(StreamUtils.copy(inputStream,os));
      log.info("bytes written: " + this.bytesWritten.get() + " for file "+ copyableFile);
    }
  finally {
      os.close();
      inputStream.close();
    }
  }
}
