{
  if (curatorFrameworkShutdownHook == null) {
    curatorFrameworkShutdownHook=new CuratorFrameworkShutdownHook();
    Runtime.getRuntime().addShutdownHook(curatorFrameworkShutdownHook);
  }
  if (curatorFramework == null) {
    CuratorFramework newCuratorFramework=CuratorFrameworkFactory.builder().connectString(properties.getProperty(CONNECTION_STRING,CONNECTION_STRING_DEFAULT)).connectionTimeoutMs(getMilliseconds(properties,CONNECTION_TIMEOUT_SECONDS,CONNECTION_TIMEOUT_SECONDS_DEFAULT)).sessionTimeoutMs(getMilliseconds(properties,SESSION_TIMEOUT_SECONDS,SESSION_TIMEOUT_SECONDS_DEFAULT)).retryPolicy(new ExponentialBackoffRetry(getMilliseconds(properties,RETRY_BACKOFF_SECONDS,RETRY_BACKOFF_SECONDS_DEFAULT),getInt(properties,MAX_RETRY_COUNT,MAX_RETRY_COUNT_DEFAULT))).build();
    newCuratorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener(){
      @Override public void stateChanged(      CuratorFramework curatorFramework,      ConnectionState connectionState){
switch (connectionState) {
case LOST:
          log.warn("Lost connection with zookeeper");
        for (        Map.Entry<String,JobLockEventListener> lockEventListener : lockEventListeners.entrySet()) {
          log.warn("Informing job %s that lock was lost",lockEventListener.getKey());
          lockEventListener.getValue().onLost();
        }
      break;
case SUSPENDED:
    log.warn("Lost connection with zookeeper");
  for (  Map.Entry<String,JobLockEventListener> lockEventListener : lockEventListeners.entrySet()) {
    log.warn("Informing job %s that lock was lost",lockEventListener.getKey());
    lockEventListener.getValue().onLost();
  }
break;
case CONNECTED:
log.info("Connected with zookeeper");
break;
case RECONNECTED:
log.warn("Regained connection with zookeeper");
break;
case READ_ONLY:
log.warn("Zookeeper connection went into read-only mode");
break;
}
}
}
);
newCuratorFramework.start();
try {
if (!newCuratorFramework.blockUntilConnected(getInt(properties,CONNECTION_TIMEOUT_SECONDS,CONNECTION_TIMEOUT_SECONDS_DEFAULT),TimeUnit.SECONDS)) {
throw new RuntimeException("Time out while waiting to connect to zookeeper");
}
}
 catch (InterruptedException e) {
throw new RuntimeException("Interrupted while waiting to connect to zookeeper");
}
curatorFramework=newCuratorFramework;
}
}
