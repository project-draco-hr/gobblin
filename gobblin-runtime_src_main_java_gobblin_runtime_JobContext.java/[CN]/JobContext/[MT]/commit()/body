{
  this.datasetStatesByUrns=Optional.of(this.jobState.createDatasetStatesByUrns());
  boolean allDatasetsCommit=true;
  for (  Map.Entry<String,JobState.DatasetState> entry : this.datasetStatesByUrns.get().entrySet()) {
    String datasetUrn=entry.getKey();
    JobState.DatasetState datasetState=entry.getValue();
    finalizeDatasetStateBeforeCommit(datasetState);
    if (!canCommitDataset(datasetState)) {
      this.logger.warn(String.format("Not committing dataset %s of job %s with commit policy %s and state %s",datasetUrn,this.jobId,this.jobCommitPolicy,datasetState.getState()));
      allDatasetsCommit=false;
      continue;
    }
    try {
      this.logger.info(String.format("Committing dataset %s of job %s with commit policy %s and state %s",datasetUrn,this.jobId,this.jobCommitPolicy,datasetState.getState()));
      commitDataset(datasetState);
    }
 catch (    IOException ioe) {
      this.logger.error(String.format("Failed to commit dataset state for dataset %s of job %s",datasetUrn,this.jobId),ioe);
      allDatasetsCommit=false;
    }
 finally {
      try {
        persistDatasetState(datasetUrn,datasetState);
      }
 catch (      IOException ioe) {
        this.logger.error(String.format("Failed to persist dataset state for dataset %s of job %s",datasetUrn,this.jobId),ioe);
        allDatasetsCommit=false;
      }
    }
  }
  if (!allDatasetsCommit) {
    this.jobState.setState(JobState.RunningState.FAILED);
    throw new IOException("Failed to commit dataset state for some dataset(s) of job " + this.jobId);
  }
 else {
    this.jobState.setState(JobState.RunningState.COMMITTED);
  }
}
