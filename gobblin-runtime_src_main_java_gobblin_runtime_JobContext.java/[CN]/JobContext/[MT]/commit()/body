{
  this.datasetStatesByUrns=Optional.of(this.jobState.createDatasetStatesByUrns());
  for (  Map.Entry<String,JobState.DatasetState> entry : this.datasetStatesByUrns.get().entrySet()) {
    String datasetUrn=entry.getKey();
    JobState.DatasetState datasetState=entry.getValue();
    finalizeDatasetStateBeforeCommit(datasetState);
    if (canCommitDataset(datasetState)) {
      boolean allDatasetsCommit=true;
      try {
        commitDataset(datasetState);
      }
 catch (      IOException ioe) {
        this.logger.error(String.format("Failed to commit dataset state for dataset %s of job %s",datasetUrn,this.jobId),ioe);
        allDatasetsCommit=false;
      }
 finally {
        try {
          persistDatasetState(datasetUrn,datasetState);
        }
 catch (        IOException ioe) {
          this.logger.error(String.format("Failed to persist dataset state for dataset %s of job %s",datasetUrn,this.jobId),ioe);
          allDatasetsCommit=false;
        }
      }
      if (!allDatasetsCommit) {
        throw new IOException("Failed to commit dataset state for some dataset(s) of job " + this.jobId);
      }
    }
  }
}
