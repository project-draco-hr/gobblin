{
  boolean success=true;
  finalizeDatasetStateBeforeCommit(datasetState);
  Class<? extends DataPublisher> dataPublisherClass=null;
  try (Closer closer=Closer.create()){
    dataPublisherClass=getJobDataPublisherClass(datasetState).or((Class<? extends DataPublisher>)Class.forName(ConfigurationKeys.DEFAULT_DATA_PUBLISHER_TYPE));
    success=checkForUnpublishedWUHandling(datasetUrn,datasetState,success,dataPublisherClass,closer);
  }
 catch (  ReflectiveOperationException roe) {
    this.logger.warn("Unable to find publisher class: " + roe,roe);
    success=false;
  }
  if (!success) {
    return false;
  }
  Optional<CommitSequence.Builder> commitSequenceBuilder=Optional.<CommitSequence.Builder>absent();
  try (Closer closer=Closer.create()){
    if (shouldCommitDataInJob) {
      this.logger.info(String.format("Committing dataset %s of job %s with commit policy %s and state %s",datasetUrn,this.jobId,this.jobCommitPolicy,datasetState.getState()));
      if (deliverySemantics == DeliverySemantics.EXACTLY_ONCE) {
        generateCommitSequenceBuilder(datasetState);
      }
 else {
        commitDataset(datasetState,closer.register(DataPublisher.getInstance(dataPublisherClass,datasetState)));
      }
    }
 else {
      if (datasetState.getState() == JobState.RunningState.SUCCESSFUL) {
        datasetState.setState(JobState.RunningState.COMMITTED);
      }
    }
  }
 catch (  ReflectiveOperationException roe) {
    this.logger.error(String.format("Failed to instantiate data publisher for dataset %s of job %s.",datasetUrn,this.jobId),roe);
    success=false;
  }
catch (  IOException ioe) {
    this.logger.error(String.format("Failed to commit dataset state for dataset %s of job %s",datasetUrn,this.jobId),ioe);
    success=false;
  }
 finally {
    try {
      finalizeDatasetState(datasetState,datasetUrn);
      if (commitSequenceBuilder.isPresent()) {
        buildAndExecuteCommitSequence(commitSequenceBuilder.get(),datasetState,datasetUrn);
        datasetState.setState(JobState.RunningState.COMMITTED);
      }
 else {
        persistDatasetState(datasetUrn,datasetState);
      }
    }
 catch (    IOException|RuntimeException ioe) {
      this.logger.error(String.format("Failed to persist dataset state for dataset %s of job %s",datasetUrn,this.jobId),ioe);
      success=false;
    }
  }
  return success;
}
