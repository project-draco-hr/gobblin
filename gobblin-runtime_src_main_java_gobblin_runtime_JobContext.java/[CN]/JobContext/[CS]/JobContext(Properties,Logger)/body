{
  Preconditions.checkArgument(jobProps.containsKey(ConfigurationKeys.JOB_NAME_KEY),"A job must have a job name specified by job.name");
  this.jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  this.jobId=jobProps.containsKey(ConfigurationKeys.JOB_ID_KEY) ? jobProps.getProperty(ConfigurationKeys.JOB_ID_KEY) : JobLauncherUtils.newJobId(this.jobName);
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,this.jobId);
  this.jobCommitPolicy=JobCommitPolicy.getCommitPolicy(jobProps);
  this.jobLockEnabled=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_LOCK_ENABLED_KEY,Boolean.TRUE.toString()));
  Configuration conf=new Configuration();
  for (  String key : jobProps.stringPropertyNames()) {
    conf.set(key,jobProps.getProperty(key));
  }
  String stateStoreFsUri=jobProps.getProperty(ConfigurationKeys.STATE_STORE_FS_URI_KEY,ConfigurationKeys.LOCAL_FS_URI);
  FileSystem stateStoreFs=FileSystem.get(URI.create(stateStoreFsUri),conf);
  String stateStoreRootDir=jobProps.getProperty(ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY);
  this.datasetStateStore=new FsDatasetStateStore(stateStoreFs,stateStoreRootDir);
  boolean jobHistoryStoreEnabled=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_HISTORY_STORE_ENABLED_KEY,Boolean.FALSE.toString()));
  if (jobHistoryStoreEnabled) {
    Injector injector=Guice.createInjector(new MetaStoreModule(jobProps));
    this.jobHistoryStoreOptional=Optional.of(injector.getInstance(JobHistoryStore.class));
  }
 else {
    this.jobHistoryStoreOptional=Optional.absent();
  }
  State jobPropsState=new State();
  jobPropsState.addAll(jobProps);
  this.jobState=new JobState(jobPropsState,this.datasetStateStore.getLatestDatasetStatesByUrns(this.jobName),this.jobName,this.jobId);
  setTaskStagingAndOutputDirs();
  if (GobblinMetrics.isEnabled(jobProps)) {
    this.jobMetricsOptional=Optional.of(JobMetrics.get(this.jobState));
    this.jobState.setProp(Instrumented.METRIC_CONTEXT_NAME_KEY,this.jobMetricsOptional.get().getName());
  }
 else {
    this.jobMetricsOptional=Optional.absent();
  }
  this.source=new SourceDecorator(Source.class.cast(Class.forName(jobProps.getProperty(ConfigurationKeys.SOURCE_CLASS_KEY)).newInstance()),this.jobId,logger);
  this.logger=logger;
}
