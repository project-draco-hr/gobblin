{
  Preconditions.checkArgument(jobProps.containsKey(ConfigurationKeys.JOB_NAME_KEY),"A job must have a job name specified by job.name");
  this.jobName=JobState.getJobNameFromProps(jobProps);
  this.jobId=jobProps.containsKey(ConfigurationKeys.JOB_ID_KEY) ? jobProps.getProperty(ConfigurationKeys.JOB_ID_KEY) : JobLauncherUtils.newJobId(this.jobName);
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,this.jobId);
  this.jobCommitPolicy=JobCommitPolicy.getCommitPolicy(jobProps);
  this.jobLockEnabled=Boolean.valueOf(jobProps.getProperty(ConfigurationKeys.JOB_LOCK_ENABLED_KEY,Boolean.TRUE.toString()));
  Configuration conf=new Configuration();
  for (  String key : jobProps.stringPropertyNames()) {
    conf.set(key,jobProps.getProperty(key));
  }
  this.datasetStateStore=createStateStore(jobProps,conf);
  this.jobHistoryStoreOptional=createJobHistoryStore(jobProps);
  State jobPropsState=new State();
  jobPropsState.addAll(jobProps);
  this.jobState=new JobState(jobPropsState,this.datasetStateStore.getLatestDatasetStatesByUrns(this.jobName),this.jobName,this.jobId);
  setTaskStagingAndOutputDirs();
  if (GobblinMetrics.isEnabled(jobProps)) {
    this.jobMetricsOptional=Optional.of(JobMetrics.get(this.jobState));
    this.jobState.setProp(Instrumented.METRIC_CONTEXT_NAME_KEY,this.jobMetricsOptional.get().getName());
  }
 else {
    this.jobMetricsOptional=Optional.absent();
  }
  this.semantics=DeliverySemantics.parse(this.jobState);
  this.commitSequenceStore=createCommitSequenceStore();
  this.source=createSource(jobProps);
  this.logger=logger;
  this.parallelizeCommit=this.jobState.getPropAsBoolean(ConfigurationKeys.PARALLELIZE_DATASET_COMMIT,ConfigurationKeys.DEFAULT_PARALLELIZE_DATASET_COMMIT);
  this.parallelCommits=this.parallelizeCommit ? this.jobState.getPropAsInt(ConfigurationKeys.DATASET_COMMIT_THREADS,ConfigurationKeys.DEFAULT_DATASET_COMMIT_THREADS) : 1;
}
