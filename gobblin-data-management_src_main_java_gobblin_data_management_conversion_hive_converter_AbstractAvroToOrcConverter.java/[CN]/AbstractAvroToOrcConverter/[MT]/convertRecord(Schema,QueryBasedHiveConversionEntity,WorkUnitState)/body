{
  Preconditions.checkNotNull(outputAvroSchema,"Avro schema must not be null");
  Preconditions.checkNotNull(conversionEntity,"Conversion entity must not be null");
  Preconditions.checkNotNull(workUnit,"Workunit state must not be null");
  Preconditions.checkNotNull(conversionEntity.getHiveTable(),"Hive table within conversion entity must not be null");
  this.hiveDataset=conversionEntity.getConvertibleHiveDataset();
  if (!hasConversionConfig()) {
    return new SingleRecordIterable<>(conversionEntity);
  }
  String avroTableName=conversionEntity.getHiveTable().getTableName();
  String orcTableName=getConversionConfig().getDestinationTableName();
  String orcTableDatabase=getConversionConfig().getDestinationDbName();
  String orcDataLocation=getOrcDataLocation(workUnit);
  boolean isEvolutionEnabled=getConversionConfig().isEvolutionEnabled();
  Optional<Table> destinationTableMeta=getDestinationTableMeta(orcTableDatabase,orcTableName,workUnit);
  Optional<List<String>> clusterBy=getConversionConfig().getClusterBy().isEmpty() ? Optional.<List<String>>absent() : Optional.of(getConversionConfig().getClusterBy());
  Optional<Integer> numBuckets=getConversionConfig().getNumBuckets();
  Map<String,String> partitionsDDLInfo=Maps.newHashMap();
  Map<String,String> partitionsDMLInfo=Maps.newHashMap();
  populatePartitionInfo(conversionEntity,partitionsDDLInfo,partitionsDMLInfo);
  for (  Map.Entry<Object,Object> entry : getConversionConfig().getHiveRuntimeProperties().entrySet()) {
    conversionEntity.getQueries().add(String.format("SET %s=%s;",entry.getKey(),entry.getValue()));
  }
  String createTargetTableDDL=HiveAvroORCQueryUtils.generateCreateTableDDL(outputAvroSchema,orcTableName,orcDataLocation,Optional.of(orcTableDatabase),Optional.of(partitionsDDLInfo),clusterBy,Optional.<Map<String,HiveAvroORCQueryUtils.COLUMN_SORT_ORDER>>absent(),numBuckets,Optional.<String>absent(),Optional.<String>absent(),Optional.<String>absent(),Optional.<Map<String,String>>absent(),isEvolutionEnabled,destinationTableMeta);
  conversionEntity.getQueries().add(createTargetTableDDL);
  log.debug("Create DDL: " + createTargetTableDDL);
  String insertInORCTableDML=HiveAvroORCQueryUtils.generateTableMappingDML(conversionEntity.getHiveTable().getAvroSchema(),outputAvroSchema,avroTableName,orcTableName,Optional.of(conversionEntity.getHiveTable().getDbName()),Optional.of(orcTableDatabase),Optional.of(partitionsDMLInfo),Optional.<Boolean>absent(),Optional.<Boolean>absent(),isEvolutionEnabled,destinationTableMeta);
  conversionEntity.getQueries().add(insertInORCTableDML);
  log.debug("Conversion DML: " + insertInORCTableDML);
  log.debug("Conversion Query " + conversionEntity.getQueries());
  return new SingleRecordIterable<>(conversionEntity);
}
