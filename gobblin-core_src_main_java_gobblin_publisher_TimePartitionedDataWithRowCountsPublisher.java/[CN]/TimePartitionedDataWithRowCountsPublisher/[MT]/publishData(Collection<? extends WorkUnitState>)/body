{
  Set<Path> publisherDirsProcessed=Sets.newHashSet();
  for (  WorkUnitState workUnitState : states) {
    for (int branchId=0; branchId < this.numBranches; branchId++) {
      Path writerOutputDir=WriterUtils.getWriterOutputDir(workUnitState,this.numBranches,branchId);
      if (!this.fss.get(branchId).exists(writerOutputDir)) {
        LOG.warn("WorkUnit " + workUnitState.getId() + " produced no data");
        workUnitState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
        break;
      }
      boolean replaceFinalOutputDir=this.getState().getPropAsBoolean(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.DATA_PUBLISHER_REPLACE_FINAL_DIR,this.numBranches,branchId));
      Path publisherOutputDir=WriterUtils.getDataPublisherFinalDir(workUnitState,this.numBranches,branchId);
      if (!publisherDirsProcessed.contains(publisherOutputDir) && replaceFinalOutputDir && this.fss.get(branchId).exists(publisherOutputDir)) {
        this.fss.get(branchId).delete(publisherOutputDir,true);
      }
      publisherDirsProcessed.add(publisherOutputDir);
      Path writerOutFullGlob=getWriterOutputGlobMatcher(workUnitState,branchId,writerOutputDir);
      for (      FileStatus writerOutFileStatus : this.fss.get(branchId).globStatus(writerOutFullGlob)) {
        Path writerOutFilePath=writerOutFileStatus.getPath();
        int recordsWritten=workUnitState.getPropAsInt(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_ROWS_WRITTEN,this.numBranches,branchId));
        Path outputPath=getFinalOutputPath(writerOutputDir,publisherOutputDir,writerOutFilePath,recordsWritten);
        this.fss.get(branchId).mkdirs(outputPath.getParent());
        if (this.fss.get(branchId).rename(writerOutFilePath,outputPath)) {
          LOG.info(String.format("Moved %s to %s",writerOutFilePath,outputPath));
        }
 else {
          throw new IOException("Failed to move from " + writerOutFilePath + " to "+ outputPath);
        }
      }
    }
    workUnitState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
  }
}
