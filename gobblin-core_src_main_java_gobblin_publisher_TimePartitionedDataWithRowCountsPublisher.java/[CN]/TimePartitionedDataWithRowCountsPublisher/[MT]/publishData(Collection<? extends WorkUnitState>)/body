{
  Set<Path> publisherDirsProcessed=new HashSet<Path>();
  for (  WorkUnitState workUnitState : states) {
    for (int branchId=0; branchId < this.numBranches; branchId++) {
      Path writerOutputDir=WriterUtils.getWriterOutputDir(workUnitState,this.numBranches,branchId);
      if (!this.fss.get(branchId).exists(writerOutputDir)) {
        LOG.warn("WorkUnit " + workUnitState.getId() + " produced no data");
        workUnitState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
        break;
      }
      String fileExtension=WriterOutputFormat.valueOf(workUnitState.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_OUTPUT_FORMAT_KEY,this.numBranches,branchId),WriterOutputFormat.AVRO.name())).getExtension();
      String writerOutputFileName=WriterUtils.getWriterFileName(workUnitState,this.numBranches,branchId,workUnitState.getId(),fileExtension);
      Path writerOutputFullGlob=getWriterOutputGlobMatcher(workUnitState,branchId,writerOutputDir,writerOutputFileName);
      Path writerOutputFilePath=null;
      for (      FileStatus status : this.fss.get(branchId).globStatus(writerOutputFullGlob)) {
        if (writerOutputFilePath != null) {
          LOG.warn("Found more than one output for WorkUnit " + workUnitState.getId() + " branch "+ branchId+ " matching glob: "+ writerOutputFullGlob);
        }
 else {
          writerOutputFilePath=status.getPath();
        }
      }
      if (writerOutputFilePath == null) {
        LOG.error("Unable to find output for WorkUnit " + workUnitState.getId() + " branch "+ branchId+ "; expected to find file matching glob: "+ writerOutputFullGlob);
        continue;
      }
      Path publisherOutputDir=WriterUtils.getDataPublisherFinalDir(workUnitState,this.numBranches,branchId);
      String writerOutputPathStr=writerOutputFilePath.getParent().toString();
      String pathSuffix=writerOutputPathStr.substring(writerOutputPathStr.indexOf(writerOutputDir.toString()) + writerOutputDir.toString().length() + 1);
      int recordsWritten=workUnitState.getPropAsInt(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_ROWS_WRITTEN,this.numBranches,branchId));
      String outputFileName=writerOutputFileName.substring(0,writerOutputFileName.length() - fileExtension.length()) + recordsWritten + "."+ fileExtension;
      Path outputPath=new Path(publisherOutputDir,pathSuffix + Path.SEPARATOR + outputFileName);
      boolean replaceFinalOutputDir=this.getState().getPropAsBoolean(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.DATA_PUBLISHER_REPLACE_FINAL_DIR,this.numBranches,branchId));
      if (!publisherDirsProcessed.contains(publisherOutputDir) && replaceFinalOutputDir && this.fss.get(branchId).exists(publisherOutputDir)) {
        this.fss.get(branchId).delete(publisherOutputDir,true);
      }
      publisherDirsProcessed.add(publisherOutputDir);
      this.fss.get(branchId).mkdirs(outputPath.getParent());
      if (this.fss.get(branchId).rename(writerOutputFilePath,outputPath)) {
        LOG.info(String.format("Moved %s to %s",writerOutputFilePath,outputPath));
      }
 else {
        throw new IOException("Failed to move from " + writerOutputFilePath + " to "+ outputPath);
      }
    }
    workUnitState.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
  }
}
