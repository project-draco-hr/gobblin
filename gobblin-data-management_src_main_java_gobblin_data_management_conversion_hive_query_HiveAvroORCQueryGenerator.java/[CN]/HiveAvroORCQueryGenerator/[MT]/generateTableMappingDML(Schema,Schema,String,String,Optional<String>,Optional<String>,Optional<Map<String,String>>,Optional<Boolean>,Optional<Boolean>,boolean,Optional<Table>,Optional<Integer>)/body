{
  Preconditions.checkNotNull(inputAvroSchema);
  Preconditions.checkNotNull(outputOrcSchema);
  Preconditions.checkArgument(StringUtils.isNotBlank(inputTblName));
  Preconditions.checkArgument(StringUtils.isNotBlank(outputTblName));
  String inputDbName=optionalInputDbName.isPresent() ? optionalInputDbName.get() : DEFAULT_DB_NAME;
  String outputDbName=optionalOutputDbName.isPresent() ? optionalOutputDbName.get() : DEFAULT_DB_NAME;
  boolean shouldOverwriteTable=optionalOverwriteTable.isPresent() ? optionalOverwriteTable.get() : true;
  boolean shouldCreateIfNotExists=optionalCreateIfNotExists.isPresent() ? optionalCreateIfNotExists.get() : false;
  log.debug("Input Schema: " + inputAvroSchema.toString());
  log.debug("Output Schema: " + outputOrcSchema.toString());
  StringBuilder dmlQuery=new StringBuilder();
  if (shouldOverwriteTable) {
    dmlQuery.append(String.format("INSERT OVERWRITE TABLE `%s`.`%s` %n",outputDbName,outputTblName));
  }
 else {
    dmlQuery.append(String.format("INSERT INTO TABLE `%s`.`%s` %n",outputDbName,outputTblName));
  }
  if (optionalPartitionDMLInfo.isPresent()) {
    if (optionalPartitionDMLInfo.get().size() > 0) {
      dmlQuery.append("PARTITION (");
      boolean isFirstPartitionSpec=true;
      for (      Map.Entry<String,String> partition : optionalPartitionDMLInfo.get().entrySet()) {
        if (isFirstPartitionSpec) {
          isFirstPartitionSpec=false;
        }
 else {
          dmlQuery.append(", ");
        }
        dmlQuery.append(String.format("`%s`='%s'",partition.getKey(),partition.getValue()));
      }
      dmlQuery.append(") \n");
    }
  }
  if (shouldCreateIfNotExists) {
    dmlQuery.append(" IF NOT EXISTS \n");
  }
  dmlQuery.append("SELECT \n");
  if (isEvolutionEnabled || !destinationTableMeta.isPresent()) {
    log.info("Generating DML using source schema");
    boolean isFirst=true;
    List<Schema.Field> fieldList=outputOrcSchema.getFields();
    for (    Schema.Field field : fieldList) {
      String flattenSource=field.getProp("flatten_source");
      String colName;
      if (StringUtils.isNotBlank(flattenSource)) {
        colName=flattenSource;
      }
 else {
        colName=field.name();
      }
      colName=colName.replaceAll("\\.","`.`");
      if (isFirst) {
        isFirst=false;
      }
 else {
        dmlQuery.append(", \n");
      }
      dmlQuery.append(String.format("  `%s`",colName));
    }
  }
 else {
    log.info("Generating DML using destination schema");
    boolean isFirst=true;
    List<FieldSchema> fieldList=destinationTableMeta.get().getSd().getCols();
    for (    FieldSchema field : fieldList) {
      String colName=StringUtils.EMPTY;
      if (field.isSetComment() && field.getComment().startsWith("from flatten_source ")) {
        colName=field.getComment().replaceAll("from flatten_source ","").trim();
      }
 else {
        List<Schema.Field> evolvedFieldList=outputOrcSchema.getFields();
        for (        Schema.Field evolvedField : evolvedFieldList) {
          if (evolvedField.name().equalsIgnoreCase(field.getName())) {
            String flattenSource=evolvedField.getProp("flatten_source");
            if (StringUtils.isNotBlank(flattenSource)) {
              colName=flattenSource;
            }
 else {
              colName=evolvedField.name();
            }
            break;
          }
        }
      }
      colName=colName.replaceAll("\\.","`.`");
      if (StringUtils.isNotBlank(colName)) {
        if (isFirst) {
          isFirst=false;
        }
 else {
          dmlQuery.append(", \n");
        }
        dmlQuery.append(String.format("  `%s`",colName));
      }
    }
  }
  dmlQuery.append(String.format(" %n FROM `%s`.`%s` ",inputDbName,inputTblName));
  if (optionalPartitionDMLInfo.isPresent()) {
    if (optionalPartitionDMLInfo.get().size() > 0) {
      dmlQuery.append("WHERE ");
      for (      Map.Entry<String,String> partition : optionalPartitionDMLInfo.get().entrySet()) {
        dmlQuery.append(String.format("`%s`='%s'",partition.getKey(),partition.getValue()));
      }
      dmlQuery.append(" \n");
    }
  }
  if (rowLimit.isPresent()) {
    dmlQuery.append(String.format("LIMIT %s",rowLimit.get()));
  }
  return dmlQuery.toString();
}
