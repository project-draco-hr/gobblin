{
  Preconditions.checkNotNull(schema);
  Preconditions.checkArgument(StringUtils.isNotBlank(tblName));
  Preconditions.checkArgument(StringUtils.isNotBlank(tblLocation));
  String dbName=optionalDbName.isPresent() ? optionalDbName.get() : DEFAULT_DB_NAME;
  String rowFormatSerde=optionalRowFormatSerde.isPresent() ? optionalRowFormatSerde.get() : DEFAULT_ROW_FORMAT_SERDE;
  String inputFormat=optionalInputFormat.isPresent() ? optionalInputFormat.get() : DEFAULT_ORC_INPUT_FORMAT;
  String outputFormat=optionalOutputFormat.isPresent() ? optionalOutputFormat.get() : DEFAULT_ORC_OUTPUT_FORMAT;
  Map<String,String> tblProperties=getTableProperties(optionalTblProperties);
  StringBuilder ddl=new StringBuilder();
  ddl.append(String.format("CREATE EXTERNAL TABLE IF NOT EXISTS `%s`.`%s` ",dbName,tblName));
  ddl.append("( \n");
  if (isEvolutionEnabled || !destinationTableMeta.isPresent()) {
    log.info("Generating DDL using source schema");
    ddl.append(generateAvroToHiveColumnMapping(schema,Optional.of(hiveColumns),true));
  }
 else {
    log.info("Generating DDL using destination schema");
    ddl.append(generateDestinationToHiveColumnMapping(Optional.of(hiveColumns),destinationTableMeta.get()));
  }
  ddl.append(") \n");
  if (optionalPartitionDDLInfo.isPresent() && optionalPartitionDDLInfo.get().size() > 0) {
    ddl.append("PARTITIONED BY ( ");
    boolean isFirst=true;
    Map<String,String> partitionInfoMap=optionalPartitionDDLInfo.get();
    for (    Map.Entry<String,String> partitionInfo : partitionInfoMap.entrySet()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        ddl.append(", ");
      }
      ddl.append(String.format("`%s` %s",partitionInfo.getKey(),partitionInfo.getValue()));
    }
    ddl.append(" ) \n");
  }
  if (optionalClusterInfo.isPresent()) {
    if (!optionalNumOfBuckets.isPresent()) {
      throw new IllegalArgumentException(("CLUSTERED BY requested, but no NUM_BUCKETS specified"));
    }
    ddl.append("CLUSTERED BY ( ");
    boolean isFirst=true;
    for (    String clusterByCol : optionalClusterInfo.get()) {
      if (!hiveColumns.containsKey(clusterByCol)) {
        throw new IllegalArgumentException(String.format("Requested CLUSTERED BY column: %s " + "is not present in schema",clusterByCol));
      }
      if (isFirst) {
        isFirst=false;
      }
 else {
        ddl.append(", ");
      }
      ddl.append(String.format("`%s`",clusterByCol));
    }
    ddl.append(" ) ");
    if (optionalSortOrderInfo.isPresent() && optionalSortOrderInfo.get().size() > 0) {
      Map<String,COLUMN_SORT_ORDER> sortOrderInfoMap=optionalSortOrderInfo.get();
      ddl.append("SORTED BY ( ");
      isFirst=true;
      for (      Map.Entry<String,COLUMN_SORT_ORDER> sortOrderInfo : sortOrderInfoMap.entrySet()) {
        if (!hiveColumns.containsKey(sortOrderInfo.getKey())) {
          throw new IllegalArgumentException(String.format("Requested SORTED BY column: %s " + "is not present in schema",sortOrderInfo.getKey()));
        }
        if (isFirst) {
          isFirst=false;
        }
 else {
          ddl.append(", ");
        }
        ddl.append(String.format("`%s` %s",sortOrderInfo.getKey(),sortOrderInfo.getValue()));
      }
      ddl.append(" ) ");
    }
    ddl.append(String.format(" INTO %s BUCKETS %n",optionalNumOfBuckets.get()));
  }
 else {
    if (optionalSortOrderInfo.isPresent()) {
      throw new IllegalArgumentException("SORTED BY requested, but no CLUSTERED BY specified");
    }
  }
  ddl.append("ROW FORMAT SERDE \n");
  ddl.append(String.format("  '%s' %n",rowFormatSerde));
  ddl.append("STORED AS INPUTFORMAT \n");
  ddl.append(String.format("  '%s' %n",inputFormat));
  ddl.append("OUTPUTFORMAT \n");
  ddl.append(String.format("  '%s' %n",outputFormat));
  ddl.append("LOCATION \n");
  ddl.append(String.format("  '%s' %n",tblLocation));
  if (null != tblProperties && tblProperties.size() > 0) {
    ddl.append("TBLPROPERTIES ( \n");
    boolean isFirst=true;
    for (    Map.Entry<String,String> entry : tblProperties.entrySet()) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        ddl.append(", \n");
      }
      ddl.append(String.format("  '%s'='%s'",entry.getKey(),entry.getValue()));
    }
    ddl.append(") \n");
  }
  return ddl.toString();
}
