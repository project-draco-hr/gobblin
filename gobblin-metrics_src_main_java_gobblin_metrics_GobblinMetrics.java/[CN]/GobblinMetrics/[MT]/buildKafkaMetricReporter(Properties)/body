{
  if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_ENABLED))) {
    return;
  }
  LOGGER.info("Reporting metrics to Kafka");
  Optional<String> defaultTopic=Optional.fromNullable(properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC));
  Optional<String> metricsTopic=Optional.fromNullable(properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC_METRICS));
  Optional<String> eventsTopic=Optional.fromNullable(properties.getProperty(ConfigurationKeys.METRICS_KAFKA_TOPIC_EVENTS));
  boolean metricsEnabled=metricsTopic.or(defaultTopic).isPresent();
  if (metricsEnabled)   LOGGER.info("Reporting metrics to Kafka");
  boolean eventsEnabled=eventsTopic.or(defaultTopic).isPresent();
  if (eventsEnabled)   LOGGER.info("Reporting events to Kafka");
  try {
    Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_KAFKA_BROKERS),"Kafka metrics brokers missing.");
    Preconditions.checkArgument(metricsTopic.or(eventsTopic).or(defaultTopic).isPresent(),"Kafka topic missing.");
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.error("Not reporting metrics to Kafka due to missing Kafka configuration(s).",exception);
    return;
  }
  String brokers=properties.getProperty(ConfigurationKeys.METRICS_KAFKA_BROKERS);
  String reportingFormat=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_FORMAT,ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_FORMAT);
  KafkaReportingFormats formatEnum;
  try {
    formatEnum=KafkaReportingFormats.valueOf(reportingFormat.toUpperCase());
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.warn("Kafka metrics reporting format " + reportingFormat + " not recognized. Will report in json format.",exception);
    formatEnum=KafkaReportingFormats.JSON;
  }
  if (metricsEnabled) {
    try {
      formatEnum.metricReporterBuilder(properties).build(brokers,metricsTopic.or(defaultTopic).get(),properties);
    }
 catch (    IOException exception) {
      LOGGER.error("Failed to create Kafka metrics reporter. Will not report metrics to Kafka.",exception);
    }
  }
  if (eventsEnabled) {
    try {
      KafkaEventReporter.Builder<?> builder=formatEnum.eventReporterBuilder(RootMetricContext.get(),properties);
      this.scheduledReporters.add(this.codahaleReportersCloser.register(builder.build(brokers,eventsTopic.or(defaultTopic).get())));
    }
 catch (    IOException exception) {
      LOGGER.error("Failed to create Kafka events reporter. Will not report events to Kafka.",exception);
    }
  }
  LOGGER.info("Will start reporting metrics to Kafka");
}
