{
  boolean metricsEnabled=PropertiesUtils.getPropAsBoolean(properties,ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);
  if (metricsEnabled)   LOGGER.info("Reporting metrics to InfluxDB");
  boolean eventsEnabled=PropertiesUtils.getPropAsBoolean(properties,ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);
  if (eventsEnabled)   LOGGER.info("Reporting events to InfluxDB");
  if (!metricsEnabled && !eventsEnabled) {
    return;
  }
  try {
    Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),"InfluxDB database name is missing.");
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.error("Not reporting to InfluxDB due to missing InfluxDB configuration(s).",exception);
    return;
  }
  String url=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);
  String username=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);
  String password=PasswordManager.getInstance(properties).readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));
  String database=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);
  InfluxDBConnectionType connectionType;
  String type=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();
  try {
    connectionType=InfluxDBConnectionType.valueOf(type);
  }
 catch (  IllegalArgumentException exception) {
    LOGGER.warn("InfluxDB Reporter connection type " + type + " not recognized. Will use TCP for sending.",exception);
    connectionType=InfluxDBConnectionType.TCP;
  }
  if (metricsEnabled) {
    try {
      InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType).withConnection(url,username,password,database).withMetricContextName(this.metricContext.getName()).build(properties);
    }
 catch (    IOException e) {
      LOGGER.error("Failed to create InfluxDB metrics reporter. Will not report metrics to InfluxDB.",e);
    }
  }
  if (eventsEnabled) {
    String eventsDbProp=properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);
    String eventsDatabase=(eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;
    try {
      InfluxDBEventReporter eventReporter=InfluxDBEventReporter.Factory.forContext(RootMetricContext.get()).withConnectionType(connectionType).withConnection(url,username,password,eventsDatabase).build();
      this.scheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));
    }
 catch (    IOException e) {
      LOGGER.error("Failed to create InfluxDB event reporter. Will not report events to InfluxDB.",e);
    }
  }
}
