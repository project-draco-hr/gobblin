{
  if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {
    LOGGER.info("Not reporting metrics to log files");
    return;
  }
  if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {
    LOGGER.error("Not reporting metrics to log files because " + ConfigurationKeys.METRICS_LOG_DIR_KEY + " is undefined");
    return;
  }
  try {
    String fsUri=properties.getProperty(ConfigurationKeys.FS_URI_KEY,ConfigurationKeys.LOCAL_FS_URI);
    FileSystem fs=FileSystem.get(URI.create(fsUri),new Configuration());
    Path metricsLogDir=new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY),this.jobName);
    if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {
      LOGGER.error("Failed to create metric log directory for job " + this.jobName);
      return;
    }
    Path metricLogFile=new Path(metricsLogDir,this.jobId + ".metrics.log");
    boolean append=false;
    if (fs.exists(metricLogFile)) {
      LOGGER.info(String.format("Metric log file %s already exists, appending to it",metricLogFile));
      append=true;
    }
    PrintStream ps=append ? this.closer.register(new PrintStream(fs.append(metricLogFile),true,Charset.defaultCharset().name())) : this.closer.register(new PrintStream(fs.create(metricLogFile),true,Charset.defaultCharset().name()));
    this.fileReporter=Optional.of(ConsoleReporter.forRegistry(this.metricRegistry).outputTo(ps).convertRatesTo(TimeUnit.SECONDS).convertDurationsTo(TimeUnit.MILLISECONDS).build());
  }
 catch (  IOException ioe) {
    LOGGER.error("Failed to build file metric reporter for job " + this.jobId,ioe);
  }
}
