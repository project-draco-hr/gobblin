{
  List<String> results=new ArrayList<String>();
  List<String> params=cmd.getParams();
  SftpCommandType type=(SftpCommandType)cmd.getCommandType();
  if (sftp == null) {
    throw new SftpCommandFormatException("SFTP instance not initialized");
  }
switch (type) {
case CD:
    if (params.size() != 1) {
      throw new SftpCommandFormatException("CD command must have one argument");
    }
  sftp.cd(params.get(0));
break;
case CHMOD:
if (params.size() == 2) {
throw new SftpCommandFormatException("CHMOD command must have two arguments");
}
try {
sftp.chmod(Integer.parseInt(params.get(0)),params.get(1));
}
 catch (NumberFormatException e) {
throw new SftpCommandFormatException("CHMOD command passed a non-int value",e);
}
break;
case LS:
Vector<LsEntry> lsOut=new Vector<LsEntry>();
if (params.size() == 0) {
lsOut=(Vector<LsEntry>)sftp.ls("");
}
 else if (params.size() == 1) {
lsOut=(Vector<LsEntry>)sftp.ls(params.get(0));
}
 else {
throw new SftpCommandFormatException("LS command can only have max 1 argument");
}
for (LsEntry entry : lsOut) {
results.add(entry.getFilename());
}
break;
case GET_FILE:
log.error("Command get file cannnot be executed in this method as it is not a unix command");
break;
case GET_STREAM:
log.error("Command get stream cannnot be executed in this method as it is not a unix command");
break;
default :
log.error("CommandType " + type.toString() + " not recognized");
break;
}
return results;
}
