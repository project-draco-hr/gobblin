{
  int branches=jobState.getPropAsInt(ConfigurationKeys.FORK_BRANCHES_KEY,1);
  for (int i=0; i < branches; i++) {
    FileSystem fs;
    try {
      fs=FileSystem.get(URI.create(jobState.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,branches,i),ConfigurationKeys.LOCAL_FS_URI)),new Configuration());
    }
 catch (    IOException ioe) {
      LOG.error("Failed to get a file system instance",ioe);
      return;
    }
    Path relPath=new Path(jobState.getProp(ConfigurationKeys.EXTRACT_NAMESPACE_NAME_KEY).replaceAll("\\.","/"),jobState.getProp(ConfigurationKeys.SOURCE_ENTITY));
    try {
      Path taskStagingPath=new Path(jobState.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_STAGING_DIR,branches,i)),relPath);
      if (fs.exists(taskStagingPath)) {
        fs.delete(taskStagingPath,true);
      }
    }
 catch (    IOException ioe) {
      LOG.error("Failed to cleanup task staging directory of job " + jobState.getJobId(),ioe);
    }
    try {
      Path taskOutputPath=new Path(jobState.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_OUTPUT_DIR,branches,i)),relPath);
      if (fs.exists(taskOutputPath)) {
        fs.delete(taskOutputPath,true);
      }
    }
 catch (    IOException ioe) {
      LOG.error("Failed to cleanup task output directory of job " + jobState.getJobId(),ioe);
    }
  }
}
