{
  Preconditions.checkNotNull(jobProps);
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  if (Strings.isNullOrEmpty(jobName)) {
    throw new JobException("A job must have a job name specified by job.name");
  }
  String jobDisabled=jobProps.getProperty(ConfigurationKeys.JOB_DISABLED_KEY,"false");
  if (Boolean.valueOf(jobDisabled)) {
    LOG.info(String.format("Not launching job %s as it is disabled",jobName));
    return;
  }
  JobLock jobLock;
  try {
    jobLock=getJobLock(jobName,jobProps);
  }
 catch (  IOException ioe) {
    throw new JobException("Failed to get job lock for job " + jobName,ioe);
  }
  if (!tryLockJob(jobName,jobLock)) {
    LOG.info(String.format("Previous instance of job %s is still running, skipping this scheduled run",jobName));
    return;
  }
  String jobId=jobProps.getProperty(ConfigurationKeys.JOB_ID_KEY);
  if (Strings.isNullOrEmpty(jobId)) {
    jobId=JobLauncherUtils.newJobId(jobName);
    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,jobId);
  }
  JobState jobState=new JobState(jobName,jobId);
  jobState.addAll(jobProps);
  jobState.setProp(ConfigurationKeys.JOB_FAILURES_KEY,getFailureCount(jobName));
  jobState.setState(JobState.RunningState.PENDING);
  LOG.info("Starting job " + jobId);
  SourceState sourceState;
  Source<?,?> source;
  try {
    sourceState=new SourceState(jobState,getPreviousWorkUnitStates(jobName));
    source=new SourceDecorator(initSource(jobProps,sourceState),jobId,LOG);
  }
 catch (  Throwable t) {
    String errMsg="Failed to initialize the source for job " + jobId;
    LOG.error(errMsg,t);
    unlockJob(jobName,jobLock);
    throw new JobException(errMsg,t);
  }
  Optional<List<WorkUnit>> workUnits=Optional.fromNullable(source.getWorkunits(sourceState));
  if (!workUnits.isPresent()) {
    source.shutdown(sourceState);
    unlockJob(jobName,jobLock);
    throw new JobException("Failed to get work units for job " + jobId);
  }
  if (workUnits.get().isEmpty()) {
    LOG.warn("No work units have been created for job " + jobId);
    source.shutdown(sourceState);
    unlockJob(jobName,jobLock);
    return;
  }
  jobState.setTasks(workUnits.get().size());
  jobState.setStartTime(System.currentTimeMillis());
  jobState.setState(JobState.RunningState.RUNNING);
  int sequence=0;
  for (  WorkUnit workUnit : workUnits.get()) {
    if (workUnit instanceof MultiWorkUnit) {
      for (      WorkUnit innerWorkUnit : ((MultiWorkUnit)workUnit).getWorkUnits()) {
        innerWorkUnit.setProp(ConfigurationKeys.JOB_ID_KEY,jobId);
        String taskId=JobLauncherUtils.newTaskId(jobId,sequence++);
        innerWorkUnit.setId(taskId);
        innerWorkUnit.setProp(ConfigurationKeys.TASK_ID_KEY,taskId);
      }
    }
 else {
      workUnit.setProp(ConfigurationKeys.JOB_ID_KEY,jobId);
      String taskId=JobLauncherUtils.newTaskId(jobId,sequence++);
      workUnit.setId(taskId);
      workUnit.setProp(ConfigurationKeys.TASK_ID_KEY,taskId);
    }
  }
  try {
    runJob(jobName,jobProps,jobState,workUnits.get());
    if (jobState.getState() == JobState.RunningState.CANCELLED) {
      LOG.info(String.format("Job %s has been cancelled",jobId));
      return;
    }
    jobState=getFinalJobState(jobState);
    commitJob(jobId,jobState);
  }
 catch (  Throwable t) {
    String errMsg="Failed to launch job " + jobId;
    LOG.error(errMsg,t);
    jobState.setState(JobState.RunningState.FAILED);
    throw new JobException(errMsg,t);
  }
 finally {
    try {
      source.shutdown(sourceState);
      persistJobState(jobState);
      cleanupStagingData(jobState);
    }
 catch (    Throwable t) {
      LOG.error("Failed to cleanup for job " + jobId,t);
    }
    if (JobMetrics.isEnabled(this.properties)) {
      jobState.removeMetrics();
    }
    unlockJob(jobName,jobLock);
    if (Optional.fromNullable(jobListener).isPresent()) {
      jobListener.jobCompleted(jobState);
    }
  }
}
