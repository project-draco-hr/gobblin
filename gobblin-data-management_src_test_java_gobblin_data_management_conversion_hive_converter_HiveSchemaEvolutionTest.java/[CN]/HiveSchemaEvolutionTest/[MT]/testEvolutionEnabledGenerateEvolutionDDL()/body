{
  String orcStagingTableName=schemaName + "_staging";
  String orcTableName=schemaName;
  boolean isEvolutionEnabled=true;
  Optional<Table> destinationTableMeta=createEvolvedDestinationTable(schemaName,"default","",true);
  Map<String,String> hiveColumns=new HashMap<>();
  HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema,schemaName,"/tmp/dummy",Optional.<String>absent(),Optional.<Map<String,String>>absent(),Optional.<List<String>>absent(),Optional.<Map<String,HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(),Optional.<Integer>absent(),Optional.<String>absent(),Optional.<String>absent(),Optional.<String>absent(),Optional.<Map<String,String>>absent(),isEvolutionEnabled,destinationTableMeta,hiveColumns);
  String generateEvolutionDDL=HiveAvroORCQueryGenerator.generateEvolutionDDL(orcStagingTableName,orcTableName,outputSchema,isEvolutionEnabled,hiveColumns,destinationTableMeta);
  Assert.assertEquals(generateEvolutionDDL,"ALTER TABLE sourceSchema ADD COLUMNS (parentFieldRecord__nestedFieldInt int COMMENT " + "'from flatten_source parentFieldRecord.nestedFieldInt');\n","Generated evolution DDL did not match for evolution enabled");
  destinationTableMeta=Optional.absent();
  generateEvolutionDDL=HiveAvroORCQueryGenerator.generateEvolutionDDL(orcStagingTableName,orcTableName,outputSchema,isEvolutionEnabled,hiveColumns,destinationTableMeta);
  Assert.assertEquals(generateEvolutionDDL,"","Generated evolution DDL did not match for evolution enabled");
}
