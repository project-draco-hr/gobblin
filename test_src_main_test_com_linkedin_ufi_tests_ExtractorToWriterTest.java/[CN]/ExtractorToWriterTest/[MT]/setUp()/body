{
  WorkUnit workUnit=new WorkUnit(null,null);
  workUnit.setProp(SOURCE_FILE_KEY,SOURCE_FILES);
  WorkUnitState workUnitState=new WorkUnitState(workUnit);
  this.extractor=new TestExtractor(workUnitState);
  String schema=extractor.getSchema();
  File stagingDir=new File(TestConstants.TEST_STAGING_DIR);
  File outputDir=new File(TestConstants.TEST_OUTPUT_DIR);
  if (!stagingDir.exists()) {
    stagingDir.mkdirs();
  }
  if (!outputDir.exists()) {
    outputDir.mkdirs();
  }
  this.fs=FileSystem.get(new URI(TestConstants.TEST_FS_URI),new Configuration());
  Properties properties=new Properties();
  properties.setProperty(ConfigurationKeys.BUFFER_SIZE_KEY,ConfigurationKeys.DEFAULT_BUFFER_SIZE);
  properties.setProperty(ConfigurationKeys.FILE_SYSTEM_URI_KEY,TestConstants.TEST_FS_URI);
  properties.setProperty(ConfigurationKeys.STAGING_DIR_KEY,TestConstants.TEST_STAGING_DIR);
  properties.setProperty(ConfigurationKeys.OUTPUT_DIR_KEY,TestConstants.TEST_OUTPUT_DIR);
  properties.setProperty(ConfigurationKeys.FILE_NAME_KEY,TestConstants.TEST_FILE_NAME);
  SchemaConverter<String,Schema> schemaConverter=new TestSchemaConverter();
  this.schema=schemaConverter.convert(schema);
  this.writer=new DataWriterBuilderFactory().newDataWriterBuilder(WriterOutputFormat.AVRO).writeTo(Destination.of(Destination.DestinationType.HDFS,properties)).writeInFormat(WriterOutputFormat.AVRO).withWriterId(TestConstants.TEST_WRITER_ID).useDataConverter(new TestDataConverter(schemaConverter.convert(schema))).useSchemaConverter(new TestSchemaConverter()).withSourceSchema(schema).build();
  String record;
  while ((record=this.extractor.readRecord()) != null) {
    this.writer.write(record);
  }
  this.writer.close();
  this.writer.commit();
}
