{
  Preconditions.checkArgument(table.getPartitionKeysSize() == partition.getValues().size());
  Partition newPartition=createNewPartitionWithoutRegistering(table,partition,partitionLocation);
  HiveLock lock=locks.getTableLock(table.getDbName(),table.getTableName());
  lock.lock();
  try {
    try {
      Partition existingPartition=client.getPartition(table.getDbName(),table.getTableName(),partition.getValues());
      if (needToUpdatePartition(existingPartition,newPartition)) {
        client.alter_partition(table.getDbName(),table.getTableName(),newPartition);
        log.info(String.format("Updated partition %s in table %s with location %s",partition,table.getTableName(),newPartition.getSd().getLocation()));
      }
 else {
        log.info(String.format("Partition %s in table %s with location %s already exists and no need to update",partition,table.getTableName(),newPartition.getSd().getLocation()));
      }
    }
 catch (    NoSuchObjectException e) {
      client.add_partition(newPartition);
      log.info(String.format("Added partition %s to table %s with location %s",partition,table.getTableName(),newPartition.getSd().getLocation()));
    }
  }
 catch (  AlreadyExistsException e) {
  }
catch (  TException e) {
    log.error(String.format("Unable to add partition %s to table %s with location %s",partition,table.getTableName(),newPartition.getSd().getLocation()),e);
    throw e;
  }
 finally {
    lock.unlock();
  }
}
