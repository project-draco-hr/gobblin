{
  ContainerId containerId=ConverterUtils.toContainerId(System.getenv().get(ApplicationConstants.Environment.CONTAINER_ID.key()));
  ApplicationAttemptId applicationAttemptId=containerId.getApplicationAttemptId();
  String zkConnectionString=config.getString(GobblinYarnConfigurationKeys.ZK_CONNECTION_STRING_KEY);
  LOGGER.info("Using ZooKeeper connection string: " + zkConnectionString);
  String helixInstanceName=YarnHelixUtils.getHelixInstanceName(YarnHelixUtils.getHostname(),containerId);
  this.helixManager=HelixManagerFactory.getZKHelixManager(config.getString(GobblinYarnConfigurationKeys.HELIX_CLUSTER_NAME_KEY),helixInstanceName,InstanceType.CONTROLLER,zkConnectionString);
  FileSystem fs=config.hasPath(ConfigurationKeys.FS_URI_KEY) ? FileSystem.get(URI.create(config.getString(ConfigurationKeys.FS_URI_KEY)),new Configuration()) : FileSystem.get(new Configuration());
  Path appWorkDir=YarnHelixUtils.getAppWorkDirPath(fs,applicationName,applicationAttemptId.getApplicationId());
  List<Service> services=Lists.newArrayList();
  if (UserGroupInformation.isSecurityEnabled()) {
    LOGGER.info("Adding YarnContainerSecurityManager since security is enabled");
    services.add(new YarnContainerSecurityManager(config,fs,this.eventBus));
  }
  services.add(new YarnService(config,applicationName,applicationAttemptId.getApplicationId(),fs,this.eventBus,Strings.nullToEmpty(config.getString(GobblinYarnConfigurationKeys.CONTAINER_JVM_ARGS_KEY))));
  services.add(new GobblinHelixJobScheduler(YarnHelixUtils.configToProperties(config),this.helixManager,this.eventBus,appWorkDir));
  services.add(new JobConfigurationManager(this.eventBus,config.hasPath(GobblinYarnConfigurationKeys.JOB_CONF_PACKAGE_PATH_KEY) ? Optional.of(config.getString(GobblinYarnConfigurationKeys.JOB_CONF_PACKAGE_PATH_KEY)) : Optional.<String>absent()));
  this.serviceManager=new ServiceManager(services);
  List<Tag<?>> tags=ImmutableList.<Tag<?>>builder().add(new Tag<String>(GobblinYarnMetricTagNames.YARN_APPLICATION_NAME,applicationName)).add(new Tag<String>(GobblinYarnMetricTagNames.YARN_APPLICATION_ID,applicationAttemptId.getApplicationId().toString())).add(new Tag<String>(GobblinYarnMetricTagNames.CONTAINER_ID,containerId.toString())).add(new Tag<String>(GobblinYarnMetricTagNames.HELIX_INSTANCE_NAME,helixInstanceName)).build();
  this.metricContext=MetricContext.builder(GobblinApplicationMaster.class.getSimpleName()).addTags(tags).build();
  this.jmxReporter=JmxReporter.forRegistry(this.metricContext).convertRatesTo(TimeUnit.SECONDS).convertDurationsTo(TimeUnit.MILLISECONDS).build();
}
