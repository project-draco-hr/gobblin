{
  Properties properties=TestTrash.propertiesForTestTrash();
  TestTrash.simulateDelay(properties,2);
  FileSystem fs=mock(FileSystem.class);
  AsyncTrash trash=new AsyncTrash(fs,properties);
  for (int i=0; i < 5; i++) {
    trash.moveToTrash(new Path("file" + i));
    Thread.sleep(10);
  }
  for (int i=0; i < 5; i++) {
    trash.moveToTrashAsUser(new Path("file" + i),"user" + i);
    Thread.sleep(10);
  }
  int maxWaits=5;
  while (maxWaits > 0 && ((TestTrash)trash.getDecoratedObject()).getOperationsWaiting() < 10) {
    Thread.sleep(100);
    maxWaits--;
  }
  Assert.assertTrue(((TestTrash)trash.getDecoratedObject()).getDeleteOperations().isEmpty());
  ((TestTrash)trash.getDecoratedObject()).tick();
  Assert.assertTrue(((TestTrash)trash.getDecoratedObject()).getDeleteOperations().isEmpty());
  ((TestTrash)trash.getDecoratedObject()).tick();
  Assert.assertTrue(((TestTrash)trash.getDecoratedObject()).getDeleteOperations().size() > 8);
  ((TestTrash)trash.getDecoratedObject()).tick();
  ((TestTrash)trash.getDecoratedObject()).tick();
  ((TestTrash)trash.getDecoratedObject()).tick();
  ((TestTrash)trash.getDecoratedObject()).tick();
  Assert.assertEquals(((TestTrash)trash.getDecoratedObject()).getDeleteOperations().size(),10);
}
