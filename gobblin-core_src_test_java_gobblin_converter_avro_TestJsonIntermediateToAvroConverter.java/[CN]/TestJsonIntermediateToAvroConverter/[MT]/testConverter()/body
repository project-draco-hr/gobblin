{
  JsonIntermediateToAvroConverter converter=new JsonIntermediateToAvroConverter();
  converter.init(new WorkUnitState());
  Schema avroSchema=converter.convertSchema(jsonSchema,state);
  GenericRecord record=converter.convertRecord(avroSchema,jsonRecord,state).iterator().next();
  Assert.assertEquals(jsonRecord.get("Id").getAsString(),record.get("Id").toString());
  Assert.assertEquals(jsonRecord.get("IsDeleted").getAsBoolean(),record.get("IsDeleted"));
  if (!(record.get("Salutation") instanceof GenericArray)) {
    Assert.fail("expected array, found " + record.get("Salutation").getClass().getName());
  }
  if (!(record.get("MapAccount") instanceof Map)) {
    Assert.fail("expected map, found " + record.get("MapAccount").getClass().getName());
  }
  Assert.assertEquals(jsonRecord.get("Industry").getAsString(),record.get("Industry").toString());
  DateTimeFormatter format=DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss").withZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("PST")));
  Assert.assertEquals(jsonRecord.get("LastModifiedDate").getAsString(),new DateTime(record.get("LastModifiedDate")).toString(format));
  Assert.assertEquals(jsonRecord.get("date_type").getAsString(),new DateTime(record.get("date_type")).toString(format));
  format=DateTimeFormat.forPattern("HH:mm:ss").withZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone("PST")));
  Assert.assertEquals(jsonRecord.get("time_type").getAsString(),new DateTime(record.get("time_type")).toString(format));
  Assert.assertEquals(jsonRecord.get("bytes_type").getAsString().getBytes(),((ByteBuffer)record.get("bytes_type")).array());
  Assert.assertEquals(jsonRecord.get("int_type").getAsInt(),record.get("int_type"));
  Assert.assertEquals(jsonRecord.get("long_type").getAsLong(),record.get("long_type"));
  Assert.assertEquals(jsonRecord.get("float_type").getAsFloat(),record.get("float_type"));
  Assert.assertEquals(jsonRecord.get("double_type").getAsDouble(),record.get("double_type"));
  state.setProp(ConfigurationKeys.CONVERTER_AVRO_DATE_TIMEZONE,"EST");
  avroSchema=converter.convertSchema(jsonSchema,state);
  GenericRecord record2=converter.convertRecord(avroSchema,jsonRecord,state).iterator().next();
  Assert.assertNotEquals(record.get("LastModifiedDate"),record2.get("LastModifiedDate"));
}
