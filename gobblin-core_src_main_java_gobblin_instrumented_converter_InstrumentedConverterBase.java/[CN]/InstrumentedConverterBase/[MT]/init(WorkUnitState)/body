{
  Converter<SI,SO,DI,DO> converter=super.init(workUnit);
  this.metricContext=closer.register(Instrumented.getMetricContext(workUnit,this.getClass()));
  this.recordsIn=this.metricContext.contextAwareMeter("gobblin.converter.records.in");
  this.recordsOut=this.metricContext.contextAwareMeter("gobblin.converter.records.out");
  this.recordsException=this.metricContext.contextAwareMeter("gobblin.converter.records.failed");
  this.converterTimer=this.metricContext.contextAwareTimer("gobblin.converter.conversion.time");
  return converter;
}
