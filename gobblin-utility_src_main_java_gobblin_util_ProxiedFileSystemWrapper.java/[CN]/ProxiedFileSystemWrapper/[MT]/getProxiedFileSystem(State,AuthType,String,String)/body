{
  Preconditions.checkArgument(StringUtils.isNotBlank(properties.getProp(ConfigurationKeys.FS_PROXY_AS_USER_NAME)),"State does not contain a proper proxy user name");
  String proxyUserName=properties.getProp(ConfigurationKeys.FS_PROXY_AS_USER_NAME);
  UserGroupInformation proxyUser;
switch (authType) {
case KEYTAB:
    Preconditions.checkArgument(StringUtils.isNotBlank(properties.getProp(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS)),"State does not contain a proper proxy token file name");
  String superUser=properties.getProp(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS);
UserGroupInformation.loginUserFromKeytab(superUser,authPath);
proxyUser=UserGroupInformation.createProxyUser(proxyUserName,UserGroupInformation.getLoginUser());
break;
case TOKEN:
proxyUser=UserGroupInformation.createProxyUser(proxyUserName,UserGroupInformation.getLoginUser());
Optional<Token> proxyToken=this.getTokenFromSeqFile(authPath,proxyUserName);
if (proxyToken.isPresent()) {
proxyUser.addToken(proxyToken.get());
}
 else {
LOG.warn("No delegation token found for the current proxy user.");
}
break;
default :
LOG.warn("Creating a proxy user without authentication, which could not perform File system operations.");
proxyUser=UserGroupInformation.createProxyUser(proxyUserName,UserGroupInformation.getLoginUser());
break;
}
final Configuration conf=new Configuration();
JobConfigurationUtils.putStateIntoConfiguration(properties,conf);
final URI fsURI=URI.create(uri);
proxyUser.doAs(new PrivilegedExceptionAction<Void>(){
@Override public Void run() throws IOException {
LOG.debug("Now performing file system operations as :" + UserGroupInformation.getCurrentUser());
proxiedFs=FileSystem.get(fsURI,conf);
return null;
}
}
);
return this.proxiedFs;
}
