{
  Properties jobProps=loadJobProps();
  jobProps.setProperty(ConfigurationKeys.JOB_NAME_KEY,jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY) + "-testLaunchJobWithFork");
  jobProps.setProperty(ConfigurationKeys.CONVERTER_CLASSES_KEY,"gobblin.test.TestConverter2");
  jobProps.setProperty(ConfigurationKeys.FORK_BRANCHES_KEY,"2");
  jobProps.setProperty(ConfigurationKeys.ROW_LEVEL_POLICY_LIST + ".0","gobblin.policies.schema.SchemaRowCheckPolicy");
  jobProps.setProperty(ConfigurationKeys.ROW_LEVEL_POLICY_LIST + ".1","gobblin.policies.schema.SchemaRowCheckPolicy");
  jobProps.setProperty(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE + ".0","OPTIONAL");
  jobProps.setProperty(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE + ".1","OPTIONAL");
  jobProps.setProperty(ConfigurationKeys.TASK_LEVEL_POLICY_LIST + ".0","gobblin.policies.count.RowCountPolicy,gobblin.policies.schema.SchemaCompatibilityPolicy");
  jobProps.setProperty(ConfigurationKeys.TASK_LEVEL_POLICY_LIST + ".1","gobblin.policies.count.RowCountPolicy,gobblin.policies.schema.SchemaCompatibilityPolicy");
  jobProps.setProperty(ConfigurationKeys.TASK_LEVEL_POLICY_LIST_TYPE + ".0","OPTIONAL,OPTIONAL");
  jobProps.setProperty(ConfigurationKeys.TASK_LEVEL_POLICY_LIST_TYPE + ".1","OPTIONAL,OPTIONAL");
  jobProps.setProperty(ConfigurationKeys.WRITER_OUTPUT_FORMAT_KEY + ".0",WriterOutputFormat.AVRO.name());
  jobProps.setProperty(ConfigurationKeys.WRITER_OUTPUT_FORMAT_KEY + ".1",WriterOutputFormat.AVRO.name());
  jobProps.setProperty(ConfigurationKeys.WRITER_DESTINATION_TYPE_KEY + ".0",Destination.DestinationType.HDFS.name());
  jobProps.setProperty(ConfigurationKeys.WRITER_DESTINATION_TYPE_KEY + ".1",Destination.DestinationType.HDFS.name());
  jobProps.setProperty(ConfigurationKeys.WRITER_STAGING_DIR + ".0",jobProps.getProperty(ConfigurationKeys.WRITER_STAGING_DIR));
  jobProps.setProperty(ConfigurationKeys.WRITER_STAGING_DIR + ".1",jobProps.getProperty(ConfigurationKeys.WRITER_STAGING_DIR));
  jobProps.setProperty(ConfigurationKeys.WRITER_OUTPUT_DIR + ".0",jobProps.getProperty(ConfigurationKeys.WRITER_OUTPUT_DIR));
  jobProps.setProperty(ConfigurationKeys.WRITER_OUTPUT_DIR + ".1",jobProps.getProperty(ConfigurationKeys.WRITER_OUTPUT_DIR));
  jobProps.setProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR + ".0",jobProps.getProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR));
  jobProps.setProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR + ".1",jobProps.getProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR));
  try {
    this.jobLauncherTestHelper.runTestWithFork(jobProps);
  }
  finally {
    this.jobLauncherTestHelper.deleteStateStore(jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY));
  }
}
