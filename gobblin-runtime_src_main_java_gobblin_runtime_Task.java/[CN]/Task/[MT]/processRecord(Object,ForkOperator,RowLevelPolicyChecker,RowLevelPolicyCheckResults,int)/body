{
  if (!rowChecker.executePolicies(convertedRecord,rowResults)) {
    return;
  }
  List<Boolean> forkedRecords=forkOperator.forkDataRecord(this.taskState,convertedRecord);
  if (forkedRecords.size() != branches) {
    throw new ForkBranchMismatchException(String.format("Number of forked data records [%d] is not equal to number of branches [%d]",forkedRecords.size(),branches));
  }
  if (inMultipleBranches(forkedRecords) && !(convertedRecord instanceof Copyable)) {
    throw new CopyNotSupportedException(convertedRecord + " is not copyable");
  }
  boolean allPutsSucceeded=false;
  boolean[] succeededPuts=new boolean[branches];
  while (!allPutsSucceeded) {
    allPutsSucceeded=true;
    int branch=0;
    for (    Optional<Fork> fork : this.forks.keySet()) {
      if (succeededPuts[branch]) {
        branch++;
        continue;
      }
      if (fork.isPresent() && forkedRecords.get(branch)) {
        boolean succeeded=fork.get().putRecord(convertedRecord instanceof Copyable ? ((Copyable)convertedRecord).copy() : convertedRecord);
        succeededPuts[branch]=succeeded;
        if (!succeeded) {
          allPutsSucceeded=false;
        }
      }
 else {
        succeededPuts[branch]=true;
      }
      branch++;
    }
  }
}
