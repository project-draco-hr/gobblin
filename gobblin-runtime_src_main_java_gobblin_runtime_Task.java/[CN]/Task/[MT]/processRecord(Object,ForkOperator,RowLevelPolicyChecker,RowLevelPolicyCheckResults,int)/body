{
  if (!rowChecker.executePolicies(convertedRecord,rowResults)) {
    return;
  }
  List<Boolean> forkedRecords=forkOperator.forkDataRecord(this.taskState,convertedRecord);
  if (forkedRecords.size() != branches) {
    throw new ForkBranchMismatchException(String.format("Number of forked data records [%d] is not equal to number of branches [%d]",forkedRecords.size(),branches));
  }
  boolean makesCopy=inMultipleBranches(forkedRecords);
  if (makesCopy && !(convertedRecord instanceof Copyable)) {
    throw new CopyNotSupportedException(convertedRecord + " is not copyable");
  }
  boolean allPutsSucceeded=false;
  boolean[] succeededPuts=new boolean[branches];
  while (!allPutsSucceeded) {
    allPutsSucceeded=true;
    for (int i=0; i < branches && !succeededPuts[i]; i++) {
      if (this.forks.get(i).isPresent() && forkedRecords.get(i)) {
        boolean succeeded=this.forks.get(i).get().putRecord(makesCopy ? ((Copyable)convertedRecord).copy() : convertedRecord);
        succeededPuts[i]=succeeded;
        if (!succeeded) {
          allPutsSucceeded=false;
        }
      }
 else {
        succeededPuts[i]=true;
      }
    }
  }
}
