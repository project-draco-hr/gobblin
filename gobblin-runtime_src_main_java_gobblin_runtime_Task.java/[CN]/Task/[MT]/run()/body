{
  long startTime=System.currentTimeMillis();
  this.taskState.setStartTime(startTime);
  this.taskState.setWorkingState(WorkUnitState.WorkingState.RUNNING);
  this.forks.clear();
  Closer closer=Closer.create();
  try {
    InstrumentedExtractorBase extractor=closer.register(new InstrumentedExtractorDecorator(this.taskState,this.taskContext.getExtractor()));
    Converter converter=closer.register(new MultiConverter(this.taskContext.getConverters()));
    ForkOperator forkOperator=closer.register(this.taskContext.getForkOperator());
    forkOperator.init(this.taskState);
    int branches=forkOperator.getBranches(this.taskState);
    this.taskState.setProp(ConfigurationKeys.FORK_BRANCHES_KEY,branches);
    Object schema=converter.convertSchema(extractor.getSchema(),this.taskState);
    List<Boolean> forkedSchemas=forkOperator.forkSchema(this.taskState,schema);
    if (forkedSchemas.size() != branches) {
      throw new ForkBranchMismatchException(String.format("Number of forked schemas [%d] is not equal to number of branches [%d]",forkedSchemas.size(),branches));
    }
    if (inMultipleBranches(forkedSchemas) && !(schema instanceof Copyable)) {
      throw new CopyNotSupportedException(schema + " is not copyable");
    }
    CountDownLatch forkCountDownLatch=new CountDownLatch(branches);
    for (int i=0; i < branches; i++) {
      if (forkedSchemas.get(i)) {
        Fork fork=closer.register(new Fork(this.taskContext,this.taskState,schema instanceof Copyable ? ((Copyable)schema).copy() : schema,branches,i,forkCountDownLatch));
        this.taskExecutor.submit(fork);
        this.forks.add(Optional.of(fork));
      }
 else {
        this.forks.add(Optional.<Fork>absent());
      }
    }
    RowLevelPolicyChecker rowChecker=closer.register(this.taskContext.getRowLevelPolicyChecker());
    RowLevelPolicyCheckResults rowResults=new RowLevelPolicyCheckResults();
    long recordsPulled=0;
    Object record;
    while ((record=extractor.readRecord(null)) != null) {
      recordsPulled++;
      for (      Object convertedRecord : converter.convertRecord(schema,record,this.taskState)) {
        processRecord(convertedRecord,forkOperator,rowChecker,rowResults,branches);
      }
    }
    LOG.info("Extracted " + recordsPulled + " data records");
    LOG.info("Row quality checker finished with results: " + rowResults.getResults());
    this.taskState.setProp(ConfigurationKeys.EXTRACTOR_ROWS_EXTRACTED,recordsPulled);
    this.taskState.setProp(ConfigurationKeys.EXTRACTOR_ROWS_EXPECTED,extractor.getExpectedRecordCount());
    for (    Optional<Fork> fork : this.forks) {
      if (fork.isPresent()) {
        fork.get().markParentTaskDone();
      }
 else {
        forkCountDownLatch.countDown();
      }
    }
    forkCountDownLatch.await();
    boolean allForksSucceeded=true;
    for (    Optional<Fork> fork : this.forks) {
      if (fork.isPresent()) {
        if (fork.get().isSucceeded()) {
          if (!fork.get().commit()) {
            allForksSucceeded=false;
          }
        }
 else {
          allForksSucceeded=false;
        }
      }
    }
    if (allForksSucceeded) {
      this.taskState.setWorkingState(WorkUnitState.WorkingState.SUCCESSFUL);
    }
 else {
      LOG.error(String.format("Not all forks of task %s succeeded",this.taskId));
      this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
    }
    addConstructsFinalStateToTaskState(extractor,converter);
  }
 catch (  Throwable t) {
    LOG.error(String.format("Task %s failed",this.taskId),t);
    this.taskState.setWorkingState(WorkUnitState.WorkingState.FAILED);
    this.taskState.setProp(ConfigurationKeys.TASK_FAILURE_EXCEPTION_KEY,t.toString());
  }
 finally {
    try {
      closer.close();
    }
 catch (    Throwable t) {
      LOG.error("Failed to close all open resources",t);
    }
    long endTime=System.currentTimeMillis();
    this.taskState.setEndTime(endTime);
    this.taskState.setTaskDuration(endTime - startTime);
    this.taskStateTracker.onTaskCompletion(this);
  }
}
