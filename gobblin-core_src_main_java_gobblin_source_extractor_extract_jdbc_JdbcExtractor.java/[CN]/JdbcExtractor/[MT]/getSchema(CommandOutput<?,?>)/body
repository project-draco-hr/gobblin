{
  this.log.debug("Extract schema from resultset");
  ResultSet resultset=null;
  Iterator<ResultSet> itr=(Iterator<ResultSet>)response.getResults().values().iterator();
  if (itr.hasNext()) {
    resultset=itr.next();
  }
 else {
    throw new SchemaException("Failed to get schema from Mysql - Resultset has no records");
  }
  JsonArray fieldJsonArray=new JsonArray();
  try {
    while (resultset.next()) {
      Schema schema=new Schema();
      String columnName=resultset.getString(1);
      schema.setColumnName(columnName);
      String dataType=resultset.getString(2);
      String elementDataType="string";
      List<String> mapSymbols=null;
      JsonObject newDataType=this.convertDataType(columnName,dataType,elementDataType,mapSymbols);
      schema.setDataType(newDataType);
      schema.setLength(resultset.getLong(3));
      schema.setPrecision(resultset.getInt(4));
      schema.setScale(resultset.getInt(5));
      schema.setNullable(resultset.getBoolean(6));
      schema.setFormat(resultset.getString(7));
      schema.setComment(resultset.getString(8));
      schema.setDefaultValue(null);
      schema.setUnique(false);
      String jsonStr=gson.toJson(schema);
      JsonObject obj=gson.fromJson(jsonStr,JsonObject.class).getAsJsonObject();
      fieldJsonArray.add(obj);
    }
  }
 catch (  Exception e) {
    throw new SchemaException("Failed to get schema from Mysql; error - " + e.getMessage(),e);
  }
  return fieldJsonArray;
}
