{
  String strDelimiter=workUnit.getProp(ConfigurationKeys.CONVERTER_CSV_TO_JSON_DELIMITER);
  if (StringUtils.isBlank(strDelimiter))   throw new DataConversionException("Delimiter cannot be empty",null);
  InputStreamCSVReader reader=new InputStreamCSVReader(inputRecord,strDelimiter.charAt(0),workUnit.getProp(ConfigurationKeys.CONVERTER_CSV_TO_JSON_ENCLOSEDCHAR,ConfigurationKeys.DEFAULT_CONVERTER_CSV_TO_JSON_ENCLOSEDCHAR).charAt(0));
  List<String> recordSplit;
  try {
    recordSplit=Lists.newArrayList(reader.splitRecord());
  }
 catch (  IOException e) {
    throw new DataConversionException(e);
  }
  JsonObject outputRecord=new JsonObject();
  for (int i=0; i < outputSchema.size(); i++) {
    if (i < recordSplit.size()) {
      if (recordSplit.get(i) == null) {
        outputRecord.add(outputSchema.get(i).getAsJsonObject().get("columnName").getAsString(),JsonNull.INSTANCE);
      }
 else       if (recordSplit.get(i).isEmpty() || recordSplit.get(i).toLowerCase().equals(NULL)) {
        outputRecord.add(outputSchema.get(i).getAsJsonObject().get("columnName").getAsString(),JsonNull.INSTANCE);
      }
 else {
        outputRecord.addProperty(outputSchema.get(i).getAsJsonObject().get("columnName").getAsString(),recordSplit.get(i));
      }
    }
 else {
      outputRecord.add(outputSchema.get(i).getAsJsonObject().get("columnName").getAsString(),JsonNull.INSTANCE);
    }
  }
  return new SingleRecordIterable<JsonObject>(outputRecord);
}
