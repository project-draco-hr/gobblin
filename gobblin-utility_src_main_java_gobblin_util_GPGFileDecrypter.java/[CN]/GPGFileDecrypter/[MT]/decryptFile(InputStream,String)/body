{
  if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
    Security.addProvider(new BouncyCastleProvider());
  }
  inputStream=PGPUtil.getDecoderStream(inputStream);
  JcaPGPObjectFactory pgpF=new JcaPGPObjectFactory(inputStream);
  PGPEncryptedDataList enc;
  Object pgpfObject=pgpF.nextObject();
  if (pgpfObject instanceof PGPEncryptedDataList) {
    enc=(PGPEncryptedDataList)pgpfObject;
  }
 else {
    enc=(PGPEncryptedDataList)pgpF.nextObject();
  }
  PGPPBEEncryptedData pbe=(PGPPBEEncryptedData)enc.get(0);
  InputStream clear;
  try {
    clear=pbe.getDataStream(new JcePBEDataDecryptorFactoryBuilder(new JcaPGPDigestCalculatorProviderBuilder().setProvider(BouncyCastleProvider.PROVIDER_NAME).build()).setProvider(BouncyCastleProvider.PROVIDER_NAME).build(passPhrase.toCharArray()));
    JcaPGPObjectFactory pgpFact=new JcaPGPObjectFactory(clear);
    pgpfObject=pgpFact.nextObject();
    if (pgpfObject instanceof PGPCompressedData) {
      PGPCompressedData cData=(PGPCompressedData)pgpfObject;
      pgpFact=new JcaPGPObjectFactory(cData.getDataStream());
      pgpfObject=pgpFact.nextObject();
    }
    PGPLiteralData ld=(PGPLiteralData)pgpfObject;
    return StreamUtils.convertStream(ld.getInputStream());
  }
 catch (  PGPException e) {
    throw new IOException(e);
  }
}
