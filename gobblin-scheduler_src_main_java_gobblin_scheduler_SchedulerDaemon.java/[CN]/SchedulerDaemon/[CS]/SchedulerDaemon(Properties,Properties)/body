{
  Properties properties=new Properties();
  properties.putAll(defaultProperties);
  properties.putAll(customProperties);
  List<Service> services=Lists.<Service>newArrayList(new JobScheduler(properties));
  boolean jobExecInfoServerEnabled=Boolean.valueOf(properties.getProperty(ConfigurationKeys.JOB_EXECINFO_SERVER_ENABLED_KEY,Boolean.FALSE.toString()));
  boolean adminUiServerEnabled=Boolean.valueOf(properties.getProperty(ConfigurationKeys.ADMIN_SERVER_ENABLED_KEY,Boolean.FALSE.toString()));
  if (jobExecInfoServerEnabled) {
    LOG.info("Starting the job execution info server since it is enabled");
    JobExecutionInfoServer executionInfoServer=new JobExecutionInfoServer(properties);
    services.add(executionInfoServer);
    if (adminUiServerEnabled) {
      LOG.info("Starting the admin UI server since it is enabled");
      services.add(new AdminWebServer(properties,executionInfoServer.getServerUri()));
    }
  }
 else   if (adminUiServerEnabled) {
    LOG.warn("NOT starting the admin UI because the job execution info server is NOT enabled");
  }
  this.serviceManager=new ServiceManager(services);
}
