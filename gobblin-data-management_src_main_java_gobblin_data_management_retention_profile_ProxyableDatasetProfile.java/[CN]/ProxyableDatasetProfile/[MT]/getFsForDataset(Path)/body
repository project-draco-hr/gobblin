{
  Preconditions.checkArgument(this.props.containsKey(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS));
  Preconditions.checkArgument(this.props.containsKey(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION));
  FileSystem proxiedFileSystem=fs;
  try {
    proxiedFileSystem=ProxiedFileSystemCache.getProxiedFileSystemUsingKeytab(this.fs.getFileStatus(path).getOwner(),this.props.getProperty(ConfigurationKeys.SUPER_USER_NAME_TO_PROXY_AS_OTHERS),new Path(this.props.getProperty(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION)),this.fs.getUri(),this.fs.getConf());
  }
 catch (  ExecutionException e) {
    throw new IOException("Cannot get proxied filesystem at Path: " + path,e);
  }
  if (props.contains(DatasetCleaner.DATASET_CLEAN_HDFS_CALLS_PER_SECOND_LIMIT)) {
    return new RateControlledFileSystem(proxiedFileSystem,Long.parseLong(props.getProperty(DatasetCleaner.DATASET_CLEAN_HDFS_CALLS_PER_SECOND_LIMIT)));
  }
 else {
    return proxiedFileSystem;
  }
}
