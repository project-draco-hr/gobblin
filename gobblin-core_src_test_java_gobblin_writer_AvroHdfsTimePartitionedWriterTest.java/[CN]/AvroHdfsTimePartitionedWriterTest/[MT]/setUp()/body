{
  File stagingDir=new File(STAGING_DIR);
  File outputDir=new File(OUTPUT_DIR);
  if (!stagingDir.exists()) {
    stagingDir.mkdirs();
  }
 else {
    FileUtils.deleteDirectory(stagingDir);
  }
  if (!outputDir.exists()) {
    outputDir.mkdirs();
  }
 else {
    FileUtils.deleteDirectory(outputDir);
  }
  this.schema=new Schema.Parser().parse(AVRO_SCHEMA);
  State properties=new State();
  properties.setProp(ConfigurationKeys.WRITER_PARTITION_COLUMN_NAME,PARTITION_COLUMN_NAME);
  properties.setProp(ConfigurationKeys.WRITER_BUFFER_SIZE,ConfigurationKeys.DEFAULT_BUFFER_SIZE);
  properties.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,ConfigurationKeys.LOCAL_FS_URI);
  properties.setProp(ConfigurationKeys.WRITER_STAGING_DIR,STAGING_DIR);
  properties.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR,OUTPUT_DIR);
  properties.setProp(ConfigurationKeys.WRITER_FILE_PATH,BASE_FILE_PATH);
  properties.setProp(ConfigurationKeys.WRITER_FILE_NAME,FILE_NAME);
  this.writer=new AvroTimePartitionedWriterBuilder().writeTo(Destination.of(Destination.DestinationType.HDFS,properties)).writeInFormat(WriterOutputFormat.AVRO).withWriterId(WRITER_ID).withSchema(this.schema).forBranch(-1).build();
}
