{
  int randomId=RAND.nextInt(Integer.MAX_VALUE);
  Constructs construct=null;
  if (Converter.class.isAssignableFrom(klazz)) {
    construct=Constructs.CONVERTER;
  }
 else   if (ForkOperator.class.isAssignableFrom(klazz)) {
    construct=Constructs.FORK_OPERATOR;
  }
 else   if (RowLevelPolicy.class.isAssignableFrom(klazz)) {
    construct=Constructs.ROW_QUALITY_CHECKER;
  }
 else   if (Extractor.class.isAssignableFrom(klazz)) {
    construct=Constructs.EXTRACTOR;
  }
 else   if (DataWriter.class.isAssignableFrom(klazz)) {
    construct=Constructs.WRITER;
  }
  List<Tag<?>> generatedTags=Lists.newArrayList();
  if (construct != null) {
    generatedTags.add(new Tag<>("construct",construct.toString()));
  }
  if (!klazz.isAnonymousClass()) {
    generatedTags.add(new Tag<>("class",klazz.getCanonicalName()));
  }
  Optional<GobblinMetrics> gobblinMetrics=state.contains(METRIC_CONTEXT_NAME_KEY) ? GobblinMetricsRegistry.getInstance().get(state.getProp(METRIC_CONTEXT_NAME_KEY)) : Optional.<GobblinMetrics>absent();
  MetricContext.Builder builder=gobblinMetrics.isPresent() ? gobblinMetrics.get().getMetricContext().childBuilder(klazz.getCanonicalName() + "." + randomId) : MetricContext.builder(klazz.getCanonicalName() + "." + randomId);
  return builder.addTags(generatedTags).addTags(tags).build();
}
