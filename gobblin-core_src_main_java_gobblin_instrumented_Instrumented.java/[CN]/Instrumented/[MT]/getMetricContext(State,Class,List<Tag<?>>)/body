{
  int randomId=(new Random()).nextInt();
  String component="unknown";
  if (Converter.class.isAssignableFrom(klazz)) {
    component="converter";
  }
 else   if (ForkOperator.class.isAssignableFrom(klazz)) {
    component="forkOperator";
  }
 else   if (RowLevelPolicy.class.isAssignableFrom(klazz)) {
    component="rowLevelPolicy";
  }
 else   if (Extractor.class.isAssignableFrom(klazz)) {
    component="extractor";
  }
 else   if (DataWriter.class.isAssignableFrom(klazz)) {
    component="writer";
  }
  Tag<String> componentTag=new Tag<String>("component",component);
  Tag<String> classTag=new Tag<String>("class",klazz.getCanonicalName());
  GobblinMetrics gobblinMetrics;
  MetricContext.Builder builder=state.contains(METRIC_CONTEXT_NAME_KEY) && (gobblinMetrics=GobblinMetricsRegistry.getInstance().get(state.getProp(METRIC_CONTEXT_NAME_KEY))) != null ? gobblinMetrics.getMetricContext().childBuilder(klazz.getCanonicalName() + "." + randomId) : MetricContext.builder(klazz.getCanonicalName() + "." + randomId);
  return builder.addTag(componentTag).addTag(classTag).addTags(tags).build();
}
