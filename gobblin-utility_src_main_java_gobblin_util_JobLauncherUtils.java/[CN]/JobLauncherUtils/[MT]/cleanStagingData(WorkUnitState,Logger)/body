{
  int branches=state.getPropAsInt(ConfigurationKeys.FORK_BRANCHES_KEY,1);
  for (int i=0; i < branches; i++) {
    String writerFsUri=state.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,branches,i),ConfigurationKeys.LOCAL_FS_URI);
    FileSystem fs=FileSystem.get(URI.create(writerFsUri),new Configuration());
    String writerFilePath=state.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_PATH,branches,i));
    if (Strings.isNullOrEmpty(writerFilePath)) {
      writerFilePath=state.getExtract().getOutputFilePath() + Path.SEPARATOR + ForkOperatorUtils.getBranchName(state,i,ConfigurationKeys.DEFAULT_FORK_BRANCH_NAME + i);
    }
    String stagingDirKey=ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_STAGING_DIR,branches,i);
    if (state.contains(stagingDirKey)) {
      Path stagingPath=new Path(state.getProp(stagingDirKey),writerFilePath);
      if (fs.exists(stagingPath)) {
        logger.info("Cleaning up staging directory " + stagingPath.toUri().getPath());
        fs.delete(stagingPath,true);
      }
    }
    String outputDirKey=ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_OUTPUT_DIR,branches,i);
    if (state.contains(outputDirKey)) {
      Path outputPath=new Path(state.getProp(outputDirKey),writerFilePath);
      if (fs.exists(outputPath)) {
        logger.info("Cleaning up output directory " + outputPath.toUri().getPath());
        fs.delete(outputPath,true);
      }
    }
  }
}
