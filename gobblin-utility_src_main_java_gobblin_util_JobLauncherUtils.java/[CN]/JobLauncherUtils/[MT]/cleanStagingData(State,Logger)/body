{
  int numBranches=state.getPropAsInt(ConfigurationKeys.FORK_BRANCHES_KEY,1);
  for (int branchId=0; branchId < numBranches; branchId++) {
    String writerFsUri=state.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,numBranches,branchId),ConfigurationKeys.LOCAL_FS_URI);
    FileSystem fs;
    if (state.getPropAsBoolean(ConfigurationKeys.SHOULD_FS_PROXY_AS_USER,ConfigurationKeys.DEFAULT_SHOULD_FS_PROXY_AS_USER)) {
      try {
        fs=new ProxiedFileSystemWrapper().getProxiedFileSystem(state,ProxiedFileSystemWrapper.AuthType.KEYTAB,state.getProp(ConfigurationKeys.SUPER_USER_KEY_TAB_LOCATION),writerFsUri);
      }
 catch (      InterruptedException e) {
        throw new IOException(e);
      }
catch (      URISyntaxException e) {
        throw new IOException(e);
      }
    }
 else {
      fs=FileSystem.get(URI.create(writerFsUri),new Configuration());
    }
    Path stagingPath=WriterUtils.getWriterStagingDir(state,numBranches,branchId);
    if (fs.exists(stagingPath)) {
      logger.info("Cleaning up staging directory " + stagingPath.toUri().getPath());
      if (!fs.delete(stagingPath,true)) {
        throw new IOException("Clean up staging directory " + stagingPath.toUri().getPath() + " failed");
      }
    }
    Path outputPath=WriterUtils.getWriterOutputDir(state,numBranches,branchId);
    if (fs.exists(outputPath)) {
      logger.info("Cleaning up output directory " + outputPath.toUri().getPath());
      if (!fs.delete(outputPath,true)) {
        throw new IOException("Clean up output directory " + outputPath.toUri().getPath() + " failed");
      }
    }
  }
}
