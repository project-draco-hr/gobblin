{
  this.metricContext=Instrumented.getMetricContext(state,CopySource.class);
  try {
    DeprecationUtils.renameDeprecatedKeys(state,CopyConfiguration.PRIORITIZATION_PREFIX + "." + CopyResourcePool.ENTITIES_KEY,Lists.newArrayList(MAX_FILES_COPIED_KEY));
    final FileSystem sourceFs=getSourceFileSystem(state);
    final FileSystem targetFs=getTargetFileSystem(state);
    long maxSizePerBin=state.getPropAsLong(MAX_SIZE_MULTI_WORKUNITS,0);
    long maxWorkUnitsPerMultiWorkUnit=state.getPropAsLong(MAX_WORK_UNITS_PER_BIN,50);
    final long minWorkUnitWeight=Math.max(1,maxSizePerBin / maxWorkUnitsPerMultiWorkUnit);
    final Optional<CopyableFileWatermarkGenerator> watermarkGenerator=CopyableFileWatermarkHelper.getCopyableFileWatermarkGenerator(state);
    final CopyConfiguration copyConfiguration=CopyConfiguration.builder(targetFs,state.getProperties()).build();
    DatasetsFinder<CopyableDatasetBase> datasetFinder=DatasetUtils.instantiateDatasetFinder(state.getProperties(),sourceFs,DEFAULT_DATASET_PROFILE_CLASS_KEY,new EventSubmitter.Builder(this.metricContext,CopyConfiguration.COPY_PREFIX).build(),state);
    IterableDatasetFinder<CopyableDatasetBase> iterableDatasetFinder=datasetFinder instanceof IterableDatasetFinder ? (IterableDatasetFinder<CopyableDatasetBase>)datasetFinder : new IterableDatasetFinderImpl<>(datasetFinder);
    Iterator<CopyableDatasetRequestor> requestorIteratorWithNulls=Iterators.transform(iterableDatasetFinder.getDatasetsIterator(),new CopyableDatasetRequestor.Factory(targetFs,copyConfiguration,log));
    Iterator<CopyableDatasetRequestor> requestorIterator=Iterators.filter(requestorIteratorWithNulls,Predicates.<CopyableDatasetRequestor>notNull());
    final HashMultimap<FileSet<CopyEntity>,WorkUnit> workUnitsMap=HashMultimap.create();
    RequestAllocator<FileSet<CopyEntity>> allocator=createRequestAllocator(copyConfiguration,state);
    Iterator<FileSet<CopyEntity>> prioritizedFileSets=allocator.allocateRequests(requestorIterator,copyConfiguration.getMaxToCopy());
    Iterator<Callable<Void>> callableIterator=Iterators.transform(prioritizedFileSets,new Function<FileSet<CopyEntity>,Callable<Void>>(){
      @Nullable @Override public Callable<Void> apply(      FileSet<CopyEntity> input){
        return new FileSetWorkUnitGenerator((CopyableDatasetBase)input.getDataset(),input,state,workUnitsMap,watermarkGenerator,minWorkUnitWeight);
      }
    }
);
    try {
      List<Future<Void>> futures=new IteratorExecutor<>(callableIterator,state.getPropAsInt(MAX_CONCURRENT_LISTING_SERVICES,DEFAULT_MAX_CONCURRENT_LISTING_SERVICES),ExecutorsUtils.newDaemonThreadFactory(Optional.of(log),Optional.of("Copy-file-listing-pool-%d"))).execute();
      for (      Future<Void> future : futures) {
        try {
          future.get();
        }
 catch (        ExecutionException exc) {
          log.error("Failed to get work units for dataset.",exc.getCause());
        }
      }
    }
 catch (    InterruptedException ie) {
      log.error("Retrieval of work units was interrupted. Aborting.");
      return Lists.newArrayList();
    }
    log.info(String.format("Created %s workunits ",workUnitsMap.size()));
    copyConfiguration.getCopyContext().logCacheStatistics();
    if (state.contains(SIMULATE) && state.getPropAsBoolean(SIMULATE)) {
      log.info("Simulate mode enabled. Will not execute the copy.");
      for (      Map.Entry<FileSet<CopyEntity>,Collection<WorkUnit>> entry : workUnitsMap.asMap().entrySet()) {
        log.info(String.format("Actions for dataset %s file set %s.",entry.getKey().getDataset().datasetURN(),entry.getKey().getName()));
        for (        WorkUnit workUnit : entry.getValue()) {
          CopyEntity copyEntity=deserializeCopyEntity(workUnit);
          log.info(copyEntity.explain());
        }
      }
      return Lists.newArrayList();
    }
    List<? extends WorkUnit> workUnits=new WorstFitDecreasingBinPacking(maxSizePerBin).pack(Lists.newArrayList(workUnitsMap.values()),this.weighter);
    log.info(String.format("Bin packed work units. Initial work units: %d, packed work units: %d, max weight per bin: %d, " + "max work units per bin: %d.",workUnitsMap.size(),workUnits.size(),maxSizePerBin,maxWorkUnitsPerMultiWorkUnit));
    return ImmutableList.copyOf(workUnits);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
