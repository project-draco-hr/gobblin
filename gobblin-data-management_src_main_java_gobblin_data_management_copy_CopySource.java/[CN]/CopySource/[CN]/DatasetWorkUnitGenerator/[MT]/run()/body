{
  if (workUnitList.hasRejectedFileSet()) {
    return;
  }
  try {
    Collection<CopyableFile> files=this.copyableDataset.getCopyableFiles(this.targetFs,this.copyConfiguration);
    List<FileSet<CopyableFile>> fileSets=partitionCopyableFiles(this.copyableDataset,files);
    Collections.sort(fileSets,this.workUnitList.getComparator());
    for (    FileSet<CopyableFile> fileSet : fileSets) {
      Extract extract=new Extract(Extract.TableType.SNAPSHOT_ONLY,CopyConfiguration.COPY_PREFIX,fileSet.getName());
      List<WorkUnit> workUnitsForPartition=Lists.newArrayList();
      for (      CopyableFile copyableFile : fileSet.getFiles()) {
        CopyableDatasetMetadata metadata=new CopyableDatasetMetadata(this.copyableDataset);
        CopyableFile.DatasetAndPartition datasetAndPartition=copyableFile.getDatasetAndPartition(metadata);
        WorkUnit workUnit=new WorkUnit(extract);
        workUnit.addAll(this.state);
        serializeCopyableFile(workUnit,copyableFile);
        serializeCopyableDataset(workUnit,metadata);
        GobblinMetrics.addCustomTagToState(workUnit,new Tag<>(CopyEventSubmitterHelper.DATASET_ROOT_METADATA_NAME,this.copyableDataset.datasetURN()));
        workUnit.setProp(ConfigurationKeys.DATASET_URN_KEY,datasetAndPartition.toString());
        workUnit.setProp(SlaEventKeys.DATASET_URN_KEY,this.copyableDataset.datasetURN());
        workUnit.setProp(SlaEventKeys.PARTITION_KEY,copyableFile.getFileSet());
        computeAndSetWorkUnitGuid(workUnit);
        workUnitsForPartition.add(workUnit);
      }
      this.workUnitList.addFileSet(fileSet,workUnitsForPartition);
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Failed to generate work units for dataset " + this.copyableDataset.datasetURN(),ioe);
  }
}
