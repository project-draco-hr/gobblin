{
  Option configOption=OptionBuilder.withArgName("framework config file").withDescription("Configuration properties file for the framework").hasArgs().withLongOpt("config").create('c');
  Option jobConfigsOption=OptionBuilder.withArgName("job config files").withDescription("Comma-separated list of job configuration files").hasArgs().withLongOpt("jobconfigs").create('j');
  Option modeOption=OptionBuilder.withArgName("run mode").withDescription("Test mode (schedule|run); 'schedule' means scheduling the jobs, " + "whereas 'run' means running the jobs immediately").hasArg().withLongOpt("mode").create('m');
  Option helpOption=OptionBuilder.withArgName("help").withDescription("Display usage information").withLongOpt("help").create('h');
  Options options=new Options();
  options.addOption(configOption);
  options.addOption(jobConfigsOption);
  options.addOption(modeOption);
  options.addOption(helpOption);
  CommandLineParser parser=new BasicParser();
  CommandLine cmd=parser.parse(options,args);
  if (cmd.hasOption('h')) {
    printUsage(options);
    System.exit(0);
  }
  Configuration config=new PropertiesConfiguration(cmd.getOptionValue('c'));
  Properties properties=ConfigurationConverter.getProperties(config);
  TestWorker testWorker=new TestWorker(properties);
  testWorker.start();
  Mode mode=Mode.valueOf(cmd.getOptionValue('m').toUpperCase());
  List<String> jobConfigFiles=Lists.newArrayList(Splitter.on(',').omitEmptyStrings().trimResults().split(cmd.getOptionValue('j')));
  CountDownLatch latch=new CountDownLatch(jobConfigFiles.size());
  for (  String jobConfigFile : jobConfigFiles) {
    Properties jobProps=new Properties();
    jobProps.load(new FileReader(jobConfigFile));
    jobProps.putAll(properties);
    testWorker.runJob(jobProps,mode,new TestJobListener(latch));
  }
  latch.await();
  testWorker.stop();
}
