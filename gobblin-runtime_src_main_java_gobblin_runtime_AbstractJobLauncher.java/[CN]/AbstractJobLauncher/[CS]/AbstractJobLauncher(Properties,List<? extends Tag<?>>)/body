{
  Preconditions.checkArgument(jobProps.containsKey(ConfigurationKeys.JOB_NAME_KEY),"A job must have a job name specified by job.name");
  this.jobProps=new Properties();
  this.jobProps.putAll(jobProps);
  this.jobContext=new JobContext(this.jobProps,LOG);
  this.eventBus.register(this.jobContext);
  this.cancellationExecutor=Executors.newSingleThreadExecutor(ExecutorsUtils.newThreadFactory(Optional.of(LOG),Optional.of("CancellationExecutor")));
  this.runtimeMetricContext=this.jobContext.getJobMetricsOptional().transform(new Function<JobMetrics,MetricContext>(){
    @Override public MetricContext apply(    JobMetrics input){
      return input.getMetricContext();
    }
  }
);
  metadataTags=addClusterNameTags(metadataTags);
  this.eventSubmitter=buildEventSubmitter(metadataTags);
  GobblinMetrics.addCustomTagToState(this.jobContext.getJobState(),metadataTags);
  JobExecutionEventSubmitter jobExecutionEventSubmitter=new JobExecutionEventSubmitter(this.eventSubmitter);
  this.mandatoryJobListeners.add(new JobExecutionEventSubmitterListener(jobExecutionEventSubmitter));
  if (!tryLockJob(this.jobProps)) {
    this.eventSubmitter.submit(JobEvent.LOCK_IN_USE);
    throw new JobException(String.format("Previous instance of job %s is still running, skipping this scheduled run",this.jobContext.getJobName()));
  }
}
