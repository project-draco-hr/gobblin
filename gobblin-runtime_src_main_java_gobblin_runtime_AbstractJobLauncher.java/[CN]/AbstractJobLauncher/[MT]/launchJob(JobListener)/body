{
  String jobId=this.jobContext.getJobId();
  JobState jobState=this.jobContext.getJobState();
  try {
    if (!tryLockJob()) {
      throw new JobException(String.format("Previous instance of job %s is still running, skipping this scheduled run",this.jobContext.getJobName()));
    }
    Optional<Timer.Context> workUnitsCreationTimer=Instrumented.timerContext(this.runtimeMetricContext,MetricNames.LauncherTimings.WORK_UNITS_CREATION);
    Optional<List<WorkUnit>> workUnits=Optional.fromNullable(this.jobContext.getSource().getWorkunits(jobState));
    Instrumented.endTimer(workUnitsCreationTimer);
    if (!workUnits.isPresent()) {
      jobState.setState(JobState.RunningState.FAILED);
      throw new JobException("Failed to get work units for job " + jobId);
    }
    if (workUnits.get().isEmpty()) {
      LOG.warn("No work units have been created for job " + jobId);
      return;
    }
    long startTime=System.currentTimeMillis();
    jobState.setStartTime(startTime);
    jobState.setState(JobState.RunningState.RUNNING);
    LOG.info("Starting job " + jobId);
    Optional<Timer.Context> workUnitsPreparationTimer=Instrumented.timerContext(this.runtimeMetricContext,MetricNames.LauncherTimings.WORK_UNITS_PREPARATION);
    prepareWorkUnits(JobLauncherUtils.flattenWorkUnits(workUnits.get()),jobState);
    Instrumented.endTimer(workUnitsPreparationTimer);
    if (this.jobContext.getJobMetricsOptional().isPresent()) {
      this.jobContext.getJobMetricsOptional().get().startMetricReporting(this.jobProps);
    }
    storeJobExecutionInfo();
    Optional<Timer.Context> jobRunTimer=Instrumented.timerContext(this.runtimeMetricContext,MetricNames.LauncherTimings.JOB_RUN);
    runWorkUnits(workUnits.get());
    Instrumented.endTimer(jobRunTimer);
    if (jobState.getState() == JobState.RunningState.CANCELLED) {
      LOG.info(String.format("Job %s has been cancelled, aborting now",jobId));
      return;
    }
    Optional<Timer.Context> jobCommitTimer=Instrumented.timerContext(this.runtimeMetricContext,MetricNames.LauncherTimings.JOB_COMMIT);
    setFinalJobState(jobState);
    if (canCommit(this.jobContext.getJobCommitPolicy(),jobState)) {
      try {
        commitJob(jobState);
      }
  finally {
        persistJobState(jobState);
      }
    }
    Instrumented.endTimer(jobCommitTimer);
  }
 catch (  Throwable t) {
    jobState.setState(JobState.RunningState.FAILED);
    throw new JobException("Failed to launch and run job " + jobId,t);
  }
 finally {
    long endTime=System.currentTimeMillis();
    jobState.setEndTime(endTime);
    jobState.setDuration(endTime - jobState.getStartTime());
    Optional<Timer.Context> jobCleanupTimer=Instrumented.timerContext(this.runtimeMetricContext,MetricNames.LauncherTimings.JOB_CLEANUP);
    cleanupStagingData(jobState);
    Instrumented.endTimer(jobCleanupTimer);
    storeJobExecutionInfo();
    if (this.jobContext.getJobMetricsOptional().isPresent()) {
      this.jobContext.getJobMetricsOptional().get().triggerMetricReporting();
      this.jobContext.getJobMetricsOptional().get().stopMetricReporting();
      JobMetrics.remove(jobState);
    }
    unlockJob();
  }
  if (jobListener != null) {
    jobListener.onJobCompletion(jobState);
  }
  if (jobState.getState() == JobState.RunningState.FAILED) {
    throw new JobException(String.format("Job %s failed",jobId));
  }
}
