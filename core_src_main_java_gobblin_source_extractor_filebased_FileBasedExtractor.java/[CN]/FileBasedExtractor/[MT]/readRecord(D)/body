{
  this.totalRecordCount++;
  int statusCount=this.workUnit.getPropAsInt(ConfigurationKeys.FILEBASED_REPORT_STATUS_ON_COUNT,ConfigurationKeys.DEFAULT_FILEBASED_REPORT_STATUS_ON_COUNT);
  if (statusCount > 0 && this.totalRecordCount % statusCount == 0) {
    this.log.info("Total number of records processed so far: " + this.totalRecordCount);
  }
  if (!readRecordStart) {
    log.info("Starting to read records");
    if (!filesToPull.isEmpty()) {
      currentFile=filesToPull.remove(0);
      currentFileItr=downloadFile(currentFile);
      seenFirstRecord=false;
      log.info("Will start downloading file: " + currentFile);
    }
 else {
      log.info("Finished reading records from all files");
      return null;
    }
    readRecordStart=true;
  }
  while (!currentFileItr.hasNext() && !filesToPull.isEmpty()) {
    log.info("Finished downloading file: " + currentFile);
    closeFile(currentFile);
    currentFile=filesToPull.remove(0);
    currentFileItr=downloadFile(currentFile);
    seenFirstRecord=false;
    log.info("Will start downloading file: " + currentFile);
  }
  if (currentFileItr.hasNext()) {
    if (supportsReuse && seenFirstRecord) {
      try {
        return (D)currentFileItr.getClass().getMethod("next",reuse.getClass()).invoke(currentFileItr,reuse);
      }
 catch (      Exception e) {
        e.printStackTrace();
        log.info("Object reuse unsupported, continuing without reuse");
        supportsReuse=false;
      }
    }
    seenFirstRecord=true;
    return (D)currentFileItr.next();
  }
 else {
    log.info("Finished reading records from all files");
    return null;
  }
}
