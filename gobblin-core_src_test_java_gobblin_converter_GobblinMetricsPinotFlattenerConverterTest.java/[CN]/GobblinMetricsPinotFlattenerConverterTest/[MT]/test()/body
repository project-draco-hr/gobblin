{
  MetricReport metricReport=new MetricReport();
  metricReport.setTags(ImmutableMap.of("tag","value","tag2","value2"));
  metricReport.setTimestamp(10L);
  metricReport.setMetrics(Lists.newArrayList(new Metric("metric",1.0),new Metric("metric2",2.0)));
  AvroSerializer<MetricReport> serializer=new AvroBinarySerializer<>(MetricReport.SCHEMA$,new NoopSchemaVersionWriter());
  serializer.serializeRecord(metricReport);
  Schema metricReportUtf8=new Schema.Parser().parse(this.getClass().getClassLoader().getResourceAsStream("MetricReport.avsc"));
  GenericRecord genericRecordMetric=AvroUtils.slowDeserializeGenericRecord(serializer.serializeRecord(metricReport),metricReportUtf8);
  GobblinMetricsPinotFlattenerConverter converter=new GobblinMetricsPinotFlattenerConverter();
  Schema outputSchema=converter.convertSchema(MetricReport.SCHEMA$,new WorkUnitState());
  Iterable<GenericRecord> converted=converter.convertRecord(outputSchema,genericRecordMetric,new WorkUnitState());
  List<GenericRecord> convertedList=Lists.newArrayList(converted);
  Assert.assertEquals(convertedList.size(),2);
  Assert.assertEquals(Sets.newHashSet((List<Utf8>)convertedList.get(0).get("tags")),Sets.newHashSet("tag:value","tag2:value2"));
  Assert.assertEquals(convertedList.get(0).get("timestamp"),10L);
  Assert.assertEquals(convertedList.get(0).get("metricName").toString(),"metric");
  Assert.assertEquals(convertedList.get(0).get("metricValue"),1.0);
  Assert.assertEquals(Sets.newHashSet((List<Utf8>)convertedList.get(1).get("tags")),Sets.newHashSet("tag:value","tag2:value2"));
  Assert.assertEquals(convertedList.get(1).get("timestamp"),10L);
  Assert.assertEquals(convertedList.get(1).get("metricName").toString(),"metric2");
  Assert.assertEquals(convertedList.get(1).get("metricValue"),2.0);
}
