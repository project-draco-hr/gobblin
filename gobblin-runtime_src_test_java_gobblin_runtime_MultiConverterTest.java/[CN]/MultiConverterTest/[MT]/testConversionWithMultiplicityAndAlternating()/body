{
  MultiConverter multiConverter=new MultiConverter(Lists.newArrayList(new SchemaSimplificationConverter(),new MultiIdentityConverter(6),new AlternatingConverter(4),new TestConverter()));
  WorkUnitState workUnitState=new WorkUnitState();
  Schema schema=(Schema)multiConverter.convertSchema(TEST_SCHEMA,workUnitState);
  Iterable<Object> convertedRecordIterable=multiConverter.convertRecord(schema,TEST_RECORD,workUnitState);
  Assert.assertEquals(Iterables.size(convertedRecordIterable),10);
  for (  Object record : convertedRecordIterable) {
    checkConvertedAvroData(schema,(GenericRecord)record);
  }
  multiConverter=new MultiConverter(Lists.newArrayList(new SchemaSimplificationConverter(),new MultiIdentityConverter(6),new AlternatingConverter(4),new MultiIdentityConverter(4),new TestConverter()));
  workUnitState=new WorkUnitState();
  schema=(Schema)multiConverter.convertSchema(TEST_SCHEMA,workUnitState);
  convertedRecordIterable=multiConverter.convertRecord(schema,TEST_RECORD,workUnitState);
  Assert.assertEquals(Iterables.size(convertedRecordIterable),40);
  for (  Object record : convertedRecordIterable) {
    checkConvertedAvroData(schema,(GenericRecord)record);
  }
}
