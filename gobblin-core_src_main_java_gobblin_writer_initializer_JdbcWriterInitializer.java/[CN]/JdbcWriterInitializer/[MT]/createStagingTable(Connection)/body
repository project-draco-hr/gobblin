{
  String destTableKey=ForkOperatorUtils.getPropertyNameForBranch(JdbcPublisher.JDBC_PUBLISHER_FINAL_TABLE_NAME,branches,branchId);
  String destinationTable=state.getProp(destTableKey);
  if (StringUtils.isEmpty(destinationTable)) {
    throw new IllegalArgumentException(JdbcPublisher.JDBC_PUBLISHER_FINAL_TABLE_NAME + " is required for " + this.getClass().getSimpleName()+ " for branch "+ branchId);
  }
  String stagingTable=null;
  for (int i=0; i < NAMING_STAGING_TABLE_TRIAL; i++) {
    String tmp=String.format(STAGING_TABLE_FORMAT,System.nanoTime());
    LOG.info("Check if staging table " + tmp + " exists.");
    ResultSet res=conn.getMetaData().getTables(null,null,tmp,new String[]{"TABLE"});
    if (!res.next()) {
      LOG.info("Staging table " + tmp + " does not exist. Creating.");
      try {
        commands.createTableStructure(conn,destinationTable,tmp);
        LOG.info("Test if staging table can be dropped. Test by dropping and Creating staging table.");
        commands.drop(conn,tmp);
        commands.createTableStructure(conn,destinationTable,tmp);
        stagingTable=tmp;
        break;
      }
 catch (      SQLException e) {
        LOG.warn("Failed to create table. Retrying up to " + NAMING_STAGING_TABLE_TRIAL + " times",e);
      }
    }
 else {
      LOG.info("Staging table " + tmp + " exists.");
    }
    try {
      TimeUnit.MILLISECONDS.sleep(RANDOM.nextInt(1000));
    }
 catch (    InterruptedException e) {
      LOG.info("Sleep has been interrupted.",e);
    }
  }
  if (!StringUtils.isEmpty(stagingTable)) {
    return stagingTable;
  }
  throw new RuntimeException("Failed to create staging table");
}
