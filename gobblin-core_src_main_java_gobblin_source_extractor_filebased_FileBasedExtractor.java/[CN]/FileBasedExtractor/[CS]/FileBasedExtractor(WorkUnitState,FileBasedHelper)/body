{
  this.workUnitState=workUnitState;
  this.workUnit=workUnitState.getWorkunit();
  this.filesToPull=Lists.newArrayList(workUnitState.getPropAsList(ConfigurationKeys.SOURCE_FILEBASED_FILES_TO_PULL,""));
  this.statusCount=this.workUnit.getPropAsInt(ConfigurationKeys.FILEBASED_REPORT_STATUS_ON_COUNT,ConfigurationKeys.DEFAULT_FILEBASED_REPORT_STATUS_ON_COUNT);
  if (fsHelper instanceof SizeAwareFileBasedHelper) {
    this.fsHelper=(SizeAwareFileBasedHelper)fsHelper;
  }
 else {
    this.fsHelper=new SizeAwareFileBasedHelperDecorator(fsHelper);
  }
  try {
    this.fsHelper.connect();
  }
 catch (  FileBasedHelperException e) {
    Throwables.propagate(e);
  }
  counters.initialize(Instrumented.getMetricContext(workUnitState,this.getClass()),CounterNames.class,this.getClass());
}
