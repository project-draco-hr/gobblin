{
  for (  final Container container : containers) {
    LOGGER.info(String.format("Container %s has been allocated",container.getId()));
    String instanceName=unusedHelixInstanceNames.poll();
    if (Strings.isNullOrEmpty(instanceName)) {
      instanceName=YarnHelixUtils.getHelixInstanceName(GobblinWorkUnitRunner.class.getSimpleName(),helixInstanceIdGenerator.incrementAndGet());
    }
    final String finalInstanceName=instanceName;
    containerMap.put(container.getId(),new AbstractMap.SimpleImmutableEntry<>(container,finalInstanceName));
    containerLaunchExecutor.submit(new Runnable(){
      @Override public void run(){
        try {
          LOGGER.info("Starting container " + container.getId());
          nmClientAsync.startContainerAsync(container,newContainerLaunchContext(container,finalInstanceName));
        }
 catch (        IOException ioe) {
          LOGGER.error("Failed to start container " + container.getId(),ioe);
        }
      }
    }
);
  }
}
