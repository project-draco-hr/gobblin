{
  for (  final Container container : containers) {
    LOGGER.info(String.format("Container %s has been allocated",container.getId()));
    Map.Entry<Container,String> containerParticipantPair=new AbstractMap.SimpleImmutableEntry<Container,String>(container,YarnHelixUtils.getParticipantId(container.getNodeId().getHost(),container.getId()));
    containerMap.put(container.getId(),containerParticipantPair);
    containerLaunchExecutor.submit(new Runnable(){
      @Override public void run(){
        try {
          LOGGER.info("Starting container " + container.getId());
          nmClientAsync.startContainerAsync(container,newContainerLaunchContext(container));
        }
 catch (        IOException ioe) {
          LOGGER.error("Failed to start container " + container.getId(),ioe);
        }
      }
    }
);
  }
}
