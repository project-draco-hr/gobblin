{
  config=config.withFallback(FALLBACK);
  RequestConfig requestConfig=RequestConfig.copy(RequestConfig.DEFAULT).setSocketTimeout(config.getInt(REQUEST_TIME_OUT_MS_KEY)).setConnectTimeout(config.getInt(CONNECTION_TIME_OUT_MS_KEY)).setConnectionRequestTimeout(config.getInt(CONNECTION_TIME_OUT_MS_KEY)).build();
  httpClientBuilder.setDefaultRequestConfig(requestConfig);
  if (config.hasPath(STATIC_SVC_ENDPOINT)) {
    try {
      svcEndpoint=Optional.of(new URI(config.getString(AbstractHttpWriterBuilder.STATIC_SVC_ENDPOINT)));
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
  }
  String connMgrStr=config.getString(HTTP_CONN_MANAGER);
switch (ConnManager.valueOf(connMgrStr.toUpperCase())) {
case BASIC:
    httpConnManager=new BasicHttpClientConnectionManager();
  break;
case POOLING:
PoolingHttpClientConnectionManager poolingConnMgr=new PoolingHttpClientConnectionManager();
poolingConnMgr.setMaxTotal(config.getInt(POOLING_CONN_MANAGER_MAX_TOTAL_CONN));
poolingConnMgr.setDefaultMaxPerRoute(config.getInt(POOLING_CONN_MANAGER_MAX_PER_CONN));
httpConnManager=poolingConnMgr;
break;
default :
throw new IllegalArgumentException(connMgrStr + " is not supported");
}
LOG.info("Using " + httpConnManager.getClass().getSimpleName());
return typedSelf();
}
