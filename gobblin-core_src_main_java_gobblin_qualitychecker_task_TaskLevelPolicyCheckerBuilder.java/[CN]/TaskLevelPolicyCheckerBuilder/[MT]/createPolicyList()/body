{
  List<TaskLevelPolicy> list=new ArrayList<TaskLevelPolicy>();
  String taskLevelPoliciesKey=ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.TASK_LEVEL_POLICY_LIST,this.index);
  String taskLevelPolicyTypesKey=ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.TASK_LEVEL_POLICY_LIST_TYPE,this.index);
  if (this.state.contains(taskLevelPoliciesKey) && this.state.contains(taskLevelPolicyTypesKey)) {
    Splitter splitter=Splitter.on(",").omitEmptyStrings().trimResults();
    List<String> policies=Lists.newArrayList(splitter.split(this.state.getProp(taskLevelPoliciesKey)));
    List<String> types=Lists.newArrayList(splitter.split(this.state.getProp(taskLevelPolicyTypesKey)));
    if (policies.size() != types.size()) {
      throw new Exception("TaskLevelPolicy list and TaskLevelPolicies type list are not the same length");
    }
    for (int i=0; i < policies.size(); i++) {
      try {
        Class<? extends TaskLevelPolicy> policyClass=(Class<? extends TaskLevelPolicy>)Class.forName(policies.get(i));
        Constructor<? extends TaskLevelPolicy> policyConstructor=policyClass.getConstructor(State.class,TaskLevelPolicy.Type.class);
        TaskLevelPolicy policy=policyConstructor.newInstance(this.state,TaskLevelPolicy.Type.valueOf(types.get(i)));
        list.add(policy);
      }
 catch (      Exception e) {
        LOG.error(taskLevelPoliciesKey + " contains a class " + policies.get(i)+ " which doesn't extend Policy.",e);
        throw e;
      }
    }
  }
  return list;
}
