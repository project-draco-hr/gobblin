{
  List<TaskState> taskStates=Lists.newArrayList();
  Closer closer=Closer.create();
  try {
    ParallelStateSerDeRunner stateSerDeRunner=closer.register(new ParallelStateSerDeRunner(2,this.fs));
    stateSerDeRunner.deserializeFromSequenceFile(Text.class,TaskState.class,new Path(this.outputPath,"seq1"),taskStates);
    stateSerDeRunner.deserializeFromSequenceFile(Text.class,TaskState.class,new Path(this.outputPath,"seq2"),taskStates);
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    closer.close();
  }
  Assert.assertEquals(taskStates.size(),4);
  Map<String,TaskState> taskStateMap=Maps.newHashMap();
  for (  TaskState taskState : taskStates) {
    taskStateMap.put(taskState.getTaskId(),taskState);
  }
  Assert.assertEquals(taskStateMap.size(),4);
  TaskState taskState0=taskStateMap.get("Task0");
  Assert.assertEquals(taskState0.getStartTime(),0l);
  Assert.assertEquals(taskState0.getEndTime(),1000l);
  TaskState taskState1=taskStateMap.get("Task1");
  Assert.assertEquals(taskState1.getStartTime(),0l);
  Assert.assertEquals(taskState1.getEndTime(),2000l);
  TaskState taskState2=taskStateMap.get("Task2");
  Assert.assertEquals(taskState2.getStartTime(),0l);
  Assert.assertEquals(taskState2.getEndTime(),3000l);
  TaskState taskState3=taskStateMap.get("Task3");
  Assert.assertEquals(taskState3.getStartTime(),0l);
  Assert.assertEquals(taskState3.getEndTime(),1500l);
}
