{
  List<String> cleanUpQueries=Lists.newArrayList();
  List<String> directoriesToDelete=Lists.newArrayList();
  if (Iterables.tryFind(states,UNSUCCESSFUL_WORKUNIT).isPresent()) {
    for (    WorkUnitState wus : states) {
      QueryBasedHivePublishEntity publishEntity=HiveAvroORCQueryGenerator.deserializePublishCommands(wus);
      cleanUpQueries.addAll(publishEntity.getCleanupQueries());
      directoriesToDelete.addAll(publishEntity.getCleanupDirectories());
      wus.setWorkingState(WorkingState.FAILED);
      new SlaEventSubmitter(eventSubmitter,EventConstants.CONVERSION_FAILED_EVENT,wus.getProperties()).submit();
    }
  }
 else {
    for (    WorkUnitState wus : states) {
      QueryBasedHivePublishEntity publishEntity=HiveAvroORCQueryGenerator.deserializePublishCommands(wus);
      cleanUpQueries.addAll(publishEntity.getCleanupQueries());
      directoriesToDelete.addAll(publishEntity.getCleanupDirectories());
      Map<String,String> publishDirectories=publishEntity.getPublishDirectories();
      for (      Map.Entry<String,String> publishDir : publishDirectories.entrySet()) {
        moveDirectory(publishDir.getKey(),publishDir.getValue());
      }
      List<String> publishQueries=publishEntity.getPublishQueries();
      executeQueries(publishQueries);
      wus.setWorkingState(WorkingState.COMMITTED);
      wus.setActualHighWatermark(TableLevelWatermarker.GSON.fromJson(wus.getWorkunit().getExpectedHighWatermark(),LongWatermark.class));
      new SlaEventSubmitter(eventSubmitter,EventConstants.CONVERSION_SUCCESSFUL_SLA_EVENT,wus.getProperties()).submit();
    }
  }
  executeQueries(cleanUpQueries);
  for (  String directory : directoriesToDelete) {
    deleteDirectory(directory);
  }
}
