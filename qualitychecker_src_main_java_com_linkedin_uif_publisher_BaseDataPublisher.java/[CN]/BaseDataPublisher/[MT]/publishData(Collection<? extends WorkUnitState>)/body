{
  collectExtractMapping(states);
  for (  Map.Entry<Extract,List<WorkUnitState>> entry : extractToStateMap.entrySet()) {
    Extract extract=entry.getKey();
    WorkUnitState workUnitState=entry.getValue().get(0);
    Path tmpOutput=new Path(workUnitState.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),extract.getOutputFilePath());
    Path finalOutput=new Path(workUnitState.getProp(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR),extract.getOutputFilePath());
    if (!this.fs.exists(finalOutput.getParent())) {
      this.fs.mkdirs(finalOutput.getParent());
    }
    LOG.info(String.format("Attempting to move %s to %s",tmpOutput,finalOutput));
    if (this.fs.exists(finalOutput)) {
      if (this.getState().getPropAsBoolean((ConfigurationKeys.DATA_PUBLISHER_REPLACE_FINAL_DIR))) {
        this.fs.delete(finalOutput,true);
      }
 else {
        for (        FileStatus status : this.fs.listStatus(tmpOutput)) {
          if (workUnitState.getPropAsBoolean(ConfigurationKeys.SOURCE_FILEBASED_PRESERVE_FILE_PATH,false)) {
            this.fs.rename(status.getPath(),new Path(finalOutput,workUnitState.getProp(ConfigurationKeys.DATA_PUBLISHER_FINAL_NAME)));
          }
 else {
            this.fs.rename(status.getPath(),new Path(finalOutput,status.getPath().getName()));
          }
        }
        continue;
      }
    }
    if (this.fs.rename(tmpOutput,finalOutput)) {
      for (      WorkUnitState state : entry.getValue()) {
        if (state.getWorkingState() == WorkUnitState.WorkingState.SUCCESSFUL) {
          state.setWorkingState(WorkUnitState.WorkingState.COMMITTED);
        }
      }
    }
 else {
      throw new RuntimeException("Rename operation from " + tmpOutput + " to "+ finalOutput+ " failed!");
    }
  }
}
