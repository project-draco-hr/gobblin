{
  this.workUnitState.setProp(ConfigurationKeys.ERROR_PARTITION_COUNT,this.errorPartitions.size());
  this.workUnitState.setProp(ConfigurationKeys.ERROR_MESSAGE_INVALID_SCHEMA_ID_COUNT,this.invalidSchemaIdCount);
  this.workUnitState.setProp(ConfigurationKeys.ERROR_MESSAGE_UNDECODABLE_COUNT,this.undecodableMessageCount);
  for (int i=0; i < this.partitions.size(); i++) {
    LOG.info(String.format("Actual high watermark for partition %s=%d, expected=%d",this.partitions.get(i),this.nextWatermark.get(i),this.highWatermark.get(i)));
  }
  this.workUnitState.setActualHighWatermark(this.nextWatermark);
  for (  KafkaPartition partition : this.partitions) {
    if (this.avgMillisPerRecord.containsKey(partition)) {
      double avgMillis=this.avgMillisPerRecord.get(partition);
      LOG.info(String.format("Avg time to pull a record for partition %s = %f milliseconds",partition,avgMillis));
      KafkaUtils.setPartitionAvgRecordMillis(this.workUnitState,partition,avgMillis);
    }
 else {
      LOG.info(String.format("Avg time to pull a record for partition %s not recorded",partition));
    }
  }
  this.closer.close();
}
