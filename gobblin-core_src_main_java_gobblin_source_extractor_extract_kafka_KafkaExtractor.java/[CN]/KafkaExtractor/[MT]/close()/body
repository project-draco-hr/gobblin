{
  this.workUnitState.setProp(ConfigurationKeys.ERROR_PARTITION_COUNT,this.errorPartitions.size());
  this.workUnitState.setProp(ConfigurationKeys.ERROR_MESSAGE_INVALID_SCHEMA_ID_COUNT,this.invalidSchemaIdCount);
  this.workUnitState.setProp(ConfigurationKeys.ERROR_MESSAGE_UNDECODABLE_COUNT,this.undecodableMessageCount);
  for (int i=0; i < this.partitions.size(); i++) {
    LOG.info(String.format("Last offset pulled for partition %s = %d",this.partitions.get(i),this.nextWatermark.get(i) - 1));
  }
  this.workUnitState.setActualHighWatermark(this.nextWatermark);
  for (  KafkaPartition partition : this.partitions) {
    if (this.avgEventSizes.containsKey(partition)) {
      long avgSize=this.avgEventSizes.get(partition);
      LOG.info(String.format("Avg event size pulled for partition %s = %d",partition,avgSize));
      KafkaUtils.setPartitionAvgEventSize(this.workUnitState,partition,avgSize);
    }
 else {
      LOG.info(String.format("Partition %s not pulled",partition));
      long previousAvgRecordSize=KafkaUtils.getPartitionAvgEventSize(this.workUnitState,partition,KafkaSource.DEFAULT_AVG_EVENT_SIZE);
      KafkaUtils.setPartitionAvgEventSize(this.workUnitState,partition,previousAvgRecordSize);
    }
  }
  this.closer.close();
}
