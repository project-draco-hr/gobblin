{
  ConfigKeyPath tag=SingleLinkedListConfigKeyPath.ROOT.createChild("tag");
  ConfigKeyPath highPriorityTag=tag.createChild("highPriorityTag");
  ConfigKeyPath nertzHighPriorityTag=highPriorityTag.createChild("nertzHighPriorityTag");
  ConfigKeyPath tag2=SingleLinkedListConfigKeyPath.ROOT.createChild("tag2");
  ConfigStore mockConfigStore=mock(ConfigStore.class,Mockito.RETURNS_SMART_NULLS);
  when(mockConfigStore.getCurrentVersion()).thenReturn(version);
  List<ConfigKeyPath> rootChildren=new ArrayList<ConfigKeyPath>();
  rootChildren.add(tag);
  rootChildren.add(tag2);
  when(mockConfigStore.getChildren(SingleLinkedListConfigKeyPath.ROOT,version)).thenReturn(rootChildren);
  List<ConfigKeyPath> tagChildren=new ArrayList<ConfigKeyPath>();
  tagChildren.add(highPriorityTag);
  when(mockConfigStore.getChildren(tag,version)).thenReturn(tagChildren);
  List<ConfigKeyPath> highPriorityTagChildren=new ArrayList<ConfigKeyPath>();
  highPriorityTagChildren.add(nertzHighPriorityTag);
  when(mockConfigStore.getChildren(highPriorityTag,version)).thenReturn(highPriorityTagChildren);
  when(mockConfigStore.getOwnImports(tag,version)).thenReturn(this.emptyList);
  when(mockConfigStore.getOwnImports(highPriorityTag,version)).thenReturn(this.emptyList);
  List<ConfigKeyPath> nertzHighPriorityTagImports=new ArrayList<ConfigKeyPath>();
  nertzHighPriorityTagImports.add(tag2);
  when(mockConfigStore.getOwnImports(nertzHighPriorityTag,version)).thenReturn(nertzHighPriorityTagImports);
  List<ConfigKeyPath> tag2Imports=new ArrayList<ConfigKeyPath>();
  tag2Imports.add(tag);
  when(mockConfigStore.getOwnImports(tag2,version)).thenReturn(tag2Imports);
  ConfigStoreBackedTopology csTopology=new ConfigStoreBackedTopology(mockConfigStore,this.version);
  InMemoryTopology inMemory=new InMemoryTopology(csTopology);
  System.out.println("AAABB 0 " + inMemory.getOwnImports(nertzHighPriorityTag));
  System.out.println("AAABB 1 " + inMemory.getOwnImports(tag2));
  List<ConfigKeyPath> result=inMemory.getImportsRecursively(nertzHighPriorityTag);
  System.out.println("AAABB " + result);
  Assert.assertTrue(result.size() == 2);
  Iterator<ConfigKeyPath> it=result.iterator();
  Assert.assertEquals(it.next(),tag2);
  Assert.assertEquals(it.next(),tag);
}
