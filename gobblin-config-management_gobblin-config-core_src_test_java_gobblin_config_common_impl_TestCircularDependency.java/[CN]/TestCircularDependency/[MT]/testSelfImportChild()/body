{
  ConfigKeyPath tag=SingleLinkedListConfigKeyPath.ROOT.createChild("tag");
  ConfigKeyPath highPriorityTag=tag.createChild("highPriorityTag");
  ConfigStore mockConfigStore=mock(ConfigStore.class,Mockito.RETURNS_SMART_NULLS);
  when(mockConfigStore.getCurrentVersion()).thenReturn(version);
  List<ConfigKeyPath> rootChildren=new ArrayList<ConfigKeyPath>();
  rootChildren.add(tag);
  when(mockConfigStore.getChildren(SingleLinkedListConfigKeyPath.ROOT,version)).thenReturn(rootChildren);
  List<ConfigKeyPath> tagChildren=new ArrayList<ConfigKeyPath>();
  tagChildren.add(highPriorityTag);
  when(mockConfigStore.getChildren(tag,version)).thenReturn(tagChildren);
  when(mockConfigStore.getChildren(highPriorityTag,version)).thenReturn(this.emptyList);
  List<ConfigKeyPath> tagImports=new ArrayList<ConfigKeyPath>();
  tagImports.add(highPriorityTag);
  when(mockConfigStore.getOwnImports(tag,version)).thenReturn(tagImports);
  ConfigStoreBackedTopology csTopology=new ConfigStoreBackedTopology(mockConfigStore,this.version);
  InMemoryTopology inMemory=new InMemoryTopology(csTopology);
  try {
    inMemory.getImportsRecursively(tag);
    Assert.fail("Did not catch expected CircularDependencyException");
  }
 catch (  CircularDependencyException e) {
    Assert.assertTrue(e.getMessage().indexOf("/tag/highPriorityTag") > 0 && e.getMessage().indexOf("/tag ") > 0);
  }
}
