{
  FileSystem fs=FileSystem.getLocal(new Configuration());
  Path rootDir=new Path("gobblin-test/job-launcher-utils-test");
  Path writerStagingDir0=new Path(rootDir,"staging/fork_0");
  Path writerStagingDir1=new Path(rootDir,"staging/fork_1");
  Path writerOutputDir0=new Path(rootDir,"output/fork_0");
  Path writerOutputDir1=new Path(rootDir,"output/fork_1");
  String writerPath0="test0";
  String writerPath1="test1";
  try {
    WorkUnitState state=new WorkUnitState();
    state.setProp(ConfigurationKeys.FORK_BRANCHES_KEY,"2");
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,2,0),ConfigurationKeys.LOCAL_FS_URI);
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_SYSTEM_URI,2,1),ConfigurationKeys.LOCAL_FS_URI);
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_STAGING_DIR,2,0),writerStagingDir0.toString());
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_STAGING_DIR,2,1),writerStagingDir1.toString());
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_OUTPUT_DIR,2,0),writerOutputDir0.toString());
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_OUTPUT_DIR,2,1),writerOutputDir1.toString());
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_PATH,2,0),writerPath0);
    state.setProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_PATH,2,1),writerPath1);
    Path writerStagingPath0=new Path(writerStagingDir0,writerPath0);
    fs.mkdirs(writerStagingPath0);
    Path writerStagingPath1=new Path(writerStagingDir1,writerPath1);
    fs.mkdirs(writerStagingPath1);
    Path writerOutputPath0=new Path(writerOutputDir0,writerPath0);
    fs.mkdirs(writerOutputPath0);
    Path writerOutputPath1=new Path(writerOutputDir1,writerPath1);
    fs.mkdirs(writerOutputPath1);
    JobLauncherUtils.cleanStagingData(state,LoggerFactory.getLogger(JobLauncherUtilsTest.class));
    Assert.assertFalse(fs.exists(writerStagingPath0));
    Assert.assertFalse(fs.exists(writerStagingPath1));
    Assert.assertFalse(fs.exists(writerOutputPath0));
    Assert.assertFalse(fs.exists(writerOutputPath1));
  }
  finally {
    fs.delete(rootDir,true);
  }
}
