{
  List<FileStatus> sourceFileStatuses=Lists.newArrayList();
  List<FileStatus> desiredTargetStatuses=Lists.newArrayList();
  final Path sourceRoot=new Path("/source");
  final Path targetRoot=new Path("/target");
  Path path1=new Path("path1");
  Path sourcePath1=new Path(sourceRoot,path1);
  Path targetPath1=new Path(targetRoot,path1);
  sourceFileStatuses.add(getFileStatus(sourcePath1,0,0));
  desiredTargetStatuses.add(getFileStatus(targetPath1,0,10));
  Path path2=new Path("path2");
  Path sourcePath2=new Path(sourceRoot,path2);
  Path targetPath2=new Path(targetRoot,path2);
  sourceFileStatuses.add(getFileStatus(sourcePath2,0,0));
  Path path3=new Path("path3");
  Path sourcePath3=new Path(sourceRoot,path3);
  Path targetPath3=new Path(targetRoot,path3);
  sourceFileStatuses.add(getFileStatus(sourcePath3,0,0));
  desiredTargetStatuses.add(getFileStatus(targetPath3,10,0));
  Path path4=new Path("path4");
  Path sourcePath4=new Path(sourceRoot,path4);
  Path targetPath4=new Path(targetRoot,path4);
  sourceFileStatuses.add(getFileStatus(sourcePath4,0,10));
  desiredTargetStatuses.add(getFileStatus(targetPath4,0,0));
  Path path5=new Path("path5");
  Path sourcePath5=new Path(sourceRoot,path5);
  Path targetPath5=new Path(targetRoot,path5);
  desiredTargetStatuses.add(getFileStatus(targetPath5,0,10));
  Map<Path,FileStatus> sourceMap=Maps.newHashMap();
  for (  FileStatus status : sourceFileStatuses) {
    sourceMap.put(status.getPath(),status);
  }
  TestLocationDescriptor sourceLocation=new TestLocationDescriptor(sourceMap);
  Map<Path,FileStatus> targetDesiredMap=Maps.newHashMap();
  for (  FileStatus status : desiredTargetStatuses) {
    targetDesiredMap.put(status.getPath(),status);
  }
  TestLocationDescriptor targetDesiredLocation=new TestLocationDescriptor(targetDesiredMap);
  TestLocationDescriptor existingTargetLocation=new TestLocationDescriptor(Maps.newHashMap(targetDesiredMap));
  MultiTimingEvent timer=Mockito.mock(MultiTimingEvent.class);
  HiveCopyEntityHelper helper=Mockito.mock(HiveCopyEntityHelper.class);
  Mockito.when(helper.getTargetPath(Mockito.any(Path.class),Mockito.any(FileSystem.class),Mockito.any(Optional.class),Mockito.anyBoolean())).then(new Answer<Path>(){
    @Override public Path answer(    InvocationOnMock invocation) throws Throwable {
      Path path=(Path)invocation.getArguments()[0];
      return new Path(path.toString().replace(sourceRoot.toString(),targetRoot.toString()));
    }
  }
);
  HiveCopyEntityHelper.DiffPathSet diff=HiveCopyEntityHelper.fullPathDiff(sourceLocation,targetDesiredLocation,Optional.<HiveLocationDescriptor>of(existingTargetLocation),Optional.<Partition>absent(),timer,helper);
  Assert.assertEquals(diff.filesToCopy.size(),3);
  Assert.assertFalse(containsPath(diff.filesToCopy,sourcePath1));
  Assert.assertTrue(containsPath(diff.filesToCopy,sourcePath2));
  Assert.assertTrue(containsPath(diff.filesToCopy,sourcePath3));
  Assert.assertTrue(containsPath(diff.filesToCopy,sourcePath4));
  Assert.assertFalse(containsPath(diff.filesToCopy,sourcePath5));
  Assert.assertEquals(diff.pathsToDelete.size(),3);
  Assert.assertFalse(diff.pathsToDelete.contains(targetPath1));
  Assert.assertFalse(diff.pathsToDelete.contains(targetPath2));
  Assert.assertTrue(diff.pathsToDelete.contains(targetPath3));
  Assert.assertTrue(diff.pathsToDelete.contains(targetPath4));
  Assert.assertTrue(diff.pathsToDelete.contains(targetPath5));
}
