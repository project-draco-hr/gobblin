{
  List<Schema.Field> fields=new ArrayList<Schema.Field>();
  for (  JsonElement elem : schema) {
    JsonObject map=(JsonObject)elem;
    String columnName=map.get("columnName").getAsString();
    String comment=map.get("comment").getAsString();
    Schema fldSchema;
    try {
      JsonElementConverter converter=JsonElementConversionFactory.getConvertor(columnName,map.get("dataType").getAsJsonObject().get("type").getAsString(),map,workUnit);
      converters.put(columnName,converter);
      fldSchema=converter.getSchema();
    }
 catch (    UnsupportedDateTypeException e) {
      throw new SchemaConversionException(e);
    }
    Field fld=new Field(columnName,fldSchema,comment,null);
    fld.addProp("source.type",map.get("dataType").getAsJsonObject().get("type").getAsString());
    fields.add(fld);
  }
  Schema avroSchema=Schema.createRecord(workUnit.getWorkunit().getExtract().getTable(),"",workUnit.getWorkunit().getExtract().getNamespace(),false);
  avroSchema.setFields(fields);
  return avroSchema;
}
