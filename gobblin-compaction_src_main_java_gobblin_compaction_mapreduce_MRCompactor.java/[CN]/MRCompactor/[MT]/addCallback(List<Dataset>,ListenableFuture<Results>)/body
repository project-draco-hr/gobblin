{
  Futures.addCallback(future,new FutureCallback<Results>(){
    /** 
 * On success, resubmit verification for the {@link Dataset}s that should be resubmitted
 * (i.e., verification didn't pass and it didn't timeout).
 */
    @Override public void onSuccess(    Results results){
      List<Dataset> datasetsToBeVerifiedAgain=Lists.newArrayList();
      for (      Results.Result result : results) {
        Optional<MRCompactorJobRunner> jobRunner=Optional.fromNullable(MRCompactor.this.jobRunnables.get(result.dataset()));
switch (result.status()) {
case PASSED:
          LOG.info("Completeness verification for dataset " + result.dataset() + " passed.");
        submitSlaEvent(result.dataset(),"CompletenessVerified");
      result.dataset().setState(VERIFIED);
    if (jobRunner.isPresent()) {
      jobRunner.get().proceed();
    }
  break;
case FAILED:
if (shouldGiveUpVerification()) {
  LOG.info("Completeness verification for dataset " + result.dataset() + " has timed out.");
  submitSlaEvent(result.dataset(),"CompletenessCannotBeVerified");
  result.dataset().setState(GIVEN_UP);
  result.dataset().addThrowable(new RuntimeException(String.format("Completeness verification for dataset %s failed or timed out.",result.dataset())));
}
 else {
  LOG.info("Completeness verification for dataset " + result.dataset() + " failed. Will verify again.");
  datasetsToBeVerifiedAgain.add(result.dataset());
}
break;
}
}
if (!datasetsToBeVerifiedAgain.isEmpty()) {
ListenableFuture<Results> future2=MRCompactor.this.verifier.get().verify(datasetsToBeVerifiedAgain);
addCallback(datasetsToBeVerifiedAgain,future2);
}
}
/** 
 * On failure, resubmit verification for all {@link Dataset}s, unless timed out.
 */
@Override public void onFailure(Throwable t){
LOG.error("Failed to verify completeness for the following datasets: " + datasetsToBeVerified,t);
if (shouldGiveUpVerification()) {
for (Dataset dataset : datasetsToBeVerified) {
LOG.warn(String.format("Completeness verification for dataset %s has timed out.",dataset));
submitSlaEvent(dataset,"CompletenessCannotBeVerified");
dataset.setState(GIVEN_UP);
dataset.addThrowable(new RuntimeException(String.format("Completeness verification for dataset %s failed or timed out.",dataset)));
}
}
 else {
ListenableFuture<Results> future2=MRCompactor.this.verifier.get().verify(datasetsToBeVerified);
addCallback(datasetsToBeVerified,future2);
}
}
}
);
}
