{
  List<Pattern> highPriorityTopicPatterns=getHighPriorityTopicPatterns();
  List<Pattern> normalPriorityTopicPatterns=getNormalPriorityTopicPatterns();
  Map<String,Double> topicRegexAndRecompactThreshold=getTopicRegexAndRecompactThreshold(this.state.getProp(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_TOPIC,StringUtils.EMPTY));
  for (  String topic : topics) {
    double lateDataThresholdForRecompact=getRecompactThresholdForTopic(topic,topicRegexAndRecompactThreshold);
    if (DatasetFilterUtils.stringInPatterns(topic,highPriorityTopicPatterns)) {
      createJobPropsForTopic(topic,HIGH_PRIORITY,lateDataThresholdForRecompact);
    }
 else     if (DatasetFilterUtils.stringInPatterns(topic,normalPriorityTopicPatterns)) {
      createJobPropsForTopic(topic,NORMAL_PRIORITY,lateDataThresholdForRecompact);
    }
 else {
      createJobPropsForTopic(topic,LOW_PRIORITY,lateDataThresholdForRecompact);
    }
  }
}
