{
  this.eventBus.register(this);
  String clusterName=this.config.getString(GobblinYarnConfigurationKeys.HELIX_CLUSTER_NAME_KEY);
  YarnHelixUtils.createGobblinYarnHelixCluster(this.config.getString(GobblinYarnConfigurationKeys.ZK_CONNECTION_STRING_KEY),clusterName);
  LOGGER.info("Created Helix cluster " + clusterName);
  connectHelixManager();
  startYarnClient();
  this.applicationId=getApplicationId();
  this.applicationStatusMonitor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        eventBus.post(new ApplicationReportArrivalEvent(yarnClient.getApplicationReport(applicationId.get())));
      }
 catch (      YarnException|IOException e) {
        LOGGER.error("Failed to get application report for Gobblin Yarn application " + applicationId.get(),e);
        eventBus.post(new GetApplicationReportFailureEvent(e));
      }
    }
  }
,0,this.appReportIntervalMinutes,TimeUnit.MINUTES);
  List<Service> services=Lists.newArrayList();
  if (this.config.hasPath(GobblinYarnConfigurationKeys.KEYTAB_FILE_PATH)) {
    LOGGER.info("Adding YarnAppSecurityManager since login is keytab based");
    services.add(buildYarnAppSecurityManager());
  }
  services.add(buildLogCopier(this.config,new Path(this.sinkLogRootDir,this.applicationName + Path.SEPARATOR + this.applicationId.get().toString()),YarnHelixUtils.getAppWorkDirPath(this.fs,this.applicationName,this.applicationId.get().toString())));
  if (config.getBoolean(ConfigurationKeys.JOB_EXECINFO_SERVER_ENABLED_KEY)) {
    LOGGER.info("Starting the job execution info server since it is enabled");
    Properties properties=ConfigUtils.configToProperties(config);
    JobExecutionInfoServer executionInfoServer=new JobExecutionInfoServer(properties);
    services.add(executionInfoServer);
    if (config.getBoolean(ConfigurationKeys.ADMIN_SERVER_ENABLED_KEY)) {
      LOGGER.info("Starting the admin UI server since it is enabled");
      services.add(new AdminWebServer(properties,executionInfoServer.getAdvertisedServerUri()));
    }
  }
 else   if (config.getBoolean(ConfigurationKeys.ADMIN_SERVER_ENABLED_KEY)) {
    LOGGER.warn("NOT starting the admin UI because the job execution info server is NOT enabled");
  }
  this.serviceManager=Optional.of(new ServiceManager(services));
  this.serviceManager.get().startAsync();
}
