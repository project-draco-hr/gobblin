{
  this.eventBus.register(this);
  createGobblinYarnHelixCluster();
  try {
    this.helixManager.connect();
  }
 catch (  Exception e) {
    LOGGER.error("HelixManager failed to connect",e);
    throw Throwables.propagate(e);
  }
  this.yarnClient.start();
  this.applicationId=Optional.of(setupAndSubmitApplication());
  this.applicationStatusMonitor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        eventBus.post(new ApplicationReportArrivalEvent(yarnClient.getApplicationReport(applicationId.get())));
      }
 catch (      YarnException ye) {
        LOGGER.error("Failed to get application report for Gobblin Yarn application " + applicationId.get(),ye);
      }
catch (      IOException ioe) {
        LOGGER.error("Failed to get application report for Gobblin Yarn application " + applicationId.get(),ioe);
      }
    }
  }
,0,this.appReportIntervalMinutes,TimeUnit.MINUTES);
  List<Service> services=Lists.newArrayList();
  if (config.hasPath(GobblinYarnConfigurationKeys.KEYTAB_FILE_PATH)) {
    LOGGER.info("Adding YarnAppSecurityManager since login is keytab based");
    services.add(new YarnAppSecurityManager(config,this.helixManager,this.fs));
  }
  services.add(buildLogCopier(new Path(this.sinkLogRootDir,this.applicationName + Path.SEPARATOR + this.applicationId.get().toString()),YarnHelixUtils.getAppWorkDirPath(this.fs,this.applicationName,this.applicationId.get())));
  this.serviceManager=Optional.of(new ServiceManager(services));
  this.serviceManager.get().startAsync();
}
