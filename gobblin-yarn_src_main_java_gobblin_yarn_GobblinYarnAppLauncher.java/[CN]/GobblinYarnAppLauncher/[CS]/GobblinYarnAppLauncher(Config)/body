{
  this.config=config;
  this.appName=config.getString(ConfigurationConstants.APPLICATION_NAME_KEY);
  this.appQueueName=config.getString(ConfigurationConstants.APP_QUEUE_KEY);
  String zkConnectionString=config.getString(ConfigurationConstants.ZK_CONNECTION_STRING_KEY);
  LOGGER.info("Using ZooKeeper connection string: " + zkConnectionString);
  this.helixManager=HelixManagerFactory.getZKHelixManager(config.getString(ConfigurationConstants.HELIX_CLUSTER_NAME_KEY),YarnHelixUtils.getHostname(),InstanceType.SPECTATOR,zkConnectionString);
  this.yarnConfiguration=new YarnConfiguration();
  this.yarnConfiguration.set("fs.automatic.close","false");
  this.yarnClient=YarnClient.createYarnClient();
  this.yarnClient.init(this.yarnConfiguration);
  this.fs=config.hasPath(ConfigurationKeys.FS_URI_KEY) ? FileSystem.get(URI.create(config.getString(ConfigurationKeys.FS_URI_KEY)),this.yarnConfiguration) : FileSystem.get(this.yarnConfiguration);
  List<Service> services=Lists.newArrayList();
  if (UserGroupInformation.isSecurityEnabled()) {
    LOGGER.info("Adding YarnAppSecurityManager since security is enabled");
    services.add(new YarnAppSecurityManager(config,this.helixManager,this.fs));
  }
  this.serviceManager=new ServiceManager(services);
  this.applicationStatusMonitor=MoreExecutors.listeningDecorator(Executors.newSingleThreadScheduledExecutor(ExecutorsUtils.newThreadFactory(Optional.of(LOGGER),Optional.of("GobblinYarnAppStatusMonitor"))));
  this.appMasterJvmArgs=Strings.nullToEmpty(config.getString(ConfigurationConstants.APP_MASTER_JVM_ARGS_KEY));
}
