{
  this.cfg=cfg;
  this.pollingInterval=this.cfg.hasPath(ConfigurationKeys.JOB_CONFIG_FILE_MONITOR_POLLING_INTERVAL_KEY) ? this.cfg.getLong(ConfigurationKeys.JOB_CONFIG_FILE_MONITOR_POLLING_INTERVAL_KEY) : ConfigurationKeys.DEFAULT_JOB_CONFIG_FILE_MONITOR_POLLING_INTERVAL;
  if (this.cfg.hasPath(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY)) {
    this.jobConfDir=this.cfg.getString(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY);
  }
 else   if (this.cfg.hasPath(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY)) {
    File localJobConfigDir=new File(this.cfg.getString(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY));
    this.jobConfDir="file://" + localJobConfigDir.getAbsolutePath();
  }
 else {
    throw new IllegalArgumentException("Expected " + ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY + " or "+ ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY+ " properties.");
  }
  this.jobConfDirPath=new Path(this.jobConfDir);
  try {
    this.jobConfDirFileSystem=this.jobConfDirPath.getFileSystem(new Configuration());
  }
 catch (  IOException e) {
    throw new RuntimeException("Unable to detect job config directory file system: " + e,e);
  }
  this.JobConfigurationFileExtensions=ImmutableSet.<String>copyOf(Splitter.on(",").omitEmptyStrings().trimResults().split(getJobConfigurationFileExtensionsString()));
}
