{
  this.logger=LoggerFactory.getLogger(Fork.class.getName() + "-" + index);
  this.taskContext=taskContext;
  this.taskState=taskState;
  this.taskId=taskState.getTaskId();
  this.branches=branches;
  this.index=index;
  this.converter=new MultiConverter(this.taskContext.getConverters(this.index));
  this.convertedSchema=this.converter.convertSchema(schema,this.taskState);
  this.rowLevelPolicyChecker=this.taskContext.getRowLevelPolicyChecker(this.taskState,this.index);
  this.rowLevelPolicyCheckingResult=new RowLevelPolicyCheckResults();
  this.writer=buildWriter();
  this.recordQueue=BoundedBlockingRecordQueue.newBuilder().hasCapacity(taskState.getPropAsInt(ConfigurationKeys.FORK_RECORD_QUEUE_CAPACITY_KEY,ConfigurationKeys.DEFAULT_FORK_RECORD_QUEUE_CAPACITY)).useTimeout(taskState.getPropAsLong(ConfigurationKeys.FORK_RECORD_QUEUE_TIMEOUT_KEY,ConfigurationKeys.DEFAULT_FORK_RECORD_QUEUE_TIMEOUT)).useTimeoutTimeUnit(TimeUnit.valueOf(taskState.getProp(ConfigurationKeys.FORK_RECORD_QUEUE_TIMEOUT_UNIT_KEY,ConfigurationKeys.DEFAULT_FORK_RECORD_QUEUE_TIMEOUT_UNIT))).collectStats().build();
  this.countDownLatch=countDownLatch;
  this.closer.register(this.rowLevelPolicyChecker);
  this.closer.register(this.writer);
  this.forkState=new AtomicReference<ForkState>(ForkState.PENDING);
}
