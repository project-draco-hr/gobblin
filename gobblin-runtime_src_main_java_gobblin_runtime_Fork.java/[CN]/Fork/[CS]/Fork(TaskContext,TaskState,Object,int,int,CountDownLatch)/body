{
  this.logger=LoggerFactory.getLogger(Fork.class.getName() + "-" + index);
  this.taskContext=taskContext;
  this.taskState=taskState;
  this.taskId=this.taskState.getTaskId();
  this.branches=branches;
  this.index=index;
  this.converter=this.closer.register(new MultiConverter(this.taskContext.getConverters(this.index)));
  this.convertedSchema=Optional.fromNullable(this.converter.convertSchema(schema,this.taskState));
  this.rowLevelPolicyChecker=this.closer.register(this.taskContext.getRowLevelPolicyChecker(this.index));
  this.rowLevelPolicyCheckingResult=new RowLevelPolicyCheckResults();
  this.recordQueue=BoundedBlockingRecordQueue.newBuilder().hasCapacity(this.taskState.getPropAsInt(ConfigurationKeys.FORK_RECORD_QUEUE_CAPACITY_KEY,ConfigurationKeys.DEFAULT_FORK_RECORD_QUEUE_CAPACITY)).useTimeout(this.taskState.getPropAsLong(ConfigurationKeys.FORK_RECORD_QUEUE_TIMEOUT_KEY,ConfigurationKeys.DEFAULT_FORK_RECORD_QUEUE_TIMEOUT)).useTimeoutTimeUnit(TimeUnit.valueOf(this.taskState.getProp(ConfigurationKeys.FORK_RECORD_QUEUE_TIMEOUT_UNIT_KEY,ConfigurationKeys.DEFAULT_FORK_RECORD_QUEUE_TIMEOUT_UNIT))).collectStats().build();
  this.countDownLatch=countDownLatch;
  this.forkState=new AtomicReference<ForkState>(ForkState.PENDING);
  this.forkMetrics=GobblinMetrics.get(getForkMetricsName(taskContext.getTaskMetrics(),this.taskState,index),taskContext.getTaskMetrics().getMetricContext(),getForkMetricsTags(this.taskState,index));
  this.closer.register(this.forkMetrics.getMetricContext());
  Instrumented.setMetricContextName(this.taskState,this.forkMetrics.getMetricContext().getName());
}
