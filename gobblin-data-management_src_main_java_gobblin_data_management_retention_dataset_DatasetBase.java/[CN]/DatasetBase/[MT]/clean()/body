{
  RetentionPolicy<T> retentionPolicy=getRetentionPolicy();
  VersionFinder<? extends T> versionFinder=getVersionFinder();
  if (!retentionPolicy.versionClass().isAssignableFrom(versionFinder.versionClass())) {
    throw new IOException("Incompatible dataset version classes.");
  }
  this.log.info("Cleaning dataset " + this);
  List<T> versions=Lists.newArrayList(getVersionFinder().findDatasetVersions(this));
  Collections.sort(versions,Collections.reverseOrder());
  Collection<T> deletableVersions=getRetentionPolicy().listDeletableVersions(versions);
  Set<Path> possiblyEmptyDirectories=new HashSet<Path>();
  for (  DatasetVersion versionToDelete : deletableVersions) {
    this.log.info("Deleting dataset version " + versionToDelete);
    Set<Path> pathsToDelete=versionToDelete.getPathsToDelete();
    this.log.info("Deleting paths: " + Arrays.toString(pathsToDelete.toArray()));
    boolean deletedAllPaths=true;
    for (    Path path : pathsToDelete) {
      if (!this.simulate) {
        boolean successfullyDeleted;
        if (this.skipTrash) {
          successfullyDeleted=this.fs.delete(path,true);
        }
 else {
          successfullyDeleted=this.trash.moveToTrash(path);
        }
        if (successfullyDeleted) {
          possiblyEmptyDirectories.add(path.getParent());
        }
 else {
          this.log.error("Failed to delete path " + path + " in dataset version "+ versionToDelete);
          deletedAllPaths=false;
        }
      }
    }
    if (!deletedAllPaths) {
      this.log.error("Failed to delete some paths in dataset version " + versionToDelete);
    }
  }
  if (this.deleteEmptyDirectories) {
    for (    Path parentDirectory : possiblyEmptyDirectories) {
      deleteEmptyParentDirectories(datasetRoot(),parentDirectory);
    }
  }
}
