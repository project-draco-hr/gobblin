{
  initLogger(state);
  try {
    initFileSystemHelper(state);
  }
 catch (  FileBasedHelperException e) {
    Throwables.propagate(e);
  }
  log.info("Getting work units");
  String nameSpaceName=state.getProp(ConfigurationKeys.EXTRACT_NAMESPACE_NAME_KEY);
  String entityName=state.getProp(ConfigurationKeys.SOURCE_ENTITY);
  String extractTableName=state.getProp(ConfigurationKeys.EXTRACT_TABLE_NAME_KEY);
  if (Strings.isNullOrEmpty(extractTableName)) {
    extractTableName=entityName;
  }
  TableType tableType=TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());
  List<WorkUnitState> previousWorkunits=Lists.newArrayList(state.getPreviousWorkUnitStates());
  List<String> prevFsSnapshot=Lists.newArrayList();
  if (!previousWorkunits.isEmpty() && previousWorkunits.get(0).getWorkunit().contains(ConfigurationKeys.SOURCE_FILEBASED_FS_SNAPSHOT)) {
    prevFsSnapshot=previousWorkunits.get(0).getWorkunit().getPropAsList(ConfigurationKeys.SOURCE_FILEBASED_FS_SNAPSHOT);
  }
  List<String> currentFsSnapshot=this.getcurrentFsSnapshot(state);
  List<String> filesToPull=Lists.newArrayList(currentFsSnapshot);
  filesToPull.removeAll(prevFsSnapshot);
  List<WorkUnit> workUnits=Lists.newArrayList();
  if (filesToPull.isEmpty()) {
    return workUnits;
  }
  log.info("Will pull the following files in this run: " + Arrays.toString(filesToPull.toArray()));
  int numPartitions=state.contains((ConfigurationKeys.SOURCE_MAX_NUMBER_OF_PARTITIONS)) && state.getPropAsInt(ConfigurationKeys.SOURCE_MAX_NUMBER_OF_PARTITIONS) <= filesToPull.size() ? state.getPropAsInt(ConfigurationKeys.SOURCE_MAX_NUMBER_OF_PARTITIONS) : filesToPull.size();
  if (numPartitions <= 0) {
    throw new IllegalArgumentException("The number of partitions should be positive");
  }
  int filesPerPartition=filesToPull.size() % numPartitions == 0 ? filesToPull.size() / numPartitions : filesToPull.size() / numPartitions + 1;
  int workUnitCount=0;
  for (int fileOffset=0; fileOffset < filesToPull.size(); fileOffset+=filesPerPartition) {
    SourceState partitionState=new SourceState();
    partitionState.addAll(state);
    partitionState.setProp(ConfigurationKeys.SOURCE_FILEBASED_FS_SNAPSHOT,StringUtils.join(currentFsSnapshot,","));
    List<String> partitionFilesToPull=filesToPull.subList(fileOffset,fileOffset + filesPerPartition > filesToPull.size() ? filesToPull.size() : fileOffset + filesPerPartition);
    partitionState.setProp(ConfigurationKeys.SOURCE_FILEBASED_FILES_TO_PULL,StringUtils.join(partitionFilesToPull,","));
    if (state.getPropAsBoolean(ConfigurationKeys.SOURCE_FILEBASED_PRESERVE_FILE_NAME,false)) {
      if (partitionFilesToPull.size() != 1) {
        throw new RuntimeException("Cannot preserve the file name if a workunit is given multiple files");
      }
      partitionState.setProp(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR,partitionState.getProp(ConfigurationKeys.SOURCE_FILEBASED_FILES_TO_PULL));
    }
    Extract extract=partitionState.createExtract(tableType,nameSpaceName,extractTableName);
    workUnits.add(partitionState.createWorkUnit(extract));
    workUnitCount++;
  }
  log.info("Total number of work units for the current run: " + workUnitCount);
  List<WorkUnit> previousWorkUnits=this.getPreviousWorkUnitsForRetry(state);
  log.info("Total number of work units from the previous failed runs: " + previousWorkUnits.size());
  workUnits.addAll(previousWorkUnits);
  return workUnits;
}
