{
  Properties jobProps=new Properties();
  jobProps.setProperty(ConfigurationKeys.JOB_NAME_KEY,"test");
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,"id");
  jobProps.setProperty(ConfigurationKeys.METRICS_ENABLED_KEY,"false");
  jobProps.setProperty(ConfigurationKeys.PARALLELIZE_DATASET_COMMIT,"true");
  Map<String,JobState.DatasetState> datasetStateMap=Maps.newHashMap();
  for (int i=0; i < 5; i++) {
    datasetStateMap.put(Integer.toString(i),new JobState.DatasetState());
  }
  final BlockingQueue<ControllableCallable<Void>> callables=Queues.newLinkedBlockingQueue();
  final JobContext jobContext=new ControllableCommitJobContext(jobProps,log,datasetStateMap,new Predicate<String>(){
    @Override public boolean apply(    @Nullable String input){
      return true;
    }
  }
,callables);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Future future=executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        jobContext.commit();
      }
 catch (      IOException ioe) {
        throw new RuntimeException(ioe);
      }
    }
  }
);
  Queue<ControllableCallable<Void>> drainedCallables=Lists.newLinkedList();
  Assert.assertEquals(Queues.drain(callables,drainedCallables,5,1,TimeUnit.SECONDS),5);
  Assert.assertFalse(future.isDone());
  for (  ControllableCallable<Void> callable : drainedCallables) {
    callable.unblock();
  }
  future.get(1,TimeUnit.SECONDS);
  Assert.assertTrue(callables.isEmpty());
  Assert.assertEquals(jobContext.getJobState().getState(),JobState.RunningState.COMMITTED);
}
