{
  Map<String,String> confMap=Maps.newHashMap();
  confMap.put("key1","value1");
  confMap.put(ConfigurationKeys.REQUIRED_ATRRIBUTES_LIST,"required1,required2");
  confMap.put(StaticJobTemplate.SUPER_TEMPLATE_KEY,"template2");
  JobCatalogWithTemplates catalog=Mockito.mock(JobCatalogWithTemplates.class);
  Mockito.when(catalog.getTemplate(new URI("template2"))).thenAnswer(new InheritingJobTemplateTest.TestTemplateAnswer(Lists.<URI>newArrayList(),ImmutableMap.of("key2","value2"),Lists.<String>newArrayList(),catalog));
  StaticJobTemplate template=new StaticJobTemplate(new URI("template"),"1","desc",ConfigFactory.parseMap(confMap),catalog);
  Assert.assertEquals(template.getSuperTemplates().size(),1);
  Assert.assertEquals(template.getSuperTemplates().iterator().next().getUri(),new URI("template2"));
  Collection<String> required=template.getRequiredConfigList();
  Assert.assertEquals(required.size(),2);
  Assert.assertTrue(required.contains("required1"));
  Assert.assertTrue(required.contains("required2"));
  Config rawTemplate=template.getRawTemplateConfig();
  Assert.assertEquals(rawTemplate.getString("key1"),"value1");
  Assert.assertEquals(rawTemplate.getString("key2"),"value2");
  Config resolved=template.getResolvedConfig(ConfigFactory.parseMap(ImmutableMap.of("required1","r1","required2","r2")));
  Assert.assertEquals(resolved.getString("key1"),"value1");
  Assert.assertEquals(resolved.getString("key2"),"value2");
  Assert.assertEquals(resolved.getString("required1"),"r1");
  Assert.assertEquals(resolved.getString("required2"),"r2");
}
