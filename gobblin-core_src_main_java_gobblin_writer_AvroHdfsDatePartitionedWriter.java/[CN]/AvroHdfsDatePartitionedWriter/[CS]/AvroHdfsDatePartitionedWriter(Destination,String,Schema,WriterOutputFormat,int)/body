{
  LOG.info("Constructing new writer");
  this.destination=destination;
  this.writerId=writerId;
  this.schema=schema;
  this.writerOutputFormat=writerOutputFormat;
  this.properties=destination.getProperties();
  this.branch=branch;
  Preconditions.checkNotNull(this.branch);
  Preconditions.checkNotNull(this.properties);
  this.baseFilePath=this.properties.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_FILE_PATH,branch));
  Preconditions.checkArgument(this.properties.contains(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_PARTITION_COLUMN,this.branch)));
  this.writerPartitionColumn=this.properties.getProp(ForkOperatorUtils.getPropertyNameForBranch(ConfigurationKeys.WRITER_PARTITION_COLUMN,this.branch));
  Optional<Schema> writerPartitionColumnSchema=AvroUtils.getFieldSchema(this.schema,this.writerPartitionColumn);
  Preconditions.checkArgument(writerPartitionColumnSchema.isPresent(),"The input schema to the Writer does not contain the field " + this.writerPartitionColumn);
  Preconditions.checkArgument(writerPartitionColumnSchema.get().getType().equals(Schema.Type.LONG),"The column " + this.writerPartitionColumn + " specified by "+ ConfigurationKeys.WRITER_PARTITION_COLUMN+ " must be of type "+ Schema.Type.LONG);
}
