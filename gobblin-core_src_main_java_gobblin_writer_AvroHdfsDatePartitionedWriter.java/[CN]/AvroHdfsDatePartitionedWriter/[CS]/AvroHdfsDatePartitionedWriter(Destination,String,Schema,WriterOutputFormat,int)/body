{
  this.destination=destination;
  this.writerId=writerId;
  this.schema=schema;
  this.writerOutputFormat=writerOutputFormat;
  this.branch=branch;
  this.properties=destination.getProperties();
  Preconditions.checkNotNull(this.destination);
  Preconditions.checkNotNull(this.writerId);
  Preconditions.checkNotNull(this.schema);
  Preconditions.checkNotNull(this.writerOutputFormat);
  Preconditions.checkNotNull(this.branch);
  Preconditions.checkNotNull(this.properties);
  this.baseFilePath=this.properties.getProp(getWriterFilePath(this.branch));
  this.partitionLevel=this.properties.getProp(getWriterPartitionLevel(this.branch),ConfigurationKeys.DEFAULT_WRITER_PARTITION_LEVEL);
  this.timestampToPathFormatter=DateTimeFormat.forPattern(this.properties.getProp(getWriterPartitionPattern(this.branch),ConfigurationKeys.DEFAULT_WRITER_PARTITION_PATTERN));
  Preconditions.checkArgument(this.properties.contains(getWriterPartitionColumnName(this.branch)),"Missing required property " + ConfigurationKeys.WRITER_PARTITION_COLUMN_NAME);
  this.partitionColumnName=this.properties.getProp(getWriterPartitionColumnName(this.branch));
  Optional<Schema> writerPartitionColumnSchema=AvroUtils.getFieldSchema(this.schema,this.partitionColumnName);
  Preconditions.checkArgument(writerPartitionColumnSchema.isPresent(),"The column " + this.partitionColumnName + " specified by "+ ConfigurationKeys.WRITER_PARTITION_COLUMN_NAME+ " is not in the writer input schema");
  Preconditions.checkArgument(writerPartitionColumnSchema.get().getType().equals(Schema.Type.LONG),"The column " + this.partitionColumnName + " specified by "+ ConfigurationKeys.WRITER_PARTITION_COLUMN_NAME+ " must be of type "+ Schema.Type.LONG);
}
