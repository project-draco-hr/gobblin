{
  this.closer=Closer.create();
  try {
    FileSystem optionalRateControlledFs=fs;
    if (props.contains(DATASET_CLEAN_HDFS_CALLS_PER_SECOND_LIMIT)) {
      optionalRateControlledFs=this.closer.register(new RateControlledFileSystem(fs,Long.parseLong(props.getProperty(DATASET_CLEAN_HDFS_CALLS_PER_SECOND_LIMIT))));
      ((RateControlledFileSystem)optionalRateControlledFs).startRateControl();
    }
    this.datasetFinder=new MultiCleanableDatasetFinder(optionalRateControlledFs,props);
  }
 catch (  NumberFormatException exception) {
    throw new IOException(exception);
  }
catch (  ExecutionException exception) {
    throw new IOException(exception);
  }
  ExecutorService executor=ScalingThreadPoolExecutor.newScalingThreadPool(0,Integer.parseInt(props.getProperty(MAX_CONCURRENT_DATASETS_CLEANED,DEFAULT_MAX_CONCURRENT_DATASETS_CLEANED)),100,ExecutorsUtils.newThreadFactory(Optional.of(LOG),Optional.of("Dataset-cleaner-pool-%d")));
  this.service=MoreExecutors.listeningDecorator(executor);
  List<Tag<?>> tags=Lists.newArrayList();
  tags.addAll(Tag.fromMap(AzkabanTags.getAzkabanTags()));
  this.metricContext=this.closer.register(Instrumented.getMetricContext(new State(props),DatasetCleaner.class,tags));
  this.isMetricEnabled=GobblinMetrics.isEnabled(props);
  this.eventSubmitter=new EventSubmitter.Builder(metricContext,RetentionEvents.NAMESPACE).build();
  this.throwables=Lists.newArrayList();
}
