{
  StringBuilder userDataCmds=new StringBuilder().append("#!/bin/bash").append("\n");
  String clusterWorkerClassName=GobblinAWSClusterMaster.class.getSimpleName();
  String nfsDir=this.nfsParentDir + this.clusterName;
  String nfsMountCmd=String.format("mount -t %s %s:%s %s",NFS_TYPE_4,this.masterPublicIp,nfsDir,nfsDir);
  userDataCmds.append("mkdir -p ").append(nfsDir).append("\n");
  userDataCmds.append(nfsMountCmd).append("\n");
  userDataCmds.append("mkdir -p ").append(this.sinkLogRootDir).append("\n");
  userDataCmds.append("chown -R ec2-user:ec2-user /home/ec2-user/*").append("\n");
  userDataCmds.append("cgS3=").append(this.workerS3ConfUri).append("\n");
  userDataCmds.append("cg=").append(this.awsConfDir).append("\n");
  userDataCmds.append("jrS3=").append(this.workerS3JarsUri).append("\n");
  userDataCmds.append("jr=").append(this.workerJarsDir).append("\n");
  StringBuilder classpath=new StringBuilder();
  List<String> awsConfs=SPLITTER.splitToList(this.workerS3ConfFiles);
  for (  String awsConf : awsConfs) {
    userDataCmds.append(String.format("wget -P \"${cg}\" \"${cgS3}\"%s",awsConf)).append("\n");
  }
  classpath.append(this.awsConfDir);
  List<String> awsJars=SPLITTER.splitToList(this.workerS3JarsFiles);
  for (  String awsJar : awsJars) {
    userDataCmds.append(String.format("wget -P \"${jr}\" \"${jrS3}\"%s",awsJar)).append("\n");
  }
  classpath.append(":").append(this.workerJarsDir).append("*");
  String helixInstanceName=GobblinAWSTaskRunner.class.getSimpleName() + UUID.randomUUID().toString();
  StringBuilder launchGobblinClusterWorkerCmd=new StringBuilder().append("java").append(" -cp ").append(classpath).append(" -Xmx").append(memory).append(" ").append(this.workerJvmArgs.or("")).append(" ").append(GobblinAWSTaskRunner.class.getName()).append(" --").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME).append(" ").append(this.clusterName).append(" --").append(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME).append(" ").append(helixInstanceName).append(" 1>").append(this.sinkLogRootDir).append(clusterWorkerClassName).append(".").append(helixInstanceName).append(".").append(GobblinAWSClusterLauncher.STDOUT).append(" 2>").append(this.sinkLogRootDir).append(clusterWorkerClassName).append(".").append(helixInstanceName).append(".").append(GobblinAWSClusterLauncher.STDERR);
  userDataCmds.append(launchGobblinClusterWorkerCmd);
  String userData=userDataCmds.toString();
  LOGGER.info("Userdata for worker node: " + userData);
  return encodeBase64(userData);
}
