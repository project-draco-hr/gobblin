{
  initLogger(state);
  log.info("Get work units");
  List<WorkUnit> workUnits=Lists.newArrayList();
  String nameSpaceName=state.getProp(ConfigurationKeys.EXTRACT_NAMESPACE_NAME_KEY);
  String entityName=state.getProp(ConfigurationKeys.SOURCE_ENTITY);
  String extractTableName=state.getProp(ConfigurationKeys.EXTRACT_TABLE_NAME_KEY);
  if (Strings.isNullOrEmpty(extractTableName)) {
    extractTableName=entityName;
  }
  TableType tableType=TableType.valueOf(state.getProp(ConfigurationKeys.EXTRACT_TABLE_TYPE_KEY).toUpperCase());
  long previousWatermark=this.getLatestWatermarkFromMetadata(state);
  Partitioner partitioner=new Partitioner(state);
  HashMap<Long,Long> partitions=partitioner.getPartitions(previousWatermark);
  Map<Long,Long> sortedPartitions=new TreeMap<Long,Long>(partitions);
  int workUnitCount=0;
  for (  Entry<Long,Long> entry : sortedPartitions.entrySet()) {
    SourceState partitionState=new SourceState();
    partitionState.addAll(state);
    partitionState.setProp(ConfigurationKeys.WORK_UNIT_LOW_WATER_MARK_KEY,entry.getKey());
    partitionState.setProp(ConfigurationKeys.WORK_UNIT_HIGH_WATER_MARK_KEY,entry.getValue());
    Extract extract=partitionState.createExtract(tableType,nameSpaceName,extractTableName);
    if (Boolean.valueOf(state.getProp(ConfigurationKeys.EXTRACT_IS_FULL_KEY))) {
      extract.setFullTrue(System.currentTimeMillis());
    }
    workUnits.add(partitionState.createWorkUnit(extract));
    workUnitCount++;
  }
  log.info("Total number of work units for the current run: " + workUnitCount);
  List<WorkUnit> previousWorkUnits=this.getPreviousIncompleteWorkUnits(state);
  log.info("Total number of work units from the previous failed runs: " + previousWorkUnits.size());
  workUnits.addAll(previousWorkUnits);
  return workUnits;
}
