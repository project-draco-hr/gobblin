{
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  String jobId=JobLauncherUtils.newJobId(jobName);
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,jobId);
  jobProps.setProperty(ConfigurationKeys.PUBLISH_DATA_AT_JOB_LEVEL,Boolean.FALSE.toString());
  jobProps.setProperty(ConfigurationKeys.JOB_COMMIT_POLICY_KEY,"successful");
  jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY,TestSourceWithFaultyExtractor.class.getName());
  jobProps.setProperty(ConfigurationKeys.MAX_TASK_RETRIES_KEY,"0");
  Closer closer=Closer.create();
  try {
    JobLauncher jobLauncher=closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps,jobProps));
    jobLauncher.launchJob(null);
  }
  finally {
    closer.close();
  }
  List<JobState.DatasetState> datasetStateList=this.datasetStateStore.getAll(jobName,jobId + ".jst");
  JobState jobState=datasetStateList.get(0);
  Assert.assertEquals(jobState.getState(),JobState.RunningState.COMMITTED);
  Assert.assertEquals(jobState.getCompletedTasks(),4);
  for (  TaskState taskState : jobState.getTaskStates()) {
    if (taskState.getTaskId().endsWith("0")) {
      Assert.assertEquals(taskState.getWorkingState(),WorkUnitState.WorkingState.FAILED);
    }
 else {
      Assert.assertEquals(taskState.getWorkingState(),WorkUnitState.WorkingState.COMMITTED);
      Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),TestExtractor.TOTAL_RECORDS);
    }
  }
}
