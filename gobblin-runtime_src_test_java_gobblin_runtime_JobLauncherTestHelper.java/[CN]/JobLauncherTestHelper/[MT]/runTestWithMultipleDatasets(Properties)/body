{
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  String jobId=JobLauncherUtils.newJobId(jobName);
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,jobId);
  jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY,MultiDatasetTestSource.class.getName());
  Closer closer=Closer.create();
  try {
    JobLauncher jobLauncher=closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps,jobProps));
    jobLauncher.launchJob(null);
  }
  finally {
    closer.close();
  }
  for (int i=0; i < 4; i++) {
    List<JobState.DatasetState> datasetStateList=this.datasetStateStore.getAll(jobName,"Dataset" + i + "-current.jst");
    JobState jobState=datasetStateList.get(0);
    Assert.assertEquals(jobState.getProp(ConfigurationKeys.DATASET_URN_KEY),"Dataset" + i);
    Assert.assertEquals(jobState.getState(),JobState.RunningState.COMMITTED);
    Assert.assertEquals(jobState.getCompletedTasks(),1);
    Assert.assertEquals(jobState.getPropAsInt(ConfigurationKeys.JOB_FAILURES_KEY),0);
    for (    TaskState taskState : jobState.getTaskStates()) {
      Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY),"Dataset" + i);
      Assert.assertEquals(taskState.getWorkingState(),WorkUnitState.WorkingState.COMMITTED);
      Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),TestExtractor.TOTAL_RECORDS);
    }
  }
}
