{
  String jobName=jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
  String jobId=JobLauncherUtils.newJobId(jobName);
  jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY,jobId);
  try (JobLauncher jobLauncher=JobLauncherFactory.newJobLauncher(this.launcherProps,jobProps)){
    jobLauncher.launchJob(null);
  }
   List<JobState.DatasetState> datasetStateList=this.datasetStateStore.getAll(jobName,jobId + ".jst");
  DatasetState datasetState=datasetStateList.get(0);
  Assert.assertEquals(datasetState.getState(),JobState.RunningState.COMMITTED);
  Assert.assertEquals(datasetState.getCompletedTasks(),4);
  Assert.assertEquals(datasetState.getJobFailures(),0);
  FileSystem lfs=FileSystem.getLocal(new Configuration());
  for (  TaskState taskState : datasetState.getTaskStates()) {
    Assert.assertEquals(taskState.getWorkingState(),WorkUnitState.WorkingState.COMMITTED);
    Path path=new Path(this.launcherProps.getProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR),new Path(taskState.getExtract().getOutputFilePath(),"fork_0"));
    Assert.assertTrue(lfs.exists(path));
    Assert.assertEquals(lfs.listStatus(path).length,2);
    Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN + ".0"),TestExtractor.TOTAL_RECORDS);
    path=new Path(this.launcherProps.getProperty(ConfigurationKeys.DATA_PUBLISHER_FINAL_DIR),new Path(taskState.getExtract().getOutputFilePath(),"fork_1"));
    Assert.assertTrue(lfs.exists(path));
    Assert.assertEquals(lfs.listStatus(path).length,2);
    Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN + ".1"),TestExtractor.TOTAL_RECORDS);
  }
}
