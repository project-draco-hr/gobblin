{
  int port=Integer.parseInt(properties.getProperty(ConfigurationKeys.REST_SERVER_PORT_KEY,ConfigurationKeys.DEFAULT_REST_SERVER_PORT));
  RestLiConfig config=new RestLiConfig();
  config.addResourcePackageNames(JobExecutionInfoResource.class.getPackage().getName());
  config.setServerNodeUri(URI.create(String.format("http://%s:%d",properties.getProperty(ConfigurationKeys.REST_SERVER_HOST_KEY,ConfigurationKeys.DEFAULT_REST_SERVER_HOST),port)));
  config.setDocumentationRequestHandler(new DefaultDocumentationRequestHandler());
  Injector injector=Guice.createInjector(new MetaStoreModule(properties));
  JobHistoryStore jobHistoryStore=injector.getInstance(JobHistoryStore.class);
  SimpleBeanProvider beanProvider=new SimpleBeanProvider();
  beanProvider.add("jobHistoryStore",jobHistoryStore);
  ResourceFactory factory=new InjectMockResourceFactory(beanProvider);
  TransportDispatcher dispatcher=new DelegatingTransportDispatcher(new RestLiServer(config,factory));
  this.httpServer=Optional.of(new HttpNettyServerFactory(FilterChains.empty()).createServer(port,dispatcher));
  LOGGER.info("Starting the job execution information server");
  this.httpServer.get().start();
}
