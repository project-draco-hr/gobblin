{
  Preconditions.checkNotNull(this.destination);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(this.writerId));
  Preconditions.checkNotNull(this.dataConverter);
  Preconditions.checkNotNull(this.schemaConverter);
  Preconditions.checkNotNull(this.sourceSchema);
switch (this.destination.getType()) {
case HDFS:
    Properties properties=this.destination.getProperties();
  String uri=properties.getProperty(WriterConfig.FILE_SYSTEM_URI_KEY);
String stagingDir=properties.getProperty(WriterConfig.STAGING_DIR_KEY,WriterConfig.DEFAULT_STAGING_DIR);
String outputDir=properties.getProperty(WriterConfig.OUTPUT_DIR_KEY,WriterConfig.DEFAULT_OUTPUT_DIR);
String fileName=properties.getProperty(WriterConfig.FILE_NAME_KEY) + "." + this.writerId;
int bufferSize=Integer.parseInt(properties.getProperty(WriterConfig.BUFFER_SIZE_KEY,WriterConfig.DEFAULT_BUFFER_SIZE));
Schema schema;
try {
schema=this.schemaConverter.convert(this.sourceSchema);
}
 catch (SchemaConversionException e) {
throw new IOException("Failed to convert the source schema: " + this.sourceSchema);
}
return new HdfsDataWriter<D>(URI.create(uri),stagingDir,outputDir,fileName,bufferSize,this.dataConverter,schema);
case KAFKA:
return new KafkaDataWriter();
default :
throw new RuntimeException("Unknown destination type: " + this.destination.getType());
}
}
